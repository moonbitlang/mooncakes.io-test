{
  "kind": "package",
  "relative_path": "html",
  "module_path": "Yoorkin/rabbit-tea",
  "readme_content": "\n# Html \n\nThis package provides the helper functions to build Html.\n\nHere are two design choices:\n\n- Guide Users with Type Definitions\n\n  This package defines specific types for arguments instead of relying on a potentially confusing `String` type. These types serve as documentation, helping users understand how to correctly provide arguments.\n\n- Seamless HTML EDSL\n\n  Instead of relying on a precompiler to process JSX-like syntax, this EDSL allows users to leverage the full power of Moonbit's syntax and toolchain. \n    \n  You can embed expressions in views without needing escape characters like `property={expression}` or `:property=expression`. For cases where the property name matches the variable name, you can use the convenient name-punning syntax, such as `property?` or `property~`.\n\n  In this early stage, we need to focus on improving the functionality of Rabbit-TEA. Language extensions like JSX may be considered after the 1.0 release.\n  \n# Using the Html EDSL\n\nWe are trying to define wrapper functions for each HTML element. They all follow a form like this:\n\n```mbt\npub fn div[M](\n  style~ : Array[String] = [],\n  id? : String,\n  class? : String,\n  click? : M,\n  childrens : Array[Html[M]]\n) -> Html[M] \n```\n\n## The `text` element\n\nTo represent text in HTML, use the `text` function.\n\n```mbt\nlet html = p([text(\"hello world\")])\n```\n\n## The special `nothing` element\n\nThere is a special `nothing` element that does not represent an actual HTML element, it simply represents \"nothing\". This is particularly useful for handling multiple `Option` types in your model:\n\n```mbt\nfn bar(path : Path, tag : Option[Tag]){\n  let path = foo(path)\n  let tag = match tag {\n    None => []\n    Some(x) => [view(x)] // Yuck!\n  }\n  div([path] + tag) // Don't do this\n}\n```\n\n```mbt\nfn bar(path : Path, tag : Option[Tag]){\n  let path = foo(path)\n  let tag = match tag {\n    None => nothing()\n    Some(x) => view(x)  \n  }\n  div([path, tag]) // Use @html.nothing\n}\n```\n\n## Advanced Usage\n\nThe wrapper functions and properties provided here may not cover all possible use cases. If you encounter missing functionality, feel free to file an issue or use the `node()` function as a workaround. The `node()` function allows you to manually specify the tag name, attributes, and children for your HTML element, offering flexibility for advanced or uncommon scenarios.\n\n```mbt\nlet html = node(\n  \"div\",\n  [style(\"key\",\"value\"), property(\"id\",\"key\")],\n  [child1, child2],\n) \n```\n\nContributions to help us finish the missing wrappers or arguments are also welcome.\n\n\n\n\n  \n\n\n\n\n\n\n\n",
  "package_data": "Yoorkin/rabbit-tea/html/package_data.json",
  "source_files": [ "attributes.mbt", "event.mbt", "html.mbt" ]
}