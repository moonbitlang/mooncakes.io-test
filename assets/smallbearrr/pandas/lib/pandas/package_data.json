{
  "name": "smallbearrr/pandas/lib/pandas",
  "traits": [],
  "types": [
    {
      "name": "BitMap",
      "docstring": "",
      "signature": "type BitMap",
      "loc": {
        "path": "smallbearrr/pandas/lib/pandas",
        "file": "bit_map.mbt",
        "line": 2,
        "column": 8
      },
      "methods": [],
      "impls": [
        {
          "self": {
            "kind": "constr",
            "constructor": {
              "name": "BitMap",
              "path": "smallbearrr/pandas/lib/pandas"
            },
            "arguments": []
          },
          "trait": { "name": "Eq", "path": "moonbitlang/core/builtin" },
          "methods": [
            {
              "name": "op_equal",
              "docstring": "automatically derived",
              "signature": "fn op_equal(<a href=\"smallbearrr/pandas/lib/pandas#BitMap\">BitMap</a>, <a href=\"smallbearrr/pandas/lib/pandas#BitMap\">BitMap</a>) -> Bool",
              "loc": {
                "path": "smallbearrr/pandas/lib/pandas",
                "file": "bit_map.mbt",
                "line": 7,
                "column": 16
              }
            }
          ]
        },
        {
          "self": {
            "kind": "constr",
            "constructor": {
              "name": "BitMap",
              "path": "smallbearrr/pandas/lib/pandas"
            },
            "arguments": []
          },
          "trait": { "name": "Show", "path": "moonbitlang/core/builtin" },
          "methods": [
            {
              "name": "output",
              "docstring": "automatically derived",
              "signature": "fn output(<a href=\"smallbearrr/pandas/lib/pandas#BitMap\">BitMap</a>, <a href=\"moonbitlang/core/builtin#Logger\">Logger</a>) -> Unit",
              "loc": {
                "path": "smallbearrr/pandas/lib/pandas",
                "file": "bit_map.mbt",
                "line": 7,
                "column": 10
              }
            }
          ]
        }
      ]
    },
    {
      "name": "ColumnNotFoundError",
      "docstring": "",
      "signature": "type ColumnNotFoundError",
      "loc": {
        "path": "smallbearrr/pandas/lib/pandas",
        "file": "error_type.mbt",
        "line": 11,
        "column": 7
      },
      "methods": [],
      "impls": [
        {
          "self": {
            "kind": "constr",
            "constructor": {
              "name": "ColumnNotFoundError",
              "path": "smallbearrr/pandas/lib/pandas"
            },
            "arguments": []
          },
          "trait": { "name": "Show", "path": "moonbitlang/core/builtin" },
          "methods": [
            {
              "name": "output",
              "docstring": "automatically derived",
              "signature": "fn output(<a href=\"smallbearrr/pandas/lib/pandas#ColumnNotFoundError\">ColumnNotFoundError</a>, <a href=\"moonbitlang/core/builtin#Logger\">Logger</a>) -> Unit",
              "loc": {
                "path": "smallbearrr/pandas/lib/pandas",
                "file": "error_type.mbt",
                "line": 11,
                "column": 41
              }
            }
          ]
        }
      ]
    },
    {
      "name": "ColumnSelector",
      "docstring": "",
      "signature": "pub(all) enum ColumnSelector {\n  Int(Int)\n  Str(String)\n}",
      "loc": {
        "path": "smallbearrr/pandas/lib/pandas",
        "file": "data_frame.mbt",
        "line": 821,
        "column": 15
      },
      "methods": [],
      "impls": []
    },
    {
      "name": "DataFrame",
      "docstring": "",
      "signature": "pub(all) struct DataFrame {\n  data : <a href=\"moonbitlang/core/array#Array\">Array</a>[<a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>]\n  shape : <a href=\"moonbitlang/core/array#Array\">Array</a>[Int]\n  index : <a href=\"moonbitlang/core/builtin#Map\">Map</a>[String, Int]\n}",
      "loc": {
        "path": "smallbearrr/pandas/lib/pandas",
        "file": "data_frame.mbt",
        "line": 2,
        "column": 17
      },
      "methods": [
        {
          "name": "add_column",
          "docstring": " Add a new column to the DataFrame\n\n ### Parameters\n\n - `self` : An instance of the DataFrame\n - `col` : The Series to be added as a new column\n\n ### Return\n\n - `Unit!` : This function adds a new column to the DataFrame or raises an error\n\n ### Errors\n\n - `InconsistentSeriesLength`: Series length is not equal to the DataFrame length\n - `DuplicateColumnError`: Series name already exists\n\n ### Example\n ```\n let new_column = Series::new(\"B\", SeriesInput::Int32([1, 2, 3]))\n df.add_column(new_column)\n ```",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>::add_column(self : <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>, col : <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>) -> Unit!<a href=\"moonbitlang/core/error#Error\">Error</a>",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "data_frame.mbt",
            "line": 163,
            "column": 19
          }
        },
        {
          "name": "add_row",
          "docstring": " Add a new row to the DataFrame\n\n ### Parameters\n\n - `self` : An instance of the DataFrame\n - `row` : An array of SeriesValue representing the new row to be added\n\n ### Return\n\n - `Unit` : This function adds a new row to the DataFrame\n\n ### Errors\n\n - `InconsistentSeriesLength` : Raised if the row length does not match the DataFrame column length\n - `InvalidType` : if there is a type mismatch\n\n ### Example\n ```\n let mut df = DataFrame::new([\n   Series::new(\"A\", SeriesInput::Int32([1, 2, 3])), \n   Series::new(\"B\", SeriesInput::Float32([1.1, 2.2, 3.3]))\n ])\n df.add_row([SeriesValue::Int(4), SeriesValue::Float(4.4)])\n ```",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>::add_row(self : <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>, row : <a href=\"moonbitlang/core/array#Array\">Array</a>[<a href=\"smallbearrr/pandas/lib/pandas#SeriesValue\">SeriesValue</a>]) -> Unit!<a href=\"moonbitlang/core/error#Error\">Error</a>",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "data_frame.mbt",
            "line": 369,
            "column": 19
          }
        },
        {
          "name": "all",
          "docstring": " Check if each column in the DataFrame has null values\n\n Parameters\n\n - `self` : An instance of the DataFrame\n\n Returns\n\n - `DataFrame` : A new DataFrame with a single row indicating if each column has null values\n\n Example\n ```moonbit\n let df = DataFrame::new!([\n   Series::new(\"A\", SeriesInput::Bool([true, true, true])),\n   Series::new(\"B\", SeriesInput::Bool([true, false, true])),\n ])\n inspect!(df.all!().data[0][0], content=\"Bool(true)\")\n inspect!(df.all!().data[1][0], content=\"Bool(false)\")\n ```",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>::all(self : <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>, ignore_nulls~ : Bool = ..) -> <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>!<a href=\"moonbitlang/core/error#Error\">Error</a>",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "data_frame.mbt",
            "line": 1687,
            "column": 19
          }
        },
        {
          "name": "any",
          "docstring": " Check if any element in each column of the DataFrame is true\n\n Parameters\n\n - `self` : An instance of the DataFrame\n - `ignore_nulls` : Whether to ignore null values (default is true)\n\n Returns\n\n - `DataFrame` : A new DataFrame with a single row indicating if any element in each column is true\n\n Errors\n\n - `InvalidType` : Raised if any column is not of type Bool\n\n Example\n ```moonbit\n let df = DataFrame::new!([\n   Series::new(\"A\", SeriesInput::Bool([true, true, true])),\n   Series::new(\"B\", SeriesInput::Bool([true, false, true])),\n ])\n inspect!(df.any!().data[0][0], content=\"Bool(true)\")\n inspect!(df.any!().data[1][0], content=\"Bool(true)\")\n ```",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>::any(self : <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>, ignore_nulls~ : Bool = ..) -> <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>!<a href=\"moonbitlang/core/error#Error\">Error</a>",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "data_frame.mbt",
            "line": 1752,
            "column": 19
          }
        },
        {
          "name": "cast",
          "docstring": " Cast DataFrame column(s) to the specified dtype(s).\n\n Parameters\n\n - `self` : An instance of the DataFrame\n - `data_type?` : The data type to cast the DataFrame to\n - `cast_mapping?` : A mapping of column names to data types for casting specific columns\n - `strict~` : Whether to enforce strict casting (default is true)\n\n Returns\n\n - `DataFrame` : A new DataFrame with the specified data type\n\n Example\n ```\n let df = DataFrame::new!([\n   Series::new(\"A\", SeriesInput::Int32([1, 2, 3])),\n   Series::new(\"B\", SeriesInput::Float32([1.1, 2.2, 3.3]))\n ])\n let df_cast = df.cast!(data_type = DataType::Float32)\n inspect!(df_cast.data[0].data_type, content=\"Float32\")\n let df_cast = df.cast!(cast_mapping = {\"A\" : DataType::Float32, \"B\" : DataType::Int32})\n inspect!(df_cast.data[0].data_type, content=\"Float32\")\n inspect!(df_cast.data[1].data_type, content=\"Int32\")\n ```",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>::cast(self : <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>, data_type? : <a href=\"smallbearrr/pandas/lib/pandas#DataType\">DataType</a>, cast_mapping? : <a href=\"moonbitlang/core/builtin#Map\">Map</a>[String, <a href=\"smallbearrr/pandas/lib/pandas#DataType\">DataType</a>], strict~ : Bool = ..) -> <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>!<a href=\"moonbitlang/core/error#Error\">Error</a>",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "data_frame.mbt",
            "line": 1917,
            "column": 19
          }
        },
        {
          "name": "clear",
          "docstring": "\n Clears all data in the DataFrame, resetting it to an empty state.\n\n ### Parameters:\n\n - `self` : The DataFrame to be cleared.\n - `n` : Optional parameter that specifies a size hint for clearing (default\n is 0). Currently not used.\n\n ### Example:\n\n ```moonbit\n df.clear!()\n ```",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>::clear(self : <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>) -> Unit",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "data_frame.mbt",
            "line": 781,
            "column": 19
          }
        },
        {
          "name": "clone",
          "docstring": "\n Creates a deep copy of the DataFrame.\n\n ### Parameters:\n\n - `self` : The DataFrame to be cloned.\n\n ### Return:\n Return a new DataFrame with the same data, shape, and index as the original\n DataFrame. All internal data structures are deeply copied.\n THIS METHOD Under Consideration...\n\n ### Example:\n\n ```moonbit\n let df = DataFrame::new!([\n   Series::new(\"A\", SeriesData::Int([1, 2, 3])),\n   Series::new(\"B\", SeriesData::Float([1.0, 2.0, 3.0])),\n ])\n let cloned = df.clone()\n ```",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>::clone(self : <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>) -> <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "data_frame.mbt",
            "line": 810,
            "column": 19
          }
        },
        {
          "name": "column",
          "docstring": " Select a column from the DataFrame\n\n ### Parameters\n\n - `self` : An instance of the DataFrame\n - `col_name` : Column name to be selected\n\n ### Return\n\n - `Series` : Series contain selected columns\n \n ### Errors\n \n - `ColumnNotFoundError` : Raised if a column is not found\n\n ### Example\n ```\n let col_selected = df.column(\"col_name\")\n ```",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>::column(self : <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>, col_name : String) -> <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>!<a href=\"smallbearrr/pandas/lib/pandas#ColumnNotFoundError\">ColumnNotFoundError</a>",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "data_frame.mbt",
            "line": 263,
            "column": 19
          }
        },
        {
          "name": "count",
          "docstring": "",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>::count(self : <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>) -> (Int, Int)",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "data_frame.mbt",
            "line": 1594,
            "column": 19
          }
        },
        {
          "name": "data",
          "docstring": "",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>::data(self : <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>) -> <a href=\"moonbitlang/core/array#Array\">Array</a>[<a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>]",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "data_frame.mbt",
            "line": 70,
            "column": 19
          }
        },
        {
          "name": "drop_column",
          "docstring": " Drop a column from the DataFrame\n\n ### Parameters\n\n - `self` : An instance of the DataFrame\n - `col_name` : The name of the column to be dropped\n\n ### Return\n\n - `Unit` : This function drops a column from the DataFrame\n\n ### Example\n ```\n df.drop_column(\"column_name\")\n ```",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>::drop_column(self : <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>, col_name : String) -> Unit!<a href=\"smallbearrr/pandas/lib/pandas#ColumnNotFoundError\">ColumnNotFoundError</a>",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "data_frame.mbt",
            "line": 194,
            "column": 19
          }
        },
        {
          "name": "drop_row",
          "docstring": " Drop a row from the DataFrame\n\n ### Parameters\n\n - `self` : An instance of the DataFrame\n - `row` : The index of the row to be dropped\n\n ### Return\n\n - `Unit` : This function drops a row from the DataFrame\n\n ### Errors\n\n - `IndexOutOfBounds` : Raised if the row index is out of bounds\n\n ### Example\n ```\n df.drop_row(0)\n ```",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>::drop_row(self : <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>, row_index : Int) -> Unit!<a href=\"moonbitlang/core/error#Error\">Error</a>",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "data_frame.mbt",
            "line": 333,
            "column": 19
          }
        },
        {
          "name": "dtypes",
          "docstring": " Get the column data types",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>::dtypes(self : <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>) -> <a href=\"moonbitlang/core/array#Array\">Array</a>[String]",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "data_frame.mbt",
            "line": 1654,
            "column": 19
          }
        },
        {
          "name": "fill_null",
          "docstring": " Fill null values using the specified value or strategy\n\n Parameters\n\n - `self` : An instance of the DataFrame\n - `value` : Value used to fill null values.\n - `strategy` : Strategy used to fill null values. {'forward', 'backward', 'min', 'max', 'mean', 'zero', 'one'}\n - `limit` : Number of consecutive null values to fill when using the ‘forward’ or ‘backward’ strategy.\n\n Returns\n\n - `DataFrame` : A new DataFrame with null values filled\n \n Errors\n \n - `InvalidType` : Raised if the value is not of the same type as the column\n\n Example\n ```\n let df = DataFrame::new!([\n   Series::new(\"A\", SeriesInput::Int32_Nullable([Some(1), None, Some(3)])),\n   Series::new(\"B\", SeriesInput::Int32_Nullable([None, Some(1), Some(3)])),\n ])\n let filled = df.fill_null!(value=SeriesValue::Int(2))\n inspect!(filled.data[0].data, content=\"Int([1, 2, 3])\")\n let filled = df.fill_null!(strategy=\"forward\")\n inspect!(filled.data[0].data, content=\"Int([1, 1, 3])\")\n let filled = df.fill_null!(strategy=\"backward\")\n inspect!(filled.data[1].data, content=\"Int([1, 1, 3])\")\n let filled = df.fill_null!(strategy=\"max\")\n inspect!(filled.data[0].data, content=\"Int([1, 3, 3])\")\n let filled = df.fill_null!(strategy=\"mean\")\n inspect!(filled.data[0].data, content=\"Float([1, 2, 3])\")\n ```",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>::fill_null(self : <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>, value? : <a href=\"smallbearrr/pandas/lib/pandas#SeriesValue\">SeriesValue</a>, strategy? : String, limit? : Int) -> <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>!<a href=\"moonbitlang/core/error#Error\">Error</a>",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "data_frame.mbt",
            "line": 1879,
            "column": 19
          }
        },
        {
          "name": "filter",
          "docstring": " Filter rows in the DataFrame based on a condition\n\n ### Parameters\n\n - `self` : An instance of the DataFrame\n - `name` : The name of the column to apply the filter on\n - `f` : A function that takes a `SeriesValue` and returns a `Bool` indicating whether the row should be included\n\n ### Return\n\n - `DataFrame` : A new DataFrame containing only the rows that satisfy the condition\n\n ### Example\n ```\n let df = DataFrame::new([Series::new(\"A\", SeriesData::Int([1, 2, 3, 4, 5, 6]))])\n let filtered = df.filter(\"A\", fn(x : SeriesValue) -> Bool { x < SeriesValue::Int(3) })\n ```",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>::filter(self : <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>, name : String, f : (<a href=\"smallbearrr/pandas/lib/pandas#SeriesValue\">SeriesValue</a>) -> Bool) -> <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>!<a href=\"moonbitlang/core/error#Error\">Error</a>",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "data_frame.mbt",
            "line": 583,
            "column": 19
          }
        },
        {
          "name": "get_column_index",
          "docstring": " Get the index of a column by its name\n\n ### Parameters\n\n - `self` : An instance of the DataFrame\n - `name` : The name of the column\n\n ### Errors\n\n - `ColumnNotFoundError` : Raised if the specified column is not found\n\n ### Example\n ```moonbit\n let index = df.get_column_index(\"A\")\n ```",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>::get_column_index(self : <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>, name : String) -> Int!<a href=\"moonbitlang/core/error#Error\">Error</a>",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "data_frame.mbt",
            "line": 1182,
            "column": 19
          }
        },
        {
          "name": "has_nulls",
          "docstring": " Check if each column in the DataFrame has null values\n\n Parameters\n\n - `self` : An instance of the DataFrame\n\n Returns\n\n - `DataFrame` : A new DataFrame with a single row indicating if each column has null values\n\n Example\n ```moonbit\n let df = DataFrame::new!([\n   Series::new(\"A\", SeriesInput::Int32([1, 2, 3])),\n ])\n inspect!(df.has_nulls().data[0][0], content=\"Bool(false)\")\n let df = DataFrame::new!([\n   Series::new(\"A\", SeriesInput::Int32_Nullable([Some(1), None, Some(3)])),\n ])\n inspect!(df.has_nulls().data[0][0], content=\"Bool(true)\")\n ```",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>::has_nulls(self : <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>) -> <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "data_frame.mbt",
            "line": 1814,
            "column": 19
          }
        },
        {
          "name": "head",
          "docstring": " Display the first few rows of the DataFrame\n\n ### Parameters\n\n - `self` : An instance of the DataFrame\n - `num` : The number of rows to display (default is 5)\n\n ### Return\n\n - `Unit` : This function prints the first few rows of the DataFrame\n\n ### Example\n ```\n df.head()\n df.head(rows=3)\n ```",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>::head(self : <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>, rows~ : Int = ..) -> Unit",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "data_frame.mbt",
            "line": 117,
            "column": 19
          }
        },
        {
          "name": "height",
          "docstring": " Get the number of rows",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>::height(self : <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>) -> Int",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "data_frame.mbt",
            "line": 1599,
            "column": 19
          }
        },
        {
          "name": "hstack",
          "docstring": " Horizontally stack two DataFrames\n\n ### Parameters\n\n - `self` : An instance of the DataFrame\n - `other` : Another DataFrame to be stacked horizontally\n\n ### Return\n\n - `DataFrame` : A new DataFrame resulting from the horizontal stacking of the two DataFrames\n\n ### Example\n ```\n let df1 = DataFrame::new!([\n   Series::new(\"A\", SeriesData::Int([1, 2, 3]))\n ])\n let df2 = DataFrame::new!([\n   Series::new(\"B\", SeriesData::Int([4, 5, 6]))\n ])\n let df_stacked = df1.hstack!(df2)\n ```",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>::hstack(self : <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>, other : <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>) -> <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>!<a href=\"moonbitlang/core/error#Error\">Error</a>",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "data_frame.mbt",
            "line": 757,
            "column": 8
          }
        },
        {
          "name": "is_empty",
          "docstring": " Returns True if the DataFrame contains no rows.",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>::is_empty(self : <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>) -> Bool",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "data_frame.mbt",
            "line": 1841,
            "column": 19
          }
        },
        {
          "name": "item",
          "docstring": "\n Retrieves a single item from the DataFrame at the specified row and column.\n\n ### Parameters:\n\n - `self` : The DataFrame to retrieve the item from.\n - `row` : The index of the row (zero-based).\n - `column` : The column identifier, can be either:\n  * `ColumnSelector::Int`: A zero-based index of the column\n  * `ColumnSelector::Str`: The name of the column\n\n Returns a `SeriesValue` value representing the item at the specified position.\n\n Throws:\n\n - `ColumnNotFoundError` : If the specified column name does not exist in the\n DataFrame\n - `IndexOutOfBounds` : If the row index is out of range\n\n ### Example:\n\n ```moonbit\n let df = DataFrame::new!([\n   Series::new(\"A\", SeriesData::Int([1, 2, 3])),\n   Series::new(\"B\", SeriesData::Float([1.5, 2.0, 3.5])),\n ])\n df.item!(1, ColumnSelector::Str(\"A\"))\n df.item!(0, ColumnSelector::Int(1))\n ```",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>::item(self : <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>, row : Int, column : <a href=\"smallbearrr/pandas/lib/pandas#ColumnSelector\">ColumnSelector</a>) -> <a href=\"smallbearrr/pandas/lib/pandas#SeriesValue\">SeriesValue</a>!<a href=\"moonbitlang/core/error#Error\">Error</a>",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "data_frame.mbt",
            "line": 855,
            "column": 19
          }
        },
        {
          "name": "limit",
          "docstring": "\n Creates a new DataFrame containing only the first N rows of the original\n DataFrame. If N is larger than the number of rows in the DataFrame, returns a\n DataFrame with all rows from the original DataFrame.\n\n ### Parameters:\n\n - `self` : The DataFrame to limit.\n - `n` : The maximum number of rows to include in the new DataFrame.\n\n ### Return:\n \n Return a new DataFrame containing at most N rows from the original\n DataFrame.\n\n Throws an error of type `Error` if creating the new DataFrame fails.\n\n ### Example:\n\n ```moonbit\n let df = DataFrame::new!([\n   Series::new(\"A\", SeriesData::Int([1, 2, 3, 4, 5])),\n   Series::new(\"B\", SeriesData::Float([1.1, 2.2, 3.3, 4.4, 5.5])),\n ])\n let limited = df.limit!(3)\n ```",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>::limit(self : <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>, n : Int) -> <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>!<a href=\"moonbitlang/core/error#Error\">Error</a>",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "data_frame.mbt",
            "line": 900,
            "column": 8
          }
        },
        {
          "name": "max",
          "docstring": " Aggregate the columns of this DataFrame to their maximum value\n\n ### Parameters\n\n - `self` : An instance of the DataFrame\n\n ### Returns\n\n - `DataFrame` : A new DataFrame containing the maximum value of each column\n\n ### Example\n ```\n let df_min = df.max()\n ```",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>::max(self : <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>) -> <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>!<a href=\"moonbitlang/core/error#Error\">Error</a>",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "data_frame.mbt",
            "line": 1447,
            "column": 19
          }
        },
        {
          "name": "max_horizontal",
          "docstring": " Get the maximum value horizontally across columns.\n\n ### Parameters\n\n - `self` : An instance of the DataFrame\n\n ### Returns\n\n - `Series` : A Series containing the maximum value of each column\n\n ### Errors\n\n - `InvalidType` : Raised if the DataFrame contains unsupported data types\n\n ### Example\n ```\n let max = df.max_horizontal()\n ```",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>::max_horizontal(self : <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>) -> <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>!<a href=\"moonbitlang/core/error#Error\">Error</a>",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "data_frame.mbt",
            "line": 1492,
            "column": 19
          }
        },
        {
          "name": "min",
          "docstring": " Aggregate the columns of this DataFrame to their minimum value\n\n ### Parameters\n\n - `self` : An instance of the DataFrame\n\n ### Returns\n\n - `DataFrame` : A new DataFrame containing the minimum value of each column\n\n ### Example\n ```\n let df_min = df.min()\n ```",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>::min(self : <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>) -> <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>!<a href=\"moonbitlang/core/error#Error\">Error</a>",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "data_frame.mbt",
            "line": 1367,
            "column": 19
          }
        },
        {
          "name": "min_horizontal",
          "docstring": " Get the minimum value horizontally across columns.\n\n ### Parameters\n\n - `self` : An instance of the DataFrame\n\n ### Returns\n\n - `Series` : A Series containing the minimum value of each column\n\n ### Errors\n\n - `InvalidType` : Raised if the DataFrame contains unsupported data types\n\n ### Example\n ```\n let max = df.min_horizontal()\n ```",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>::min_horizontal(self : <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>) -> <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>!<a href=\"moonbitlang/core/error#Error\">Error</a>",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "data_frame.mbt",
            "line": 1412,
            "column": 19
          }
        },
        {
          "name": "new",
          "docstring": " Create a new DataFrame\n\n ### Parameters\n\n - `data` : Array of Series\n\n ### Return\n\n - `DataFrame!InconsistentSeriesLength` : A new DataFrame instance\n\n ### Errors\n\n - `InconsistentSeriesLength` : Raised if the lengths of the Series are not equal\n\n ### Example\n ```\n let df = DataFrame::new!([\n   Series::new(\"A\", SeriesData::Int([1, 1, 3, 1, 1, 6])),\n   Series::new(\"B\", SeriesData::Float([1.5, 2.0, 3.5, 4.0, 5.5, 6.0])),\n   Series::new(\"C\", SeriesData::Bool([true, false, true, false, true, false])),\n   Series::new(\"D\", SeriesData::Str([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\"])),\n ])\n ```",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>::new(data : <a href=\"moonbitlang/core/array#Array\">Array</a>[<a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>]) -> <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>!<a href=\"smallbearrr/pandas/lib/pandas#InconsistentSeriesLength\">InconsistentSeriesLength</a>",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "data_frame.mbt",
            "line": 49,
            "column": 19
          }
        },
        {
          "name": "null_count",
          "docstring": " Create a new DataFrame that shows the null counts per column.",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>::null_count(self : <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>) -> <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "data_frame.mbt",
            "line": 1827,
            "column": 19
          }
        },
        {
          "name": "op_get",
          "docstring": "",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>::op_get(self : <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>, index : Int) -> <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "data_frame.mbt",
            "line": 545,
            "column": 8
          }
        },
        {
          "name": "product",
          "docstring": " Aggregate the columns of this DataFrame to their product values\n \n Example:\n ```\n let df_product = df.product()\n ```",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>::product(self : <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>) -> <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "data_frame.mbt",
            "line": 1628,
            "column": 19
          }
        },
        {
          "name": "rename",
          "docstring": " Rename a column in the DataFrame\n\n ### Parameters\n\n - `self` : An instance of the DataFrame\n - `old_name` : The current name of the column to be renamed\n - `new_name` : The new name for the column\n\n ### Return\n\n - `Unit` : This function renames a column in the DataFrame\n \n ### Errors\n \n - `ColumnNotFoundError` : Raised if the column is not found\n\n ### Example\n ```\n test {\n   let mut df = DataFrame::new([Series::new(\"A\", SeriesData::Int([1, 2]))])\n   df.rename(\"A\", \"B\")\n   inspect!(df.data()[0].name(), context=\"B\")\n }\n ```",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>::rename(self : <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>, old_name : String, new_name : String) -> Unit!<a href=\"smallbearrr/pandas/lib/pandas#ColumnNotFoundError\">ColumnNotFoundError</a>",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "data_frame.mbt",
            "line": 233,
            "column": 19
          }
        },
        {
          "name": "replace_column",
          "docstring": " Replace a column in the DataFrame at a specified index\n\n ### Parameters\n\n - `self` : An instance of the DataFrame\n - `index` : The index of the column to be replaced\n - `series` : The new Series to replace the existing column\n\n ### Errors\n\n - `IndexOutOfBounds` : Raised if the specified index is out of bounds\n - `InconsistentSeriesLength` : Raised if the length of the new Series does not match the number of rows in the DataFrame\n\n ### Example\n ```\n let df = DataFrame::new!([\n   Series::new(\"A\", SeriesData::Int([1, 2, 3])),\n   Series::new(\"B\", SeriesData::Float([1.1, 2.2, 3.3]))\n ])\n let new_series = Series::new(\"C\", SeriesData::Int([4, 5, 6]))\n df.replace_column(1, new_series)\n ```",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>::replace_column(self : <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>, index : Int, series : <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>) -> Unit!<a href=\"moonbitlang/core/error#Error\">Error</a>",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "data_frame.mbt",
            "line": 1137,
            "column": 19
          }
        },
        {
          "name": "reverse",
          "docstring": " Reverse the order of rows in the DataFrame\n\n ### Parameters\n\n - `self` : An instance of the DataFrame\n\n ### Example\n ```moonbit\n df.reverse()\n ```",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>::reverse(self : <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>) -> Unit",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "data_frame.mbt",
            "line": 1161,
            "column": 19
          }
        },
        {
          "name": "schema",
          "docstring": " Get an ordered mapping of column names to their data type\n \n Example:\n ```\n let schema = df.schema()\n ```",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>::schema(self : <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>) -> <a href=\"moonbitlang/core/builtin#Map\">Map</a>[String, String]",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "data_frame.mbt",
            "line": 1614,
            "column": 19
          }
        },
        {
          "name": "select_columns",
          "docstring": " Select specific columns from the DataFrame\n\n ### Parameters\n\n - `self` : An instance of the DataFrame\n - `cols` : An array of column names to be selected\n\n ### Return\n\n - `DataFrame` : A new DataFrame containing only the selected columns\n \n ### Errors\n \n - `ColumnNotFoundError` : Raised if a column is not found\n\n ### Example\n ```\n let df_selected = df.select_columns([\"col_name1\", \"col_name2\"])\n ```",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>::select_columns(self : <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>, cols : <a href=\"moonbitlang/core/array#Array\">Array</a>[String]) -> <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>!<a href=\"smallbearrr/pandas/lib/pandas#ColumnNotFoundError\">ColumnNotFoundError</a>",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "data_frame.mbt",
            "line": 292,
            "column": 19
          }
        },
        {
          "name": "select_rows",
          "docstring": " Select specific rows from the DataFrame\n\n ### Parameters\n\n - `self` : An instance of the DataFrame\n - `range` : An optional tuple representing the range of rows to be selected (inclusive start, exclusive end)\n - `indices` : An optional array of row indices to be selected\n\n ### Return\n\n - `DataFrame` : A new DataFrame containing only the selected rows\n \n ### Errors\n \n - `IndexOutOfBounds` : Raised if the row index is out of bounds\n\n ### Example\n ```\n let df_selected_range = df.select_rows(range=(1, 4))\n \n let df_selected_indices = df.select_rows(indices=[1, 3, 5])\n ```",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>::select_rows(self : <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>, range? : (Int, Int), indices? : <a href=\"moonbitlang/core/array#Array\">Array</a>[Int]) -> <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>!<a href=\"smallbearrr/pandas/lib/pandas#IndexOutOfBounds\">IndexOutOfBounds</a>",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "data_frame.mbt",
            "line": 461,
            "column": 19
          }
        },
        {
          "name": "shape",
          "docstring": "",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>::shape(self : <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>) -> <a href=\"moonbitlang/core/array#Array\">Array</a>[Int]",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "data_frame.mbt",
            "line": 65,
            "column": 19
          }
        },
        {
          "name": "slice",
          "docstring": "\n Creates a new DataFrame containing a slice of rows from the original\n DataFrame, starting from the specified offset.\n\n Parameters:\n\n * `self` : The DataFrame to slice.\n * `offset` : The starting index of the slice (zero-based).\n * `length` : Specifying the number of rows to include in\n the slice. If not provided, includes all remaining rows after the offset.\n\n Returns a new DataFrame containing the specified slice of rows from the\n original DataFrame.\n\n Throws an error of type `Error` if creating the new DataFrame fails.\n\n Example:\n\n ```moonbit\n   let df = DataFrame::new!([\n     Series::new(\"A\", SeriesData::Int([1, 2, 3, 4, 5])),\n     Series::new(\"B\", SeriesData::Float([1.1, 2.2, 3.3, 4.4, 5.5])),\n   ])\n   let sliced = df.slice!(1, length=2)\n ```",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>::slice(self : <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>, offset : Int, length~ : Int = ..) -> <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>!<a href=\"moonbitlang/core/error#Error\">Error</a>",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "data_frame.mbt",
            "line": 985,
            "column": 19
          }
        },
        {
          "name": "sort",
          "docstring": " Sort the DataFrame by a specified column\n\n ### Parameters\n\n - `self` : An instance of the DataFrame\n - `col_name` : The name of the column to sort by\n - `descending~` : Whether to sort in descending order (default is false)\n\n ### Return\n\n - `Unit` : This function sorts the DataFrame in place\n\n ### Errors\n\n - `ColumnNotFoundError` : Raised if the specified column is not found\n\n ### Example\n ```\n let df = DataFrame::new([\n   Series::new(\"A\", SeriesData::Int([3, 1, 2])), \n   Series::new(\"B\", SeriesData::Float([3.3, 1.1, 2.2]))\n ])\n df.sort(\"A\", descending=true)\n inspect!(df.data()[0].data(), content=\"Int([1, 2, 3])\")\n ```",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>::sort(self : <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>, col_name : String, descending~ : Bool = ..) -> Unit!<a href=\"smallbearrr/pandas/lib/pandas#ColumnNotFoundError\">ColumnNotFoundError</a>",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "data_frame.mbt",
            "line": 657,
            "column": 19
          }
        },
        {
          "name": "sum",
          "docstring": " Calculate the sum of each column in the DataFrame\n\n ### Parameters\n\n - `self` : An instance of the DataFrame\n\n ### Returns\n\n - `DataFrame` : A new DataFrame containing the sum of each column\n\n ### Errors\n\n - `InvalidType` : Raised if the Series data type is not supported\n\n ### Example\n ```\n let df_sum = df.sum()\n ```",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>::sum(self : <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>) -> <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>!<a href=\"smallbearrr/pandas/lib/pandas#InvalidType\">InvalidType</a>",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "data_frame.mbt",
            "line": 1531,
            "column": 19
          }
        },
        {
          "name": "sum_horizontal",
          "docstring": " Sum all values horizontally across columns\n\n ### Parameters\n\n - `self` : An instance of the DataFrame\n\n ### Returns\n\n - `Series` : A Series containing the sum of each row\n\n ### Errors\n\n - `InvalidType` : Raised if the DataFrame contains unsupported data types\n\n ### Example\n ```\n let df = DataFrame::new!([\n   Series::new(\"A\", SeriesData::Int([1, 2, 3])),\n   Series::new(\"B\", SeriesData::Float([1.5, 2.5, 3.0]))\n ])\n let sum = df.sum_horizontal!()\n ```",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>::sum_horizontal(self : <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>) -> <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>!<a href=\"moonbitlang/core/error#Error\">Error</a>",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "data_frame.mbt",
            "line": 1572,
            "column": 19
          }
        },
        {
          "name": "tail",
          "docstring": "\n Creates a new DataFrame containing only the last N rows of the original\n DataFrame. If N is larger than the number of rows in the DataFrame, returns a\n DataFrame with all rows from the original DataFrame.\n\n ### Parameters:\n\n - `self` : The DataFrame to extract rows from.\n - `n` : The number of rows to include from the end of the DataFrame.\n\n ### Return:\n \n Returns a new DataFrame containing at most N rows from the end of the\n original DataFrame.\n\n Throws an error of type `Error` if creating the new DataFrame fails.\n\n ### Example:\n\n ```moonbit\n let df = DataFrame::new!([\n   Series::new(\"A\", SeriesData::Int([1, 2, 3, 4, 5])),\n   Series::new(\"B\", SeriesData::Float([1.1, 2.2, 3.3, 4.4, 5.5])),\n ])\n let last_three = df.tail!(3)\n ```",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>::tail(self : <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>, n : Int) -> <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>!<a href=\"moonbitlang/core/error#Error\">Error</a>",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "data_frame.mbt",
            "line": 941,
            "column": 8
          }
        },
        {
          "name": "to_series",
          "docstring": "\n Converts a column of the DataFrame to a Series by its index.\n\n Parameters:\n\n * `self` : The DataFrame from which to extract the Series.\n * `column_index` : The zero-based index of the column to convert to a Series.\n\n Returns the Series at the specified column index.\n\n Example:\n\n ```moonbit\n let df = DataFrame::new!([\n   Series::new(\"A\", SeriesData::Int([1, 2, 3])),\n   Series::new(\"B\", SeriesData::Float([1.5, 2.0, 2.5])),\n ])\n df.to_series(0)\n ```",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>::to_series(self : <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>, index : Int) -> <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "data_frame.mbt",
            "line": 1031,
            "column": 8
          }
        },
        {
          "name": "transpose",
          "docstring": " Transpose a DataFrame over the diagonal\n\n ### Parameters\n\n - `self` : An instance of the DataFrame\n - `include_header~` : If set, the column names will be added as first column. (default is false)\n - `header_name~` : If include_header is set, this determines the name of the column that will be inserted. (default is \"column\")\n - `column_names?` : Optional iterable yielding strings or a string naming an existing column. These will name the value (non-header) columns in the transposed data.\n\n ### Returns\n\n - `DataFrame` : A new transposed DataFrame\n\n ### Errors\n\n - `InvalidType` : Raised if the columns have different data types\n\n ### Example\n ```\n let df = DataFrame::new!([\n   Series::new(\"A\", SeriesData::Int([1, 2, 3])),\n   Series::new(\"B\", SeriesData::Int([4, 5, 6]))\n ])\n let df_transposed = df.transpose()\n let df_transposed = df.transpose(include_header=true)\n let df_transposed = df.transpose(include_header=true, header_name=\"header\")\n let df_transposed = df.transpose(column_names=[\"x\",\"y\"])\n ```",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>::transpose(self : <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>, include_header~ : Bool = .., header_name~ : String = .., column_names? : <a href=\"moonbitlang/core/array#Array\">Array</a>[String]) -> <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>!<a href=\"moonbitlang/core/error#Error\">Error</a>",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "data_frame.mbt",
            "line": 1253,
            "column": 19
          }
        },
        {
          "name": "unique",
          "docstring": "\n Removes duplicate rows from the DataFrame based on specified columns, with\n control over which duplicates to keep.\n\n Parameters:\n\n * `df` : The DataFrame to remove duplicates from.\n * `columns` : An array of column names to consider when identifying\n duplicates. Rows are considered duplicates if they have the same values in\n all specified columns.\n * `keep~` : A string specifying which duplicates to retain. Valid values are:\n  * \"first\": Keep the first occurrence of each duplicate\n  * \"last\": Keep the last occurrence of each duplicate\n  * \"any\": Keep any occurrence of each duplicate (defaults to first)\n  * \"none\": Keep only rows that have no duplicates\n\n Returns a new DataFrame with duplicates removed according to the specified\n criteria.\n\n Throws:\n\n * `InvalidType` : If an invalid value is provided for the `keep` parameter\n * `ColumnNotFoundError` : If any of the specified columns do not exist in the\n DataFrame\n\n Example:\n\n ```moonbit\n let df = DataFrame::new!([\n   Series::new(\"A\", SeriesData::Int([1, 1, 2, 2])),\n   Series::new(\"B\", SeriesData::Int([1, 1, 2, 3])),\n ])\n let unique_df = df.unique!([\"A\"], keep=\"first\")\n ```",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>::unique(self : <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>, subset : <a href=\"moonbitlang/core/array#Array\">Array</a>[String], keep~ : String = ..) -> <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>!<a href=\"moonbitlang/core/error#Error\">Error</a>",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "data_frame.mbt",
            "line": 1069,
            "column": 8
          }
        },
        {
          "name": "vstack",
          "docstring": " Vertically stack two DataFrames\n\n ### Parameters\n\n - `self` : An instance of the DataFrame\n - `other` : Another DataFrame to be stacked vertically\n\n ### Return\n\n - `DataFrame` : A new DataFrame resulting from the vertical stacking of the two DataFrames\n\n ### Errors\n\n - `InconsistentSeriesLength` : Raised if the number of columns in the two DataFrames is not the same\n - `InvalidType` : Raised if the data types of the corresponding columns in the two DataFrames are not the same\n\n ### Example\n ```\n let df1 = DataFrame::new!([\n   Series::new(\"A\", SeriesData::Int([1, 2, 3]))\n ])\n let df2 = DataFrame::new!([\n   Series::new(\"A\", SeriesData::Int([4, 5, 6]))\n ])\n let df_stacked = df1.vstack!(df2)\n ```",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>::vstack(self : <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>, other : <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>) -> <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>!<a href=\"moonbitlang/core/error#Error\">Error</a>",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "data_frame.mbt",
            "line": 699,
            "column": 8
          }
        },
        {
          "name": "width",
          "docstring": " Get the number of columns",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>::width(self : <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>) -> Int",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "data_frame.mbt",
            "line": 1604,
            "column": 19
          }
        },
        {
          "name": "with_row_index",
          "docstring": " Add a row index column to the DataFrame\n\n ### Parameters\n\n - `self` : An instance of the DataFrame\n - `offset` : An optional integer offset to start the row index (default is 0)\n\n ### Returns\n\n - `DataFrame` : A new DataFrame with an added row index column\n\n ### Example\n ```\n let df_with_index = df.with_row_index()\n ```",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>::with_row_index(self : <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>, offset~ : Int = ..) -> <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "data_frame.mbt",
            "line": 1204,
            "column": 19
          }
        }
      ],
      "impls": [
        {
          "self": {
            "kind": "constr",
            "constructor": {
              "name": "DataFrame",
              "path": "smallbearrr/pandas/lib/pandas"
            },
            "arguments": []
          },
          "trait": { "name": "Eq", "path": "moonbitlang/core/builtin" },
          "methods": [
            {
              "name": "op_equal",
              "docstring": "automatically derived",
              "signature": "fn op_equal(<a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>, <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>) -> Bool",
              "loc": {
                "path": "smallbearrr/pandas/lib/pandas",
                "file": "data_frame.mbt",
                "line": 6,
                "column": 10
              }
            }
          ]
        },
        {
          "self": {
            "kind": "constr",
            "constructor": {
              "name": "DataFrame",
              "path": "smallbearrr/pandas/lib/pandas"
            },
            "arguments": []
          },
          "trait": { "name": "Hash", "path": "moonbitlang/core/builtin" },
          "methods": [
            {
              "name": "hash_combine",
              "docstring": "",
              "signature": "fn hash_combine(self : <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>, hasher : <a href=\"moonbitlang/core/builtin#Hasher\">Hasher</a>) -> Unit",
              "loc": {
                "path": "smallbearrr/pandas/lib/pandas",
                "file": "data_frame.mbt",
                "line": 9,
                "column": 34
              }
            }
          ]
        },
        {
          "self": {
            "kind": "constr",
            "constructor": {
              "name": "DataFrame",
              "path": "smallbearrr/pandas/lib/pandas"
            },
            "arguments": []
          },
          "trait": { "name": "Show", "path": "moonbitlang/core/builtin" },
          "methods": [
            {
              "name": "output",
              "docstring": " Trait Show for DataFrame",
              "signature": "fn output(self : <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>, logger : <a href=\"moonbitlang/core/builtin#Logger\">Logger</a>) -> Unit",
              "loc": {
                "path": "smallbearrr/pandas/lib/pandas",
                "file": "data_frame.mbt",
                "line": 75,
                "column": 34
              }
            }
          ]
        }
      ]
    },
    {
      "name": "DataType",
      "docstring": "",
      "signature": "pub(all) enum DataType {\n  Int32\n  Float32\n  String\n  Bool\n}",
      "loc": {
        "path": "smallbearrr/pandas/lib/pandas",
        "file": "data_types.mbt",
        "line": 2,
        "column": 15
      },
      "methods": [],
      "impls": [
        {
          "self": {
            "kind": "constr",
            "constructor": {
              "name": "DataType",
              "path": "smallbearrr/pandas/lib/pandas"
            },
            "arguments": []
          },
          "trait": { "name": "Eq", "path": "moonbitlang/core/builtin" },
          "methods": [
            {
              "name": "op_equal",
              "docstring": "automatically derived",
              "signature": "fn op_equal(<a href=\"smallbearrr/pandas/lib/pandas#DataType\">DataType</a>, <a href=\"smallbearrr/pandas/lib/pandas#DataType\">DataType</a>) -> Bool",
              "loc": {
                "path": "smallbearrr/pandas/lib/pandas",
                "file": "data_types.mbt",
                "line": 7,
                "column": 10
              }
            }
          ]
        },
        {
          "self": {
            "kind": "constr",
            "constructor": {
              "name": "DataType",
              "path": "smallbearrr/pandas/lib/pandas"
            },
            "arguments": []
          },
          "trait": { "name": "Hash", "path": "moonbitlang/core/builtin" },
          "methods": [
            {
              "name": "hash_combine",
              "docstring": "automatically derived",
              "signature": "fn hash_combine(<a href=\"smallbearrr/pandas/lib/pandas#DataType\">DataType</a>, <a href=\"moonbitlang/core/builtin#Hasher\">Hasher</a>) -> Unit",
              "loc": {
                "path": "smallbearrr/pandas/lib/pandas",
                "file": "data_types.mbt",
                "line": 7,
                "column": 14
              }
            }
          ]
        },
        {
          "self": {
            "kind": "constr",
            "constructor": {
              "name": "DataType",
              "path": "smallbearrr/pandas/lib/pandas"
            },
            "arguments": []
          },
          "trait": { "name": "Show", "path": "moonbitlang/core/builtin" },
          "methods": [
            {
              "name": "output",
              "docstring": "automatically derived",
              "signature": "fn output(<a href=\"smallbearrr/pandas/lib/pandas#DataType\">DataType</a>, <a href=\"moonbitlang/core/builtin#Logger\">Logger</a>) -> Unit",
              "loc": {
                "path": "smallbearrr/pandas/lib/pandas",
                "file": "data_types.mbt",
                "line": 7,
                "column": 20
              }
            }
          ]
        }
      ]
    },
    {
      "name": "DuplicateColumnError",
      "docstring": "",
      "signature": "type DuplicateColumnError",
      "loc": {
        "path": "smallbearrr/pandas/lib/pandas",
        "file": "error_type.mbt",
        "line": 8,
        "column": 7
      },
      "methods": [],
      "impls": [
        {
          "self": {
            "kind": "constr",
            "constructor": {
              "name": "DuplicateColumnError",
              "path": "smallbearrr/pandas/lib/pandas"
            },
            "arguments": []
          },
          "trait": { "name": "Show", "path": "moonbitlang/core/builtin" },
          "methods": [
            {
              "name": "output",
              "docstring": "automatically derived",
              "signature": "fn output(<a href=\"smallbearrr/pandas/lib/pandas#DuplicateColumnError\">DuplicateColumnError</a>, <a href=\"moonbitlang/core/builtin#Logger\">Logger</a>) -> Unit",
              "loc": {
                "path": "smallbearrr/pandas/lib/pandas",
                "file": "error_type.mbt",
                "line": 8,
                "column": 42
              }
            }
          ]
        }
      ]
    },
    {
      "name": "EmptyArrayError",
      "docstring": "",
      "signature": "type EmptyArrayError",
      "loc": {
        "path": "smallbearrr/pandas/lib/pandas",
        "file": "error_type.mbt",
        "line": 2,
        "column": 7
      },
      "methods": [],
      "impls": [
        {
          "self": {
            "kind": "constr",
            "constructor": {
              "name": "EmptyArrayError",
              "path": "smallbearrr/pandas/lib/pandas"
            },
            "arguments": []
          },
          "trait": { "name": "Show", "path": "moonbitlang/core/builtin" },
          "methods": [
            {
              "name": "output",
              "docstring": "automatically derived",
              "signature": "fn output(<a href=\"smallbearrr/pandas/lib/pandas#EmptyArrayError\">EmptyArrayError</a>, <a href=\"moonbitlang/core/builtin#Logger\">Logger</a>) -> Unit",
              "loc": {
                "path": "smallbearrr/pandas/lib/pandas",
                "file": "error_type.mbt",
                "line": 2,
                "column": 37
              }
            }
          ]
        }
      ]
    },
    {
      "name": "InconsistentSeriesLength",
      "docstring": "",
      "signature": "type InconsistentSeriesLength",
      "loc": {
        "path": "smallbearrr/pandas/lib/pandas",
        "file": "error_type.mbt",
        "line": 5,
        "column": 7
      },
      "methods": [],
      "impls": [
        {
          "self": {
            "kind": "constr",
            "constructor": {
              "name": "InconsistentSeriesLength",
              "path": "smallbearrr/pandas/lib/pandas"
            },
            "arguments": []
          },
          "trait": { "name": "Show", "path": "moonbitlang/core/builtin" },
          "methods": [
            {
              "name": "output",
              "docstring": "automatically derived",
              "signature": "fn output(<a href=\"smallbearrr/pandas/lib/pandas#InconsistentSeriesLength\">InconsistentSeriesLength</a>, <a href=\"moonbitlang/core/builtin#Logger\">Logger</a>) -> Unit",
              "loc": {
                "path": "smallbearrr/pandas/lib/pandas",
                "file": "error_type.mbt",
                "line": 5,
                "column": 46
              }
            }
          ]
        }
      ]
    },
    {
      "name": "IndexOutOfBounds",
      "docstring": "",
      "signature": "type IndexOutOfBounds",
      "loc": {
        "path": "smallbearrr/pandas/lib/pandas",
        "file": "error_type.mbt",
        "line": 14,
        "column": 7
      },
      "methods": [],
      "impls": [
        {
          "self": {
            "kind": "constr",
            "constructor": {
              "name": "IndexOutOfBounds",
              "path": "smallbearrr/pandas/lib/pandas"
            },
            "arguments": []
          },
          "trait": { "name": "Show", "path": "moonbitlang/core/builtin" },
          "methods": [
            {
              "name": "output",
              "docstring": "automatically derived",
              "signature": "fn output(<a href=\"smallbearrr/pandas/lib/pandas#IndexOutOfBounds\">IndexOutOfBounds</a>, <a href=\"moonbitlang/core/builtin#Logger\">Logger</a>) -> Unit",
              "loc": {
                "path": "smallbearrr/pandas/lib/pandas",
                "file": "error_type.mbt",
                "line": 14,
                "column": 38
              }
            }
          ]
        }
      ]
    },
    {
      "name": "InvalidType",
      "docstring": "",
      "signature": "type InvalidType",
      "loc": {
        "path": "smallbearrr/pandas/lib/pandas",
        "file": "error_type.mbt",
        "line": 17,
        "column": 7
      },
      "methods": [],
      "impls": [
        {
          "self": {
            "kind": "constr",
            "constructor": {
              "name": "InvalidType",
              "path": "smallbearrr/pandas/lib/pandas"
            },
            "arguments": []
          },
          "trait": { "name": "Show", "path": "moonbitlang/core/builtin" },
          "methods": [
            {
              "name": "output",
              "docstring": "automatically derived",
              "signature": "fn output(<a href=\"smallbearrr/pandas/lib/pandas#InvalidType\">InvalidType</a>, <a href=\"moonbitlang/core/builtin#Logger\">Logger</a>) -> Unit",
              "loc": {
                "path": "smallbearrr/pandas/lib/pandas",
                "file": "error_type.mbt",
                "line": 17,
                "column": 33
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Series",
      "docstring": "",
      "signature": "pub(all) struct Series {\n  name : String\n  data : <a href=\"smallbearrr/pandas/lib/pandas#SeriesData\">SeriesData</a>\n  data_type : <a href=\"smallbearrr/pandas/lib/pandas#DataType\">DataType</a>\n  bitmap : <a href=\"smallbearrr/pandas/lib/pandas#BitMap\">BitMap</a>\n  length : Int\n}",
      "loc": {
        "path": "smallbearrr/pandas/lib/pandas",
        "file": "series.mbt",
        "line": 10,
        "column": 17
      },
      "methods": [
        {
          "name": "abs",
          "docstring": " Compute absolute values.\n\n Example\n ```\n let series = Series::new(\"test\", SeriesInput::Int32([-1, 2, -3]))\n inspect!(series.abs!().data, content=\"Int([1, 2, 3])\")\n let series = Series::new(\"test\", SeriesInput::Float32([-1.5, 2.0, -3.0]))\n inspect!(series.abs!().data, content=\"Float([1.5, 2, 3])\")\n ```",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>::abs(self : <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>) -> <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>!<a href=\"smallbearrr/pandas/lib/pandas#InvalidType\">InvalidType</a>",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "series_computation.mbt",
            "line": 10,
            "column": 16
          }
        },
        {
          "name": "acos",
          "docstring": " Compute the element-wise value for the acos.\n\n Example\n ```\n let series = Series::new(\"test\", SeriesInput::Float32([1.0, 1.5, 2.0]))\n let acos = series.acos()\n ```",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>::acos(self : <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>) -> <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>!<a href=\"smallbearrr/pandas/lib/pandas#InvalidType\">InvalidType</a>",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "series_computation.mbt",
            "line": 108,
            "column": 16
          }
        },
        {
          "name": "all",
          "docstring": " Check if all elements in the Series are true\n\n Parameters\n\n - `self` : An instance of the Series\n\n Returns\n\n - `Bool` : True if all elements are true, otherwise false\n\n Errors\n\n - `InvalidType` : Raised if the Series data type is not Bool\n\n Example\n ```\n test {\n   let series = Series::new(\"test\", SeriesData::Bool([true, true, true]))\n   let result = series.all()\n   assert_eq!(result, true)\n }\n ```",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>::all(self : <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>) -> Bool!<a href=\"smallbearrr/pandas/lib/pandas#InvalidType\">InvalidType</a>",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "series.mbt",
            "line": 1067,
            "column": 16
          }
        },
        {
          "name": "any",
          "docstring": " Check if any element in the Series is true\n\n Parameters\n\n - `self` : An instance of the Series\n\n Returns\n\n - `Bool` : True if any element is true, otherwise false\n\n Errors\n\n - `InvalidType` : Raised if the Series data type is not Bool\n\n Example\n ```moonbit\n let series = Series::new(\"test\", SeriesData::Bool([true, false, true]))\n inspect!(series.any!(), content=\"true\")\n let series = Series::new(\"test\", SeriesData::Bool([false, false, false]))\n inspect!(series.any!(), content=\"false\")\n ```",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>::any(self : <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>) -> Bool!<a href=\"smallbearrr/pandas/lib/pandas#InvalidType\">InvalidType</a>",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "series.mbt",
            "line": 1112,
            "column": 16
          }
        },
        {
          "name": "append",
          "docstring": " Append another Series to current Series\n\n Parameters\n\n - `self` : An instance of the Series\n - `other` : Another Series to append\n\n Returns\n\n - `Series` : A new Series with the data from both Series appended\n\n Errors\n\n - `InvalidType` : Raised if the data types of the two Series do not match\n\n Example\n ```\n let series1 = Series::new(\"test\", SeriesInput::Int32([1, 2]))\n let series2 = Series::new(\"test\", SeriesInput::Int32([3, 4]))\n let series = series1.append!(series2)\n inspect!(series.data, content=\"Int([1, 2, 3, 4])\")\n ```",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>::append(self : <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>, other : <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>) -> <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>!<a href=\"smallbearrr/pandas/lib/pandas#InvalidType\">InvalidType</a>",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "series.mbt",
            "line": 1464,
            "column": 16
          }
        },
        {
          "name": "argsort",
          "docstring": " Sort the SeriesData in Series and return the indices of the sorted elements\n\n ### Parameters\n\n - `self` : An instance of the SeriesData\n - `descending~` : A boolean indicating whether to sort in descending order (default is false)\n\n ### Returns\n\n - `Array[Int]` : An array of indices representing the sorted order of the elements\n\n ### Example\n ```\n let series = Series :: { name: \"A\", data: SeriesData::Int([3, 1, 2]) }\n let sorted_indices = series.argsort()\n ```",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>::argsort(self : <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>, descending~ : Bool = ..) -> <a href=\"moonbitlang/core/array#Array\">Array</a>[Int]",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "series.mbt",
            "line": 425,
            "column": 16
          }
        },
        {
          "name": "clear",
          "docstring": " Series clear",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>::clear(self : <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>) -> Unit",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "series.mbt",
            "line": 169,
            "column": 16
          }
        },
        {
          "name": "concat",
          "docstring": " Concatenate multiple Series into one\n\n Parameters\n\n - `data` : An array of Series to concatenate\n\n Returns\n\n - `Series` : A new Series containing the concatenated data from all input Series\n\n Errors\n\n - `EmptyArrayError` : Raised if the input array is empty\n - `InvalidType` : Raised if the data types of the Series do not match\n\n Example\n ```\n let series1 = Series::new(\"test\", SeriesInput::Int32([1, 2]))\n let series2 = Series::new(\"test\", SeriesInput::Int32([3, 4]))\n let series3 = Series::new(\"test\", SeriesInput::Int32([5]))\n let series = Series::concat!([series1, series2, series3])\n inspect!(series.data, content=\"Int([1, 2, 3, 4, 5])\")\n ```",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>::concat(data : <a href=\"moonbitlang/core/array#Array\">Array</a>[<a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>]) -> <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>!<a href=\"moonbitlang/core/error#Error\">Error</a>",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "series.mbt",
            "line": 1531,
            "column": 16
          }
        },
        {
          "name": "copy",
          "docstring": "",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>::copy(self : <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>) -> <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "series.mbt",
            "line": 654,
            "column": 16
          }
        },
        {
          "name": "cos",
          "docstring": " Compute the element-wise value for the cosine.\n\n Example\n ```\n let series = Series::new(\"test\", SeriesInput::Float32([1.0, 1.5, 2.0]))\n let cos = series.cos()\n ```",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>::cos(self : <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>) -> <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>!<a href=\"smallbearrr/pandas/lib/pandas#InvalidType\">InvalidType</a>",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "series_computation.mbt",
            "line": 27,
            "column": 16
          }
        },
        {
          "name": "count",
          "docstring": "",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>::count(self : <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>) -> Int",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "series.mbt",
            "line": 1002,
            "column": 16
          }
        },
        {
          "name": "data",
          "docstring": "",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>::data(self : <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>) -> <a href=\"smallbearrr/pandas/lib/pandas#SeriesData\">SeriesData</a>",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "series.mbt",
            "line": 437,
            "column": 16
          }
        },
        {
          "name": "erase",
          "docstring": " Erase an element from the Series at a specified index\n\n ### Parameters\n\n - `self` : An instance of the Series\n - `index` : The index of the element to be erased\n\n ### Errors\n\n - `IndexOutOfBounds` : index is out of bounds\n - `EmptyArrayError` : Series is empty\n\n ### Example\n ```\n series.erase!(1)\n ```",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>::erase(self : <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>, index : Int) -> Unit!<a href=\"moonbitlang/core/error#Error\">Error</a>",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "series.mbt",
            "line": 224,
            "column": 16
          }
        },
        {
          "name": "extend",
          "docstring": " Extend the current Series with another Series\n\n Parameters\n\n - `self` : An instance of the Series\n - `other` : Another Series to extend the current Series with\n\n Errors\n\n - `InvalidType` : Raised if the data types of the two Series do not match\n\n Example\n ```\n let series1 = Series::new(\"test\", SeriesInput::Int32([1, 2]))\n let series2 = Series::new(\"test\", SeriesInput::Int32([3, 4]))\n series1.extend!(series2)\n inspect!(series1.data, content=\"Int([1, 2, 3, 4])\")\n ```",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>::extend(self : <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>, other : <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>) -> Unit!<a href=\"smallbearrr/pandas/lib/pandas#InvalidType\">InvalidType</a>",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "series.mbt",
            "line": 1499,
            "column": 16
          }
        },
        {
          "name": "get_type",
          "docstring": "",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>::get_type(self : <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>) -> <a href=\"smallbearrr/pandas/lib/pandas#DataType\">DataType</a>",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "series.mbt",
            "line": 691,
            "column": 8
          }
        },
        {
          "name": "has_null",
          "docstring": "",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>::has_null(self : <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>) -> Bool",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "series.mbt",
            "line": 1190,
            "column": 16
          }
        },
        {
          "name": "is_empty",
          "docstring": " Check if the Series is empty.",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>::is_empty(self : <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>) -> Bool",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "series.mbt",
            "line": 1212,
            "column": 16
          }
        },
        {
          "name": "is_not_null",
          "docstring": " Returns a boolean Series indicating which values are not null\n\n Parameters\n\n - `self` : An instance of the Series\n\n Returns\n\n - `Series` : A boolean Series indicating which values are not null\n\n Example\n ```\n let series = Series::new(\"test\", SeriesInput::Int32_Nullable([Some(1), None, Some(2)]))\n inspect!(series.is_not_null().data, content=\"Bool([true, false, true])\")\n ```",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>::is_not_null(self : <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>) -> <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "series.mbt",
            "line": 1260,
            "column": 16
          }
        },
        {
          "name": "is_null",
          "docstring": " Returns a boolean Series indicating which values are null\n\n Parameters\n\n - `self` : An instance of the Series\n\n Returns\n\n - `Series` : A boolean Series indicating which values are null\n\n Example\n ```\n let series = Series::new(\"test\", SeriesInput::Int32_Nullable([Some(1), None, Some(2)]))\n inspect!(series.is_null().data, content=\"Bool([false, true, false])\")\n ```",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>::is_null(self : <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>) -> <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "series.mbt",
            "line": 1231,
            "column": 16
          }
        },
        {
          "name": "is_sorted",
          "docstring": " Check if the Series is sorted\n\n Parameters\n\n - `self` : An instance of the Series\n - `descending` : A boolean indicating whether to check for descending order (default is false)\n - `nulls_last` : A boolean indicating whether null values should be considered last (default is false)\n\n Returns\n\n - `Bool` : True if the Series is sorted, otherwise false\n\n Example\n ```\n let series = Series::new(\"test\", SeriesInput::Int32([1, 2, 3]))\n inspect!(series.is_sorted(), content=\"true\")\n let series = Series::new(\"test\", SeriesInput::Int32([3, 2, 1]))\n inspect!(series.is_sorted(descending=true), content=\"true\")\n let series = Series::new(\"test\", SeriesInput::Int32_Nullable([Some(1), None, Some(3)]))\n inspect!(series.is_sorted(), content=\"false\")\n let series = Series::new(\"test\", SeriesInput::Int32_Nullable([None, Some(1), Some(3)]))\n inspect!(series.is_sorted(), content=\"true\")\n let series = Series::new(\"test\", SeriesInput::Int32_Nullable([Some(3), Some(2), None]))\n inspect!(series.is_sorted(descending=true, nulls_last=true), content=\"true\")\n ```",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>::is_sorted(self : <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>, descending~ : Bool = .., nulls_last~ : Bool = ..) -> Bool",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "series.mbt",
            "line": 1299,
            "column": 16
          }
        },
        {
          "name": "length",
          "docstring": "",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>::length(self : <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>) -> Int",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "series.mbt",
            "line": 154,
            "column": 16
          }
        },
        {
          "name": "log",
          "docstring": " Compute the logarithm to a given base.\n Parameters\n \n - `base` : The base of the logarithm. Default is Euler's number (e).\n \n Example\n ```\n let series = Series::new(\"test\", SeriesInput::Float32([1.0, 1.5, 2.0]))\n let log = series.log()\n let log10 = series.log(base = 10)\n ```",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>::log(self : <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>, base~ : Float = ..) -> <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>!<a href=\"smallbearrr/pandas/lib/pandas#InvalidType\">InvalidType</a>",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "series_computation.mbt",
            "line": 139,
            "column": 16
          }
        },
        {
          "name": "log10",
          "docstring": " Compute the base 10 logarithm of the input array, element-wise.\n \n Example\n ```\n let series = Series::new(\"test\", SeriesInput::Float32([1.0, 1.5, 2.0]))\n let log10 = series.log10()\n ```",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>::log10(self : <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>) -> <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>!<a href=\"smallbearrr/pandas/lib/pandas#InvalidType\">InvalidType</a>",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "series_computation.mbt",
            "line": 173,
            "column": 16
          }
        },
        {
          "name": "lower_bound",
          "docstring": " Return the lower bound of this Series’ dtype as a unit Series.",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>::lower_bound(self : <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>) -> <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "series.mbt",
            "line": 1378,
            "column": 16
          }
        },
        {
          "name": "max",
          "docstring": "\n Returns the maximum value in the Series.\n\n Parameters:\n\n * `self` : The Series to find the maximum value from.\n\n Returns the maximum value in the Series.\n\n Throws:\n\n * `EmptyArrayError` : Raised if the Series is empty\n * `InvalidType` : Raised if the Series contains non-integer values\n\n Example:\n\n ```\n let series = Series::new(\"test\", SeriesInput::Int32([1, 3, 2]))\n inspect!(series.max!(), content=\"Int(3)\")\n ```",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>::max(self : <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>) -> <a href=\"smallbearrr/pandas/lib/pandas#SeriesValue\">SeriesValue</a>!<a href=\"moonbitlang/core/error#Error\">Error</a>",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "series.mbt",
            "line": 720,
            "column": 16
          }
        },
        {
          "name": "mean",
          "docstring": "\n Calculates the arithmetic mean of all elements in the Series.\n\n Parameters:\n\n * `self` : The Series to calculate the mean from.\n\n Returns a floating-point number representing the arithmetic mean of the\n Series.\n\n Throws:\n\n * `EmptyArrayError` : Raised if the Series is empty\n * `InvalidType` : Raised if the Series contains data types that don't support\n mean calculation (e.g., Boolean or String)\n\n Example:\n\n ```moonbit\n let series = Series::new(\"test\", SeriesData::Int([1, 2, 3, 4, 5]))\n series.mean!()\n let float_series = Series::new(\"test\", SeriesData::Float([1.5, 2.5, 3.5]))\n float_series.mean!()\n ```",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>::mean(self : <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>) -> Float!<a href=\"moonbitlang/core/error#Error\">Error</a>",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "series.mbt",
            "line": 902,
            "column": 16
          }
        },
        {
          "name": "merge",
          "docstring": "",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>::merge(self : <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>, other : <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>) -> <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>!<a href=\"smallbearrr/pandas/lib/pandas#InvalidType\">InvalidType</a>",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "series.mbt",
            "line": 620,
            "column": 8
          }
        },
        {
          "name": "min",
          "docstring": "\n Returns the minimum value in the Series\n\n Parameters:\n\n * `self` : The Series to find the minimum value from.\n\n Returns the minimum value in the Series.\n\n Throws:\n\n * `EmptyArrayError` : Raised if the Series is empty\n * `InvalidType` : Raised if the Series contains non-integer values\n\n Example:\n\n ```moonbit\n   let series = Series::new(\"test\", SeriesData::Int([3, 1, 2]))\n   series.arg_min!()\n ```",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>::min(self : <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>) -> <a href=\"smallbearrr/pandas/lib/pandas#SeriesValue\">SeriesValue</a>!<a href=\"moonbitlang/core/error#Error\">Error</a>",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "series.mbt",
            "line": 784,
            "column": 16
          }
        },
        {
          "name": "n_unique",
          "docstring": " Count the number of unique values in this Series\n\n Parameters\n\n - `self` : An instance of the Series\n\n Returns\n\n - `Int` : The number of unique values in the Series\n\n Example\n ```\n let series = Series::new(\"test\", SeriesInput::Int32([1, 2, 3, 1]))\n inspect!(series.n_unique(), content=\"3\")\n let series = Series::new(\"test\", SeriesInput::Int32_Nullable([Some(1), None, Some(3), Some(1)]))\n inspect!(series.n_unique(), content=\"2\")\n ```",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>::n_unique(self : <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>) -> Int",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "series.mbt",
            "line": 1367,
            "column": 16
          }
        },
        {
          "name": "name",
          "docstring": "",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>::name(self : <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>) -> String",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "series.mbt",
            "line": 432,
            "column": 16
          }
        },
        {
          "name": "new",
          "docstring": " Create a new Series\n\n ### Parameters\n\n - `name` : The name of the Series\n - `values` : The data contained in the Series\n\n ### Returns\n\n - `Series` : A new Series instance\n\n ### Example\n ```\n let series = Series::new(\"A\", SeriesInput::Int32([1, 2, 3]))\n ```",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>::new(name : String, values : <a href=\"smallbearrr/pandas/lib/pandas#SeriesInput\">SeriesInput</a>) -> <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "series.mbt",
            "line": 61,
            "column": 16
          }
        },
        {
          "name": "not_",
          "docstring": " Negate all boolean values in the Series\n\n Parameters\n\n - `self` : An instance of the Series\n\n Returns\n\n - `Series` : A new Series with all boolean values negated\n\n Example\n ```moonbit\n let series = Series::new(\"test\", SeriesData::Bool([true, false, true]))\n inspect!(series.not_().data, content=\"Bool([false, true, false])\")\n let series = Series::new(\"test\", SeriesData::Bool([true, false, true]))\n inspect!(series.not_().data, content=\"Bool([false, true, false])\")\n ```",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>::not_(self : <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>) -> <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "series.mbt",
            "line": 1154,
            "column": 16
          }
        },
        {
          "name": "null_count",
          "docstring": " Count the null values in this Series.",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>::null_count(self : <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>) -> Int",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "series.mbt",
            "line": 1343,
            "column": 16
          }
        },
        {
          "name": "op_add",
          "docstring": " Series add",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>::op_add(self : <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>, other : <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>) -> <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "series.mbt",
            "line": 497,
            "column": 16
          }
        },
        {
          "name": "op_div",
          "docstring": " Series div",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>::op_div(self : <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>, other : <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>) -> <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "series.mbt",
            "line": 609,
            "column": 16
          }
        },
        {
          "name": "op_get",
          "docstring": " ",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>::op_get(self : <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>, index : Int) -> <a href=\"smallbearrr/pandas/lib/pandas#SeriesValue\">SeriesValue</a>",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "series.mbt",
            "line": 531,
            "column": 16
          }
        },
        {
          "name": "op_mul",
          "docstring": " Series mul",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>::op_mul(self : <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>, other : <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>) -> <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "series.mbt",
            "line": 575,
            "column": 16
          }
        },
        {
          "name": "op_sub",
          "docstring": " Series sub",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>::op_sub(self : <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>, other : <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>) -> <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "series.mbt",
            "line": 541,
            "column": 16
          }
        },
        {
          "name": "reverse",
          "docstring": "",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>::reverse(self : <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>) -> Unit",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "series.mbt",
            "line": 675,
            "column": 16
          }
        },
        {
          "name": "sin",
          "docstring": " Compute the element-wise value for the sine.\n\n Example\n ```\n let series = Series::new(\"test\", SeriesInput::Float32([1.0, 1.5, 2.0]))\n let sin = series.sin()\n ```",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>::sin(self : <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>) -> <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>!<a href=\"smallbearrr/pandas/lib/pandas#InvalidType\">InvalidType</a>",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "series_computation.mbt",
            "line": 54,
            "column": 16
          }
        },
        {
          "name": "slice",
          "docstring": " Slice the Series from start to end\n\n Parameters\n\n - `self` : An instance of the Series\n - `start` : The starting index of the slice\n - `end` : The ending index of the slice\n\n Returns\n\n - `Series` : A new Series containing the sliced data\n\n Example\n ```\n let series = Series::new(\"test\", SeriesInput::Int32([1, 2, 3, 4, 5]))\n inspect!(series.slice(1, 3).data, content=\"Int([2, 3])\")\n ```",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>::slice(self : <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>, start : Int, end : Int) -> <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "series.mbt",
            "line": 1576,
            "column": 16
          }
        },
        {
          "name": "sort",
          "docstring": " Sort the Series\n\n Parameters\n\n - `self` : An instance of the Series\n\n Example\n ```\n let series = Series::new(\"test\", SeriesInput::Int32([2, 1, 3]))\n series.sort()\n inspect!(series.data, content=\"Int([1, 2, 3])\")\n let series = Series::new(\"test\", SeriesInput::Int32_Nullable([Some(2), None, Some(3)]))\n series.sort()\n inspect!(series.data, content=\"Int([0, 2, 3])\")\n ```",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>::sort(self : <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>) -> Unit",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "series.mbt",
            "line": 317,
            "column": 16
          }
        },
        {
          "name": "sum",
          "docstring": " Calculate the sum of the Series\n\n ### Parameters\n\n - `self` : An instance of the Series\n\n ### Returns\n\n - `SeriesValue` : The sum of the Series\n\n ### Errors\n\n - `InvalidType` : Raised if the Series data type is not supported\n\n ### Example\n ```\n let sum = series.sum()\n ```",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>::sum(self : <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>) -> <a href=\"smallbearrr/pandas/lib/pandas#SeriesValue\">SeriesValue</a>!<a href=\"smallbearrr/pandas/lib/pandas#InvalidType\">InvalidType</a>",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "series.mbt",
            "line": 846,
            "column": 16
          }
        },
        {
          "name": "tan",
          "docstring": " Compute the element-wise value for the tangent.\n\n Example\n ```\n let series = Series::new(\"test\", SeriesInput::Float32([1.0, 1.5, 2.0]))\n let tan = series.tan()\n ```",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>::tan(self : <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>) -> <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>!<a href=\"smallbearrr/pandas/lib/pandas#InvalidType\">InvalidType</a>",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "series_computation.mbt",
            "line": 81,
            "column": 16
          }
        },
        {
          "name": "unique_counts",
          "docstring": " Return a count of the unique values in the order of appearance\n\n Parameters\n\n - `self` : An instance of the Series\n\n Returns\n\n - `Series` : A new Series containing the count of unique values in the order of appearance\n\n Example\n ```\n let series = Series::new(\"test\", SeriesInput::Int32([1, 2, 3, 1, 2]))\n inspect!(series.unique_counts().data, content=\"Int([2, 2, 1])\")\n let series = Series::new(\"test\", SeriesInput::Int32_Nullable([Some(1), None, Some(3), Some(1), Some(3)]))\n inspect!(series.unique_counts().data, content=\"Int([2, 1, 2])\")\n ```",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>::unique_counts(self : <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>) -> <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "series.mbt",
            "line": 1419,
            "column": 16
          }
        },
        {
          "name": "upper_bound",
          "docstring": " Return the upper bound of this Series’ dtype as a unit Series.",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>::upper_bound(self : <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>) -> <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "series.mbt",
            "line": 1390,
            "column": 16
          }
        },
        {
          "name": "var",
          "docstring": "\n Calculates the variance of a Series using ddof (delta degrees of freedom) for\n unbiased estimation.\n\n Parameters:\n\n * `self` : The Series to calculate variance from. Supports numeric types\n (Int, Float) and Bool values.\n * `ddof` : Delta degrees of freedom (default is 1). The divisor used in\n calculations is `n - ddof`, where n is the number of elements.\n\n Returns a floating-point number representing the variance of the Series.\n\n Throws:\n\n * `EmptyArrayError` : If there are not enough observations for the specified\n ddof value\n * `InvalidType` : If the Series contains unsupported data types (e.g.,\n String)\n\n Example:\n\n ```moonbit\n test \"Series::var\" {\n   let series = Series::new(\"test\", SeriesData::Int([1, 2, 3, 4, 5]))\n   series.var!()\n   let bool_series = Series::new(\"test\", SeriesData::Bool([true, false, true]))\n   series.var!()\n }\n ```",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>::var(self : <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>, ddof~ : Int = ..) -> Float!<a href=\"moonbitlang/core/error#Error\">Error</a>",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "series.mbt",
            "line": 970,
            "column": 16
          }
        }
      ],
      "impls": [
        {
          "self": {
            "kind": "constr",
            "constructor": {
              "name": "Series",
              "path": "smallbearrr/pandas/lib/pandas"
            },
            "arguments": []
          },
          "trait": { "name": "Eq", "path": "moonbitlang/core/builtin" },
          "methods": [
            {
              "name": "op_equal",
              "docstring": "automatically derived",
              "signature": "fn op_equal(<a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>, <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>) -> Bool",
              "loc": {
                "path": "smallbearrr/pandas/lib/pandas",
                "file": "series.mbt",
                "line": 16,
                "column": 16
              }
            }
          ]
        },
        {
          "self": {
            "kind": "constr",
            "constructor": {
              "name": "Series",
              "path": "smallbearrr/pandas/lib/pandas"
            },
            "arguments": []
          },
          "trait": { "name": "Hash", "path": "moonbitlang/core/builtin" },
          "methods": [
            {
              "name": "hash_combine",
              "docstring": "",
              "signature": "fn hash_combine(self : <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>, hasher : <a href=\"moonbitlang/core/builtin#Hasher\">Hasher</a>) -> Unit",
              "loc": {
                "path": "smallbearrr/pandas/lib/pandas",
                "file": "series.mbt",
                "line": 41,
                "column": 31
              }
            }
          ]
        },
        {
          "self": {
            "kind": "constr",
            "constructor": {
              "name": "Series",
              "path": "smallbearrr/pandas/lib/pandas"
            },
            "arguments": []
          },
          "trait": { "name": "Show", "path": "moonbitlang/core/builtin" },
          "methods": [
            {
              "name": "output",
              "docstring": "automatically derived",
              "signature": "fn output(<a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>, <a href=\"moonbitlang/core/builtin#Logger\">Logger</a>) -> Unit",
              "loc": {
                "path": "smallbearrr/pandas/lib/pandas",
                "file": "series.mbt",
                "line": 16,
                "column": 10
              }
            }
          ]
        }
      ]
    },
    {
      "name": "SeriesData",
      "docstring": "",
      "signature": "pub(all) enum SeriesData {\n  Int(<a href=\"moonbitlang/core/array#Array\">Array</a>[Int])\n  Float(<a href=\"moonbitlang/core/array#Array\">Array</a>[Float])\n  Bool(<a href=\"moonbitlang/core/array#Array\">Array</a>[Bool])\n  Str(<a href=\"moonbitlang/core/array#Array\">Array</a>[String])\n}",
      "loc": {
        "path": "smallbearrr/pandas/lib/pandas",
        "file": "series.mbt",
        "line": 2,
        "column": 15
      },
      "methods": [
        {
          "name": "get_argsort_indices",
          "docstring": " Get the indices that would sort the SeriesData\n\n Parameters\n\n - `self` : An instance of the SeriesData\n - `descending` : A boolean indicating whether to sort in descending order (default is false)\n\n Returns\n\n - `Array[Int]` : An array of indices representing the sorted order of the elements\n\n Example\n ```\n let data = SeriesData::Int([3, 1, 2])\n let sorted_indices = data.get_argsort_indices()\n inspect!(sorted_indices, content=\"[2, 0, 1]\")\n let sorted_indices_desc = data.get_argsort_indices(descending=true)\n inspect!(sorted_indices_desc, content=\"[0, 2, 1]\")\n ```",
          "signature": "fn <a href=\"smallbearrr/pandas/lib/pandas#SeriesData\">SeriesData</a>::get_argsort_indices(self : <a href=\"smallbearrr/pandas/lib/pandas#SeriesData\">SeriesData</a>, descending~ : Bool = ..) -> <a href=\"moonbitlang/core/array#Array\">Array</a>[Int]",
          "loc": {
            "path": "smallbearrr/pandas/lib/pandas",
            "file": "series.mbt",
            "line": 357,
            "column": 20
          }
        }
      ],
      "impls": [
        {
          "self": {
            "kind": "constr",
            "constructor": {
              "name": "SeriesData",
              "path": "smallbearrr/pandas/lib/pandas"
            },
            "arguments": []
          },
          "trait": { "name": "Eq", "path": "moonbitlang/core/builtin" },
          "methods": [
            {
              "name": "op_equal",
              "docstring": "automatically derived",
              "signature": "fn op_equal(<a href=\"smallbearrr/pandas/lib/pandas#SeriesData\">SeriesData</a>, <a href=\"smallbearrr/pandas/lib/pandas#SeriesData\">SeriesData</a>) -> Bool",
              "loc": {
                "path": "smallbearrr/pandas/lib/pandas",
                "file": "series.mbt",
                "line": 7,
                "column": 16
              }
            }
          ]
        },
        {
          "self": {
            "kind": "constr",
            "constructor": {
              "name": "SeriesData",
              "path": "smallbearrr/pandas/lib/pandas"
            },
            "arguments": []
          },
          "trait": { "name": "Show", "path": "moonbitlang/core/builtin" },
          "methods": [
            {
              "name": "output",
              "docstring": "automatically derived",
              "signature": "fn output(<a href=\"smallbearrr/pandas/lib/pandas#SeriesData\">SeriesData</a>, <a href=\"moonbitlang/core/builtin#Logger\">Logger</a>) -> Unit",
              "loc": {
                "path": "smallbearrr/pandas/lib/pandas",
                "file": "series.mbt",
                "line": 7,
                "column": 10
              }
            }
          ]
        }
      ]
    },
    {
      "name": "SeriesInput",
      "docstring": "",
      "signature": "pub(all) enum SeriesInput {\n  Int32(<a href=\"moonbitlang/core/array#Array\">Array</a>[Int])\n  Float32(<a href=\"moonbitlang/core/array#Array\">Array</a>[Float])\n  Bool(<a href=\"moonbitlang/core/array#Array\">Array</a>[Bool])\n  Str(<a href=\"moonbitlang/core/array#Array\">Array</a>[String])\n  Int32_Nullable(<a href=\"moonbitlang/core/array#Array\">Array</a>[Int?])\n  Float32_Nullable(<a href=\"moonbitlang/core/array#Array\">Array</a>[Float?])\n  Bool_Nullable(<a href=\"moonbitlang/core/array#Array\">Array</a>[Bool?])\n  Str_Nullable(<a href=\"moonbitlang/core/array#Array\">Array</a>[String?])\n}",
      "loc": {
        "path": "smallbearrr/pandas/lib/pandas",
        "file": "data_types.mbt",
        "line": 19,
        "column": 15
      },
      "methods": [],
      "impls": []
    },
    {
      "name": "SeriesValue",
      "docstring": "",
      "signature": "pub(all) enum SeriesValue {\n  Int(Int)\n  Float(Float)\n  Bool(Bool)\n  Str(String)\n  Null\n}",
      "loc": {
        "path": "smallbearrr/pandas/lib/pandas",
        "file": "data_types.mbt",
        "line": 10,
        "column": 15
      },
      "methods": [],
      "impls": [
        {
          "self": {
            "kind": "constr",
            "constructor": {
              "name": "SeriesValue",
              "path": "smallbearrr/pandas/lib/pandas"
            },
            "arguments": []
          },
          "trait": { "name": "Compare", "path": "moonbitlang/core/builtin" },
          "methods": [
            {
              "name": "compare",
              "docstring": "automatically derived",
              "signature": "fn compare(<a href=\"smallbearrr/pandas/lib/pandas#SeriesValue\">SeriesValue</a>, <a href=\"smallbearrr/pandas/lib/pandas#SeriesValue\">SeriesValue</a>) -> Int",
              "loc": {
                "path": "smallbearrr/pandas/lib/pandas",
                "file": "data_types.mbt",
                "line": 16,
                "column": 20
              }
            }
          ]
        },
        {
          "self": {
            "kind": "constr",
            "constructor": {
              "name": "SeriesValue",
              "path": "smallbearrr/pandas/lib/pandas"
            },
            "arguments": []
          },
          "trait": { "name": "Eq", "path": "moonbitlang/core/builtin" },
          "methods": [
            {
              "name": "op_equal",
              "docstring": "automatically derived",
              "signature": "fn op_equal(<a href=\"smallbearrr/pandas/lib/pandas#SeriesValue\">SeriesValue</a>, <a href=\"smallbearrr/pandas/lib/pandas#SeriesValue\">SeriesValue</a>) -> Bool",
              "loc": {
                "path": "smallbearrr/pandas/lib/pandas",
                "file": "data_types.mbt",
                "line": 16,
                "column": 16
              }
            }
          ]
        },
        {
          "self": {
            "kind": "constr",
            "constructor": {
              "name": "SeriesValue",
              "path": "smallbearrr/pandas/lib/pandas"
            },
            "arguments": []
          },
          "trait": { "name": "Hash", "path": "moonbitlang/core/builtin" },
          "methods": [
            {
              "name": "hash_combine",
              "docstring": "automatically derived",
              "signature": "fn hash_combine(<a href=\"smallbearrr/pandas/lib/pandas#SeriesValue\">SeriesValue</a>, <a href=\"moonbitlang/core/builtin#Hasher\">Hasher</a>) -> Unit",
              "loc": {
                "path": "smallbearrr/pandas/lib/pandas",
                "file": "data_types.mbt",
                "line": 16,
                "column": 29
              }
            }
          ]
        },
        {
          "self": {
            "kind": "constr",
            "constructor": {
              "name": "SeriesValue",
              "path": "smallbearrr/pandas/lib/pandas"
            },
            "arguments": []
          },
          "trait": { "name": "Show", "path": "moonbitlang/core/builtin" },
          "methods": [
            {
              "name": "output",
              "docstring": "automatically derived",
              "signature": "fn output(<a href=\"smallbearrr/pandas/lib/pandas#SeriesValue\">SeriesValue</a>, <a href=\"moonbitlang/core/builtin#Logger\">Logger</a>) -> Unit",
              "loc": {
                "path": "smallbearrr/pandas/lib/pandas",
                "file": "data_types.mbt",
                "line": 16,
                "column": 10
              }
            }
          ]
        }
      ]
    }
  ],
  "typealias": [],
  "values": [
    {
      "name": "get_type",
      "docstring": "",
      "signature": "fn get_type(self : <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>) -> <a href=\"smallbearrr/pandas/lib/pandas#DataType\">DataType</a>",
      "loc": {
        "path": "smallbearrr/pandas/lib/pandas",
        "file": "series.mbt",
        "line": 691,
        "column": 8
      }
    },
    {
      "name": "hstack",
      "docstring": " Horizontally stack two DataFrames\n\n ### Parameters\n\n - `self` : An instance of the DataFrame\n - `other` : Another DataFrame to be stacked horizontally\n\n ### Return\n\n - `DataFrame` : A new DataFrame resulting from the horizontal stacking of the two DataFrames\n\n ### Example\n ```\n let df1 = DataFrame::new!([\n   Series::new(\"A\", SeriesData::Int([1, 2, 3]))\n ])\n let df2 = DataFrame::new!([\n   Series::new(\"B\", SeriesData::Int([4, 5, 6]))\n ])\n let df_stacked = df1.hstack!(df2)\n ```",
      "signature": "fn hstack(self : <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>, other : <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>) -> <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>!<a href=\"moonbitlang/core/error#Error\">Error</a>",
      "loc": {
        "path": "smallbearrr/pandas/lib/pandas",
        "file": "data_frame.mbt",
        "line": 757,
        "column": 8
      }
    },
    {
      "name": "limit",
      "docstring": "\n Creates a new DataFrame containing only the first N rows of the original\n DataFrame. If N is larger than the number of rows in the DataFrame, returns a\n DataFrame with all rows from the original DataFrame.\n\n ### Parameters:\n\n - `self` : The DataFrame to limit.\n - `n` : The maximum number of rows to include in the new DataFrame.\n\n ### Return:\n \n Return a new DataFrame containing at most N rows from the original\n DataFrame.\n\n Throws an error of type `Error` if creating the new DataFrame fails.\n\n ### Example:\n\n ```moonbit\n let df = DataFrame::new!([\n   Series::new(\"A\", SeriesData::Int([1, 2, 3, 4, 5])),\n   Series::new(\"B\", SeriesData::Float([1.1, 2.2, 3.3, 4.4, 5.5])),\n ])\n let limited = df.limit!(3)\n ```",
      "signature": "fn limit(self : <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>, n : Int) -> <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>!<a href=\"moonbitlang/core/error#Error\">Error</a>",
      "loc": {
        "path": "smallbearrr/pandas/lib/pandas",
        "file": "data_frame.mbt",
        "line": 900,
        "column": 8
      }
    },
    {
      "name": "merge",
      "docstring": "",
      "signature": "fn merge(self : <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>, other : <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>) -> <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>!<a href=\"smallbearrr/pandas/lib/pandas#InvalidType\">InvalidType</a>",
      "loc": {
        "path": "smallbearrr/pandas/lib/pandas",
        "file": "series.mbt",
        "line": 620,
        "column": 8
      }
    },
    {
      "name": "op_get",
      "docstring": "",
      "signature": "fn op_get(self : <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>, index : Int) -> <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>",
      "loc": {
        "path": "smallbearrr/pandas/lib/pandas",
        "file": "data_frame.mbt",
        "line": 545,
        "column": 8
      }
    },
    {
      "name": "tail",
      "docstring": "\n Creates a new DataFrame containing only the last N rows of the original\n DataFrame. If N is larger than the number of rows in the DataFrame, returns a\n DataFrame with all rows from the original DataFrame.\n\n ### Parameters:\n\n - `self` : The DataFrame to extract rows from.\n - `n` : The number of rows to include from the end of the DataFrame.\n\n ### Return:\n \n Returns a new DataFrame containing at most N rows from the end of the\n original DataFrame.\n\n Throws an error of type `Error` if creating the new DataFrame fails.\n\n ### Example:\n\n ```moonbit\n let df = DataFrame::new!([\n   Series::new(\"A\", SeriesData::Int([1, 2, 3, 4, 5])),\n   Series::new(\"B\", SeriesData::Float([1.1, 2.2, 3.3, 4.4, 5.5])),\n ])\n let last_three = df.tail!(3)\n ```",
      "signature": "fn tail(self : <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>, n : Int) -> <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>!<a href=\"moonbitlang/core/error#Error\">Error</a>",
      "loc": {
        "path": "smallbearrr/pandas/lib/pandas",
        "file": "data_frame.mbt",
        "line": 941,
        "column": 8
      }
    },
    {
      "name": "to_series",
      "docstring": "\n Converts a column of the DataFrame to a Series by its index.\n\n Parameters:\n\n * `self` : The DataFrame from which to extract the Series.\n * `column_index` : The zero-based index of the column to convert to a Series.\n\n Returns the Series at the specified column index.\n\n Example:\n\n ```moonbit\n let df = DataFrame::new!([\n   Series::new(\"A\", SeriesData::Int([1, 2, 3])),\n   Series::new(\"B\", SeriesData::Float([1.5, 2.0, 2.5])),\n ])\n df.to_series(0)\n ```",
      "signature": "fn to_series(self : <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>, index : Int) -> <a href=\"smallbearrr/pandas/lib/pandas#Series\">Series</a>",
      "loc": {
        "path": "smallbearrr/pandas/lib/pandas",
        "file": "data_frame.mbt",
        "line": 1031,
        "column": 8
      }
    },
    {
      "name": "unique",
      "docstring": "\n Removes duplicate rows from the DataFrame based on specified columns, with\n control over which duplicates to keep.\n\n Parameters:\n\n * `df` : The DataFrame to remove duplicates from.\n * `columns` : An array of column names to consider when identifying\n duplicates. Rows are considered duplicates if they have the same values in\n all specified columns.\n * `keep~` : A string specifying which duplicates to retain. Valid values are:\n  * \"first\": Keep the first occurrence of each duplicate\n  * \"last\": Keep the last occurrence of each duplicate\n  * \"any\": Keep any occurrence of each duplicate (defaults to first)\n  * \"none\": Keep only rows that have no duplicates\n\n Returns a new DataFrame with duplicates removed according to the specified\n criteria.\n\n Throws:\n\n * `InvalidType` : If an invalid value is provided for the `keep` parameter\n * `ColumnNotFoundError` : If any of the specified columns do not exist in the\n DataFrame\n\n Example:\n\n ```moonbit\n let df = DataFrame::new!([\n   Series::new(\"A\", SeriesData::Int([1, 1, 2, 2])),\n   Series::new(\"B\", SeriesData::Int([1, 1, 2, 3])),\n ])\n let unique_df = df.unique!([\"A\"], keep=\"first\")\n ```",
      "signature": "fn unique(self : <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>, subset : <a href=\"moonbitlang/core/array#Array\">Array</a>[String], keep~ : String = ..) -> <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>!<a href=\"moonbitlang/core/error#Error\">Error</a>",
      "loc": {
        "path": "smallbearrr/pandas/lib/pandas",
        "file": "data_frame.mbt",
        "line": 1069,
        "column": 8
      }
    },
    {
      "name": "vstack",
      "docstring": " Vertically stack two DataFrames\n\n ### Parameters\n\n - `self` : An instance of the DataFrame\n - `other` : Another DataFrame to be stacked vertically\n\n ### Return\n\n - `DataFrame` : A new DataFrame resulting from the vertical stacking of the two DataFrames\n\n ### Errors\n\n - `InconsistentSeriesLength` : Raised if the number of columns in the two DataFrames is not the same\n - `InvalidType` : Raised if the data types of the corresponding columns in the two DataFrames are not the same\n\n ### Example\n ```\n let df1 = DataFrame::new!([\n   Series::new(\"A\", SeriesData::Int([1, 2, 3]))\n ])\n let df2 = DataFrame::new!([\n   Series::new(\"A\", SeriesData::Int([4, 5, 6]))\n ])\n let df_stacked = df1.vstack!(df2)\n ```",
      "signature": "fn vstack(self : <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>, other : <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>) -> <a href=\"smallbearrr/pandas/lib/pandas#DataFrame\">DataFrame</a>!<a href=\"moonbitlang/core/error#Error\">Error</a>",
      "loc": {
        "path": "smallbearrr/pandas/lib/pandas",
        "file": "data_frame.mbt",
        "line": 699,
        "column": 8
      }
    }
  ],
  "misc": []
}