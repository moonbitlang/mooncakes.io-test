{
  "kind": "package",
  "relative_path": "int64",
  "module_path": "moonbitlang/core",
  "readme_content": "# `int64`\n\nThis package provides operations for working with 64-bit signed integers (`Int64`) in MoonBit.\n\n## Basic Operations\n\n`Int64` values can be created from regular 32-bit integers using `from_int`. The package also provides constants for the maximum and minimum values representable by `Int64`.\n\n```moonbit\ntest \"basic operations\" {\n  let i : Int64 = -12345L // Int64 literal\n  // You can also convert from an `Int` like so:\n  inspect!(@int64.from_int(-12345) == i, content=\"true\")\n\n  // Max and min values\n  inspect!(@int64.max_value, content=\"9223372036854775807\")\n  inspect!(@int64.min_value, content=\"-9223372036854775808\")\n\n  // Absolute value\n  inspect!(@int64.abs(i), content=\"12345\")\n}\n```\n\n## Binary Representation\n\nThe package provides functions to convert `Int64` values to their binary representation in both big-endian and little-endian byte order:\n\n```moonbit\ntest \"binary conversion\" {\n  let x = 258L // Int64 value of 258\n  let be_bytes = @int64.to_be_bytes(x)\n  let le_bytes = @int64.to_le_bytes(x)\n\n  // Convert to String for inspection\n  inspect!(\n    be_bytes.to_string(),\n    content=\n      #|b\"\\x00\\x00\\x00\\x00\\x00\\x00\\x01\\x02\"\n    ,\n  )\n  inspect!(\n    le_bytes.to_string(),\n    content=\n      #|b\"\\x02\\x01\\x00\\x00\\x00\\x00\\x00\\x00\"\n    ,\n  )\n\n  // We can verify they represent the same number but in different byte orders\n  let len = be_bytes.length()\n  inspect!(len, content=\"8\")\n}\n```\n\n## Method-Style Usage\n\nAll operations are also available as methods on `Int64` values:\n\n```moonbit\ntest \"method style\" {\n  let x = -42L\n\n  // Using method syntax for absolute value\n  inspect!(x.abs(), content=\"42\")\n\n  // Binary conversions as methods\n  inspect!(\n    x.to_be_bytes(),\n    content=\n      #|b\"\\xff\\xff\\xff\\xff\\xff\\xff\\xff\\xd6\"\n    ,\n  )\n}\n```\n\nNote that `Int64` implements the `Hash` trait, allowing it to be used as keys in hash maps and members of hash sets.\n",
  "package_data": "moonbitlang/core/int64/package_data.json",
  "source_files": [ "int64.mbt", "xxhash.mbt" ]
}