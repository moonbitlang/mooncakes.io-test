{
  "kind": "package",
  "relative_path": "byte",
  "module_path": "moonbitlang/core",
  "readme_content": "---\nmoonbit: true\n---\n\n# `byte`\n\nA package for working with bytes (8-bit unsigned integers) in MoonBit.\n\n## Constants\n\nThe package provides constants for the minimum and maximum values of a byte:\n\n```moonbit\ntest \"byte constants\" {\n  inspect!(@byte.min_value, content=\"b'\\\\x00'\")\n  inspect!(@byte.max_value, content=\"b'\\\\xFF'\")\n}\n```\n\n## Conversion\n\nBytes can be converted to other numeric types. The package provides conversion to `UInt64`:\n\n```moonbit\ntest \"byte conversion\" {\n  let byte = b'A'\n  inspect!(byte.to_uint64(), content=\"65\")\n  let byte = b' '\n  inspect!(@byte.to_uint64(byte), content=\"32\")\n}\n```\n\n## Byte Literals\n\nAlthough not directly part of this package, MoonBit provides byte literals with the `b` prefix:\n\n```moonbit\ntest \"byte literals\" {\n  // ASCII character\n  let a = b'a'\n  inspect!(a.to_uint64(), content=\"97\")\n\n  // Hexadecimal escape sequence\n  let hex = b'\\x41'\n  inspect!(hex.to_uint64(), content=\"65\")\n\n  // Null byte\n  let null = b'\\x00'\n  inspect!(null.to_uint64(), content=\"0\")\n\n  // Maximum value\n  let max = b'\\xff'\n  inspect!(max.to_uint64(), content=\"255\")\n}\n```\n\nNote: The same conversion method can be called either as a method (`b.to_uint64()`) or as a package function (`@byte.to_uint64(b)`).\n",
  "package_data": "moonbitlang/core/byte/package_data.json",
  "source_files": [ "byte.mbt" ]
}