{
  "name": "moonbitlang/core/deque",
  "traits": [],
  "types": [
    {
      "name": "T",
      "docstring": "",
      "signature": "type T[A]",
      "loc": {
        "path": "moonbitlang/core/deque",
        "file": "types.mbt",
        "line": 17,
        "column": 8
      },
      "methods": [
        {
          "name": "as_views",
          "docstring": "\n Returns two array views that together represent all elements in the deque in\n their correct order. The first view contains elements from the head to the\n end of the internal buffer, and the second view contains any remaining\n elements from the start of the buffer.\n\n If the deque is empty, returns a pair of empty views. If all elements are\n contiguous in memory, the second view will be empty.\n\n Parameters:\n\n * `self` : The deque to be viewed.\n\n Returns a tuple of two array views that together contain all elements of the\n deque in order.\n\n Example:\n\n ```moonbit\n test \"T::as_views\" {\n   let dq = @deque.of([1, 2, 3, 4, 5])\n   let (v1, v2) = dq.as_views()\n   inspect!(v1.length(), content=\"5\")\n   inspect!(v2.length(), content=\"0\")\n }\n ```",
          "signature": "fn <a href=\"moonbitlang/core/deque#T\">T</a>::as_views[A](self : <a href=\"moonbitlang/core/deque#T\">T</a>[A]) -> (<a href=\"moonbitlang/core/array#ArrayView\">ArrayView</a>[A], <a href=\"moonbitlang/core/array#ArrayView\">ArrayView</a>[A])",
          "loc": {
            "path": "moonbitlang/core/deque",
            "file": "deque.mbt",
            "line": 554,
            "column": 11
          }
        },
        {
          "name": "back",
          "docstring": "\n Return the back element from a deque, or `None` if it is empty.\n\n # Example\n ```\n let dv = @deque.of([1, 2, 3, 4, 5])\n assert_eq!(dv.back(), Some(5))\n ```",
          "signature": "fn <a href=\"moonbitlang/core/deque#T\">T</a>::back[A](self : <a href=\"moonbitlang/core/deque#T\">T</a>[A]) -> A?",
          "loc": {
            "path": "moonbitlang/core/deque",
            "file": "deque.mbt",
            "line": 251,
            "column": 8
          }
        },
        {
          "name": "capacity",
          "docstring": "\n Returns the total number of elements the deque can hold in its internal\n buffer before requiring reallocation.\n\n Parameters:\n\n * `deque` : The deque whose capacity is being queried.\n\n Returns the current capacity of the deque's internal buffer.\n\n Example:\n\n ```moonbit\n test \"capacity\" {\n   let dq = @deque.new(capacity=10)\n   dq.push_back(1)\n   dq.push_back(2)\n   inspect!(dq.capacity(), content=\"10\")\n }\n ```",
          "signature": "fn <a href=\"moonbitlang/core/deque#T\">T</a>::capacity[A](self : <a href=\"moonbitlang/core/deque#T\">T</a>[A]) -> Int",
          "loc": {
            "path": "moonbitlang/core/deque",
            "file": "deque.mbt",
            "line": 193,
            "column": 8
          }
        },
        {
          "name": "clear",
          "docstring": "\n Clears the deque, removing all values.\n\n This method has no effect on the allocated capacity of the deque, only setting the length to 0.\n\n # Example\n ```\n let dv = @deque.of([1, 2, 3, 4, 5])\n dv.clear()\n assert_eq!(dv.length(), 0)\n ```",
          "signature": "fn <a href=\"moonbitlang/core/deque#T\">T</a>::clear[A](self : <a href=\"moonbitlang/core/deque#T\">T</a>[A]) -> Unit",
          "loc": {
            "path": "moonbitlang/core/deque",
            "file": "deque.mbt",
            "line": 675,
            "column": 8
          }
        },
        {
          "name": "contains",
          "docstring": "\n Tests whether a deque contains a specific element.\n\n Parameters:\n\n * `self` : The deque to search in.\n * `value` : The element to search for.\n\n Returns `true` if the deque contains the specified element, `false`\n otherwise.\n\n Example:\n\n ```moonbit\n test \"T::contains\" {\n   let dq = @deque.of([1, 2, 3, 4, 5])\n   inspect!(dq.contains(3), content=\"true\")\n   inspect!(dq.contains(6), content=\"false\")\n }\n ```",
          "signature": "fn <a href=\"moonbitlang/core/deque#T\">T</a>::contains[A : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : <a href=\"moonbitlang/core/deque#T\">T</a>[A], value : A) -> Bool",
          "loc": {
            "path": "moonbitlang/core/deque",
            "file": "deque.mbt",
            "line": 801,
            "column": 8
          }
        },
        {
          "name": "copy",
          "docstring": "\n Creates a new deque with the same elements as the original deque. The new\n deque will have a capacity equal to its length, and its elements will be\n stored contiguously starting from index 0.\n\n Parameters:\n\n * `self` : The deque to be copied.\n\n Returns a new deque containing all elements from the original deque in the\n same order.\n\n Example:\n\n ```moonbit\n test \"T::copy\" {\n   let dq = @deque.of([1, 2, 3, 4, 5])\n   let copied = dq.copy()\n   inspect!(copied, content=\"@deque.of([1, 2, 3, 4, 5])\")\n }\n ```",
          "signature": "fn <a href=\"moonbitlang/core/deque#T\">T</a>::copy[A](self : <a href=\"moonbitlang/core/deque#T\">T</a>[A]) -> <a href=\"moonbitlang/core/deque#T\">T</a>[A]",
          "loc": {
            "path": "moonbitlang/core/deque",
            "file": "deque.mbt",
            "line": 106,
            "column": 8
          }
        },
        {
          "name": "each",
          "docstring": "\n Iterates over the elements of the deque.\n\n # Example\n ```\n let dv = @deque.of([1, 2, 3, 4, 5])\n let mut sum = 0\n dv.each(fn (x) {sum = sum + x})\n assert_eq!(sum, 15)\n ```",
          "signature": "fn <a href=\"moonbitlang/core/deque#T\">T</a>::each[A](self : <a href=\"moonbitlang/core/deque#T\">T</a>[A], f : (A) -> Unit) -> Unit",
          "loc": {
            "path": "moonbitlang/core/deque",
            "file": "deque.mbt",
            "line": 610,
            "column": 8
          }
        },
        {
          "name": "eachi",
          "docstring": "\n Iterates over the elements of the deque with index.\n\n # Example\n ```\n let dv = @deque.of([1, 2, 3, 4, 5])\n let mut idx_sum = 0\n dv.eachi(fn (i, _x) {idx_sum = idx_sum + i})\n assert_eq!(idx_sum, 10)\n ```",
          "signature": "fn <a href=\"moonbitlang/core/deque#T\">T</a>::eachi[A](self : <a href=\"moonbitlang/core/deque#T\">T</a>[A], f : (Int, A) -> Unit) -> Unit",
          "loc": {
            "path": "moonbitlang/core/deque",
            "file": "deque.mbt",
            "line": 626,
            "column": 8
          }
        },
        {
          "name": "filter_map_inplace",
          "docstring": "\n Filters and maps elements in-place using a provided function. Modifies the\n deque to retain only elements for which the provided function returns `Some`,\n and updates those elements with the values inside the `Some` variant.\n",
          "signature": "fn <a href=\"moonbitlang/core/deque#T\">T</a>::filter_map_inplace[A](self : <a href=\"moonbitlang/core/deque#T\">T</a>[A], f : (A) -> A?) -> Unit",
          "loc": {
            "path": "moonbitlang/core/deque",
            "file": "deque.mbt",
            "line": 974,
            "column": 8
          }
        },
        {
          "name": "front",
          "docstring": "\n Return the front element from a deque, or `None` if it is empty.\n\n # Example\n ```\n let dv = @deque.of([1, 2, 3, 4, 5])\n assert_eq!(dv.front(), Some(1))\n ```",
          "signature": "fn <a href=\"moonbitlang/core/deque#T\">T</a>::front[A](self : <a href=\"moonbitlang/core/deque#T\">T</a>[A]) -> A?",
          "loc": {
            "path": "moonbitlang/core/deque",
            "file": "deque.mbt",
            "line": 235,
            "column": 8
          }
        },
        {
          "name": "is_empty",
          "docstring": "\n Test if the deque is empty.\n\n # Example\n ```\n let dv = @deque.new()\n assert_eq!(dv.is_empty(), true)\n dv.push_back(1)\n assert_eq!(dv.is_empty(), false)\n ```",
          "signature": "fn <a href=\"moonbitlang/core/deque#T\">T</a>::is_empty[A](self : <a href=\"moonbitlang/core/deque#T\">T</a>[A]) -> Bool",
          "loc": {
            "path": "moonbitlang/core/deque",
            "file": "deque.mbt",
            "line": 748,
            "column": 8
          }
        },
        {
          "name": "iter",
          "docstring": "\n Creates an iterator over the elements of the deque, allowing sequential\n access to its elements in order from front to back.\n\n Parameters:\n\n * `deque` : The deque to iterate over.\n\n Returns an iterator that yields each element in the deque in order.\n\n Example:\n\n ```moonbit\n test \"T::iter\" {\n   let dq = @deque.of([1, 2, 3, 4, 5])\n   let mut sum = 0\n   dq.iter().each(fn(x) { sum = sum + x })\n   inspect!(sum, content=\"15\")\n }\n ```",
          "signature": "fn <a href=\"moonbitlang/core/deque#T\">T</a>::iter[A](self : <a href=\"moonbitlang/core/deque#T\">T</a>[A]) -> <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[A]",
          "loc": {
            "path": "moonbitlang/core/deque",
            "file": "deque.mbt",
            "line": 1051,
            "column": 8
          }
        },
        {
          "name": "iter2",
          "docstring": "\n Returns an iterator that yields pairs of indices and elements from the deque\n in order, starting from the front.\n\n Parameters:\n\n * `self` : The deque to iterate over.\n\n Returns an iterator of type `Iter2[Int, A]` that produces tuples of `(index,\n element)`, where `index` starts from 0 and increments by 1 for each element,\n and `element` is the corresponding element from the deque.\n\n Example:\n\n ```moonbit\n test \"iter2\" {\n   let dq = @deque.of([10, 20, 30])\n   let mut sum = 0\n   dq.iter2().each(fn(i, x) { sum = sum + i * x })\n   inspect!(sum, content=\"80\") // 0*10 + 1*20 + 2*30 = 80\n }\n ```",
          "signature": "fn <a href=\"moonbitlang/core/deque#T\">T</a>::iter2[A](self : <a href=\"moonbitlang/core/deque#T\">T</a>[A]) -> <a href=\"moonbitlang/core/builtin#Iter2\">Iter2</a>[Int, A]",
          "loc": {
            "path": "moonbitlang/core/deque",
            "file": "deque.mbt",
            "line": 1098,
            "column": 8
          }
        },
        {
          "name": "length",
          "docstring": "\n Returns the number of elements in the deque.\n\n Parameters:\n\n * `deque` : The deque to get the length of.\n\n Returns the current number of elements in the deque.\n\n Example:\n\n ```moonbit\n test \"length\" {\n   let dq = @deque.of([1, 2, 3])\n   inspect!(dq.length(), content=\"3\")\n   dq.push_back(4)\n   inspect!(dq.length(), content=\"4\")\n }\n ```",
          "signature": "fn <a href=\"moonbitlang/core/deque#T\">T</a>::length[A](self : <a href=\"moonbitlang/core/deque#T\">T</a>[A]) -> Int",
          "loc": {
            "path": "moonbitlang/core/deque",
            "file": "deque.mbt",
            "line": 169,
            "column": 8
          }
        },
        {
          "name": "map",
          "docstring": "\n Maps a function over the elements of the deque.\n\n # Example\n ```\n let dv = @deque.of([3, 4, 5])\n let dv2 = dv.map(fn (x) {x + 1})\n assert_eq!(dv2, @deque.of([4, 5, 6]))\n ```",
          "signature": "fn <a href=\"moonbitlang/core/deque#T\">T</a>::map[A, U](self : <a href=\"moonbitlang/core/deque#T\">T</a>[A], f : (A) -> U) -> <a href=\"moonbitlang/core/deque#T\">T</a>[U]",
          "loc": {
            "path": "moonbitlang/core/deque",
            "file": "deque.mbt",
            "line": 705,
            "column": 8
          }
        },
        {
          "name": "mapi",
          "docstring": "\n Maps a function over the elements of the deque with index.\n\n # Example\n ```\n let dv = @deque.of([3, 4, 5])\n let dv2 = dv.mapi(fn (i, x) {x + i}) // @deque.of([3, 5, 7])\n assert_eq!(dv2, @deque.of([3, 5, 7]))\n ```",
          "signature": "fn <a href=\"moonbitlang/core/deque#T\">T</a>::mapi[A, U](self : <a href=\"moonbitlang/core/deque#T\">T</a>[A], f : (Int, A) -> U) -> <a href=\"moonbitlang/core/deque#T\">T</a>[U]",
          "loc": {
            "path": "moonbitlang/core/deque",
            "file": "deque.mbt",
            "line": 726,
            "column": 8
          }
        },
        {
          "name": "op_get",
          "docstring": "\n Retrieves the element at the specified index from the deque.\n\n If you try to access an index which isn’t in the Deque, it will panic.\n\n # Example\n ```\n let dv = @deque.of([1, 2, 3, 4, 5])\n assert_eq!(dv[2], 3)\n ```\n @alert unsafe \"Panic if the index is out of bounds.\"",
          "signature": "fn <a href=\"moonbitlang/core/deque#T\">T</a>::op_get[A](self : <a href=\"moonbitlang/core/deque#T\">T</a>[A], index : Int) -> A",
          "loc": {
            "path": "moonbitlang/core/deque",
            "file": "deque.mbt",
            "line": 488,
            "column": 8
          }
        },
        {
          "name": "op_set",
          "docstring": "\n Sets the value of the element at the specified index.\n\n If you try to access an index which isn’t in the Deque, it will panic.\n\n # Example\n ```\n let dv = @deque.of([1, 2, 3, 4, 5])\n dv[2] = 1\n assert_eq!(dv[2], 1)\n ```\n @alert unsafe \"Panic if the index is out of bounds.\"",
          "signature": "fn <a href=\"moonbitlang/core/deque#T\">T</a>::op_set[A](self : <a href=\"moonbitlang/core/deque#T\">T</a>[A], index : Int, value : A) -> Unit",
          "loc": {
            "path": "moonbitlang/core/deque",
            "file": "deque.mbt",
            "line": 514,
            "column": 8
          }
        },
        {
          "name": "pop_back",
          "docstring": "\n Removes a back element from a deque and returns it, or `None` if it is empty.\n\n # Example\n ```\n let dv = @deque.of([1, 2, 3, 4, 5])\n assert_eq!(dv.pop_back(), Some(5))\n ```",
          "signature": "fn <a href=\"moonbitlang/core/deque#T\">T</a>::pop_back[A](self : <a href=\"moonbitlang/core/deque#T\">T</a>[A]) -> A?",
          "loc": {
            "path": "moonbitlang/core/deque",
            "file": "deque.mbt",
            "line": 454,
            "column": 8
          }
        },
        {
          "name": "pop_back_exn",
          "docstring": "\n Removes and discards the last element from a deque.\n\n Parameters:\n\n * `deque` : The deque to remove the last element from.\n\n Throws a runtime error if the deque is empty.\n\n Example:\n\n ```moonbit\n test \"pop_back_exn\" {\n   let dq = @deque.of([1, 2, 3])\n   // Deprecated way:\n   // dq.pop_back_exn()\n   // Recommended way:\n   dq.unsafe_pop_back()\n   inspect!(dq, content=\"@deque.of([1, 2])\")\n }\n ```\n",
          "signature": "fn <a href=\"moonbitlang/core/deque#T\">T</a>::pop_back_exn[A](self : <a href=\"moonbitlang/core/deque#T\">T</a>[A]) -> Unit",
          "loc": {
            "path": "moonbitlang/core/deque",
            "file": "deque.mbt",
            "line": 411,
            "column": 8
          }
        },
        {
          "name": "pop_front",
          "docstring": "\n Removes a front element from a deque and returns it, or `None` if it is empty.\n\n # Example\n ```\n let dv = @deque.of([1, 2, 3, 4, 5])\n assert_eq!(dv.pop_front(), Some(1))\n ```",
          "signature": "fn <a href=\"moonbitlang/core/deque#T\">T</a>::pop_front[A](self : <a href=\"moonbitlang/core/deque#T\">T</a>[A]) -> A?",
          "loc": {
            "path": "moonbitlang/core/deque",
            "file": "deque.mbt",
            "line": 423,
            "column": 8
          }
        },
        {
          "name": "pop_front_exn",
          "docstring": "\n Removes and discards the first element from the deque. This function is a\n deprecated version of `unsafe_pop_front`.\n\n Parameters:\n\n * `self` : The deque to remove the first element from.\n\n Throws a runtime error if the deque is empty.\n\n Example:\n\n ```moonbit\n test \"pop_front_exn\" {\n   let dq = @deque.of([1, 2, 3])\n   dq.unsafe_pop_front()\n   inspect!(dq, content=\"@deque.of([2, 3])\")\n }\n ```\n",
          "signature": "fn <a href=\"moonbitlang/core/deque#T\">T</a>::pop_front_exn[A](self : <a href=\"moonbitlang/core/deque#T\">T</a>[A]) -> Unit",
          "loc": {
            "path": "moonbitlang/core/deque",
            "file": "deque.mbt",
            "line": 354,
            "column": 8
          }
        },
        {
          "name": "push_back",
          "docstring": "\n Adds an element to the back of the deque.\n\n If the deque is at capacity, it will be reallocated.\n\n # Example\n ```\n let dv = @deque.of([1, 2, 3, 4, 5])\n dv.push_back(6)\n assert_eq!(dv.back(), Some(6))\n ```",
          "signature": "fn <a href=\"moonbitlang/core/deque#T\">T</a>::push_back[A](self : <a href=\"moonbitlang/core/deque#T\">T</a>[A], value : A) -> Unit",
          "loc": {
            "path": "moonbitlang/core/deque",
            "file": "deque.mbt",
            "line": 292,
            "column": 8
          }
        },
        {
          "name": "push_front",
          "docstring": "\n Adds an element to the front of the deque.\n\n If the deque is at capacity, it will be reallocated.\n\n # Example\n ```\n let dv = @deque.of([1, 2, 3, 4, 5])\n dv.push_front(0)\n assert_eq!(dv.front(), Some(0))\n ```",
          "signature": "fn <a href=\"moonbitlang/core/deque#T\">T</a>::push_front[A](self : <a href=\"moonbitlang/core/deque#T\">T</a>[A], value : A) -> Unit",
          "loc": {
            "path": "moonbitlang/core/deque",
            "file": "deque.mbt",
            "line": 270,
            "column": 8
          }
        },
        {
          "name": "reserve_capacity",
          "docstring": "\n Reserves capacity to ensure that it can hold at least the number of elements\n specified by the `capacity` argument.\n\n # Example\n\n ```\n let dv = @deque.of([1])\n dv.reserve_capacity(10)\n assert_eq!(dv.capacity(), 10)\n ```",
          "signature": "fn <a href=\"moonbitlang/core/deque#T\">T</a>::reserve_capacity[A](self : <a href=\"moonbitlang/core/deque#T\">T</a>[A], capacity : Int) -> Unit",
          "loc": {
            "path": "moonbitlang/core/deque",
            "file": "deque.mbt",
            "line": 816,
            "column": 8
          }
        },
        {
          "name": "retain",
          "docstring": "\n Filters elements in-place by retaining only the elements that satisfy the\n given predicate. Modifies the deque to keep only the elements for which the\n predicate function returns `true`.\n\n Parameters:\n\n * `self` : The deque to be filtered.\n * `predicate` : A function that takes an element and returns `true` if the\n element should be kept, `false` if it should be removed.\n\n Example:\n\n ```moonbit\n test \"retain\" {\n   let dq = @deque.of([1, 2, 3, 4, 5])\n   dq.retain(fn(x) { x % 2 == 0 })\n   inspect!(dq, content=\"@deque.of([2, 4])\")\n }\n ```",
          "signature": "fn <a href=\"moonbitlang/core/deque#T\">T</a>::retain[A](self : <a href=\"moonbitlang/core/deque#T\">T</a>[A], f : (A) -> Bool) -> Unit",
          "loc": {
            "path": "moonbitlang/core/deque",
            "file": "deque.mbt",
            "line": 998,
            "column": 8
          }
        },
        {
          "name": "retain_map",
          "docstring": "\n Filters and maps elements in-place using a provided function. Modifies the\n deque to retain only elements for which the provided function returns `Some`,\n and updates those elements with the values inside the `Some` variant.\n\n Parameters:\n\n * `self` : The deque to be filtered and mapped.\n * `f` : A function that takes an element and returns either `Some` with a new\n value to replace the element, or `None` to remove the element.\n\n Example:\n\n ```moonbit\n test \"retain_map\" {\n   let dq = @deque.of([1, 2, 3, 4, 5])\n   dq.retain_map(fn(x) { if x % 2 == 0 { Some(x * 2) } else { None } })\n   inspect!(dq, content=\"@deque.of([4, 8])\")\n }\n ```",
          "signature": "fn <a href=\"moonbitlang/core/deque#T\">T</a>::retain_map[A](self : <a href=\"moonbitlang/core/deque#T\">T</a>[A], f : (A) -> A?) -> Unit",
          "loc": {
            "path": "moonbitlang/core/deque",
            "file": "deque.mbt",
            "line": 935,
            "column": 8
          }
        },
        {
          "name": "rev_each",
          "docstring": "\n Iterates over the elements of the deque in reversed turn.\n\n # Example\n ```\n let dv = @deque.of([1, 2, 3, 4, 5])\n let mut sum = 0\n dv.rev_each(fn (x) {sum = sum + x})\n assert_eq!(sum, 15)\n ```",
          "signature": "fn <a href=\"moonbitlang/core/deque#T\">T</a>::rev_each[A](self : <a href=\"moonbitlang/core/deque#T\">T</a>[A], f : (A) -> Unit) -> Unit",
          "loc": {
            "path": "moonbitlang/core/deque",
            "file": "deque.mbt",
            "line": 642,
            "column": 8
          }
        },
        {
          "name": "rev_eachi",
          "docstring": "\n Iterates over the elements of the deque in reversed turn with index.\n\n # Example\n ```\n let dv = @deque.of([1, 2, 3, 4, 5])\n let mut idx_sum = 0\n dv.rev_eachi(fn (i, _x) {idx_sum = idx_sum + i})\n assert_eq!(idx_sum, 10)\n ```",
          "signature": "fn <a href=\"moonbitlang/core/deque#T\">T</a>::rev_eachi[A](self : <a href=\"moonbitlang/core/deque#T\">T</a>[A], f : (Int, A) -> Unit) -> Unit",
          "loc": {
            "path": "moonbitlang/core/deque",
            "file": "deque.mbt",
            "line": 658,
            "column": 8
          }
        },
        {
          "name": "rev_iter",
          "docstring": "\n Creates an iterator that yields elements in reverse order.\n\n Parameters:\n\n * `self` : The deque to iterate over.\n\n Returns an iterator that yields elements from the deque in reverse order,\n starting from the last element.\n\n Example:\n\n ```moonbit\n test \"T::rev_iter\" {\n   let dq = @deque.of([1, 2, 3])\n   let mut sum = 0\n   dq.rev_iter().each(fn(x) { sum = sum * 10 + x })\n   inspect!(sum, content=\"321\")\n }\n ```",
          "signature": "fn <a href=\"moonbitlang/core/deque#T\">T</a>::rev_iter[A](self : <a href=\"moonbitlang/core/deque#T\">T</a>[A]) -> <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[A]",
          "loc": {
            "path": "moonbitlang/core/deque",
            "file": "deque.mbt",
            "line": 1144,
            "column": 8
          }
        },
        {
          "name": "rev_iter2",
          "docstring": "\n Creates an iterator that yields index-value pairs of elements in the deque in\n reverse order.\n\n Parameters:\n\n * `self` : The deque to iterate over.\n\n Returns an iterator that yields tuples of `(index, value)` pairs, where the\n index starts from 0 and increments by 1, while values are taken from the\n deque in reverse order.\n\n Example:\n\n ```moonbit\n test \"rev_iter2\" {\n   let dq = @deque.of([1, 2, 3])\n   let mut s = \"\"\n   dq.rev_iter2().each(fn(i, x) { s = s + \"\\{i}:\\{x} \" })\n   inspect!(s, content=\"0:3 1:2 2:1 \")\n }\n ```",
          "signature": "fn <a href=\"moonbitlang/core/deque#T\">T</a>::rev_iter2[A](self : <a href=\"moonbitlang/core/deque#T\">T</a>[A]) -> <a href=\"moonbitlang/core/builtin#Iter2\">Iter2</a>[Int, A]",
          "loc": {
            "path": "moonbitlang/core/deque",
            "file": "deque.mbt",
            "line": 1191,
            "column": 8
          }
        },
        {
          "name": "search",
          "docstring": "\n Searches for a value in the deque and returns its position.\n\n Parameters:\n\n * `self` : The deque to search in.\n * `value` : The value to search for.\n\n Returns the index of the first occurrence of the value in the deque, or\n `None` if the value is not found.\n\n Example:\n\n ```moonbit\n test \"search\" {\n   let dq = @deque.of([1, 2, 3, 2, 1])\n   inspect!(dq.search(2), content=\"Some(1)\")\n   inspect!(dq.search(4), content=\"None\")\n }\n ```",
          "signature": "fn <a href=\"moonbitlang/core/deque#T\">T</a>::search[A : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : <a href=\"moonbitlang/core/deque#T\">T</a>[A], value : A) -> Int?",
          "loc": {
            "path": "moonbitlang/core/deque",
            "file": "deque.mbt",
            "line": 772,
            "column": 8
          }
        },
        {
          "name": "shrink_to_fit",
          "docstring": "\n Shrinks the capacity of the deque as much as possible.\n\n # Example\n\n ```\n let dv = @deque.new(capacity=10)\n dv.push_back(1)\n dv.push_back(2)\n dv.push_back(3)\n assert_eq!(dv.capacity(), 10)\n dv.shrink_to_fit()\n assert_eq!(dv.capacity(), 3)\n ```",
          "signature": "fn <a href=\"moonbitlang/core/deque#T\">T</a>::shrink_to_fit[A](self : <a href=\"moonbitlang/core/deque#T\">T</a>[A]) -> Unit",
          "loc": {
            "path": "moonbitlang/core/deque",
            "file": "deque.mbt",
            "line": 846,
            "column": 8
          }
        },
        {
          "name": "to_array",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/deque#T\">T</a>::to_array[A](self : <a href=\"moonbitlang/core/deque#T\">T</a>[A]) -> <a href=\"moonbitlang/core/array#Array\">Array</a>[A]",
          "loc": {
            "path": "moonbitlang/core/deque",
            "file": "deque.mbt",
            "line": 1243,
            "column": 8
          }
        },
        {
          "name": "truncate",
          "docstring": "\n Shortens the deque in-place, keeping the first `len` elements and dropping\n the rest.\n\n If `len` is greater than or equal to the deque's current length, this has no\n effect; if `len` is negative, the function will panic.\n\n Parameters:\n\n * `self` : The deque to be truncated.\n * `len` : The new length of the deque.\n\n Example:\n\n ```moonbit\n test \"truncate\" {\n   let dq = @deque.of([1, 2, 3, 4, 5])\n   dq.truncate(3)\n   inspect!(dq, content=\"@deque.of([1, 2, 3])\")\n }\n ```",
          "signature": "fn <a href=\"moonbitlang/core/deque#T\">T</a>::truncate[A](self : <a href=\"moonbitlang/core/deque#T\">T</a>[A], len : Int) -> Unit",
          "loc": {
            "path": "moonbitlang/core/deque",
            "file": "deque.mbt",
            "line": 881,
            "column": 8
          }
        },
        {
          "name": "unsafe_pop_back",
          "docstring": "\n Removes a back element from a deque.\n\n # Example\n ```\n let dv = @deque.of([1, 2, 3, 4, 5])\n dv.unsafe_pop_back()\n assert_eq!(dv.back(), Some(4))\n ```\n @alert unsafe \"Panic if the deque is empty.\"",
          "signature": "fn <a href=\"moonbitlang/core/deque#T\">T</a>::unsafe_pop_back[A](self : <a href=\"moonbitlang/core/deque#T\">T</a>[A]) -> Unit",
          "loc": {
            "path": "moonbitlang/core/deque",
            "file": "deque.mbt",
            "line": 368,
            "column": 8
          }
        },
        {
          "name": "unsafe_pop_front",
          "docstring": "\n Removes a front element from a deque.\n\n # Example\n ```\n let dv = @deque.of([1, 2, 3, 4, 5])\n dv.unsafe_pop_front()\n assert_eq!(dv.front(), Some(2))\n ```\n @alert unsafe \"Panic if the deque is empty.\"",
          "signature": "fn <a href=\"moonbitlang/core/deque#T\">T</a>::unsafe_pop_front[A](self : <a href=\"moonbitlang/core/deque#T\">T</a>[A]) -> Unit",
          "loc": {
            "path": "moonbitlang/core/deque",
            "file": "deque.mbt",
            "line": 313,
            "column": 8
          }
        }
      ],
      "impls": [
        {
          "self": {
            "kind": "constr",
            "constructor": { "name": "T", "path": "moonbitlang/core/deque" },
            "arguments": [ { "kind": "param", "name": "A" } ]
          },
          "trait": { "name": "Eq", "path": "moonbitlang/core/builtin" },
          "methods": [
            {
              "name": "op_equal",
              "docstring": "\n Compares two deques for equality. Returns `true` if both deques contain the\n same elements in the same order.\n\n Parameters:\n\n * `self` : The first deque to compare.\n * `other` : The second deque to compare with.\n\n Returns `true` if both deques are equal, `false` otherwise.\n\n Example:\n\n ```moonbit\n test \"op_equal\" {\n   let dq1 = @deque.of([1, 2, 3])\n   let dq2 = @deque.of([1, 2, 3])\n   let dq3 = @deque.of([3, 2, 1])\n   inspect!(dq1 == dq2, content=\"true\")\n   inspect!(dq1 == dq3, content=\"false\")\n }\n ```",
              "signature": "fn op_equal[A : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : <a href=\"moonbitlang/core/deque#T\">T</a>[A], other : <a href=\"moonbitlang/core/deque#T\">T</a>[A]) -> Bool",
              "loc": {
                "path": "moonbitlang/core/deque",
                "file": "deque.mbt",
                "line": 588,
                "column": 35
              }
            }
          ]
        },
        {
          "self": {
            "kind": "constr",
            "constructor": { "name": "T", "path": "moonbitlang/core/deque" },
            "arguments": [ { "kind": "param", "name": "A" } ]
          },
          "trait": { "name": "Show", "path": "moonbitlang/core/builtin" },
          "methods": [
            {
              "name": "output",
              "docstring": "",
              "signature": "fn output[A : <a href=\"moonbitlang/core/builtin#Show\">Show</a>](self : <a href=\"moonbitlang/core/deque#T\">T</a>[A], logger : <a href=\"moonbitlang/core/builtin#Logger\">Logger</a>) -> Unit",
              "loc": {
                "path": "moonbitlang/core/deque",
                "file": "deque.mbt",
                "line": 49,
                "column": 39
              }
            }
          ]
        },
        {
          "self": {
            "kind": "constr",
            "constructor": { "name": "T", "path": "moonbitlang/core/deque" },
            "arguments": [ { "kind": "param", "name": "A" } ]
          },
          "trait": { "name": "ToJson", "path": "moonbitlang/core/builtin" },
          "methods": [
            {
              "name": "to_json",
              "docstring": "",
              "signature": "fn to_json[A : <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>](self : <a href=\"moonbitlang/core/deque#T\">T</a>[A]) -> <a href=\"moonbitlang/core/json#Json\">Json</a>",
              "loc": {
                "path": "moonbitlang/core/deque",
                "file": "deque.mbt",
                "line": 1256,
                "column": 43
              }
            }
          ]
        },
        {
          "self": {
            "kind": "constr",
            "constructor": { "name": "T", "path": "moonbitlang/core/deque" },
            "arguments": [ { "kind": "param", "name": "A" } ]
          },
          "trait": { "name": "FromJson", "path": "moonbitlang/core/json" },
          "methods": [
            {
              "name": "from_json",
              "docstring": "",
              "signature": "fn from_json[A : <a href=\"moonbitlang/core/json#FromJson\">@moonbitlang/core/json.FromJson</a>](json : <a href=\"moonbitlang/core/json#Json\">Json</a>, path : <a href=\"moonbitlang/core/json#JsonPath\">@moonbitlang/core/json.JsonPath</a>) -> <a href=\"moonbitlang/core/deque#T\">T</a>[A]!<a href=\"moonbitlang/core/json#JsonDecodeError\">@moonbitlang/core/json.JsonDecodeError</a>",
              "loc": {
                "path": "moonbitlang/core/deque",
                "file": "deque.mbt",
                "line": 1265,
                "column": 59
              }
            }
          ]
        }
      ]
    }
  ],
  "typealias": [],
  "values": [
    {
      "name": "back",
      "docstring": "\n Return the back element from a deque, or `None` if it is empty.\n\n # Example\n ```\n let dv = @deque.of([1, 2, 3, 4, 5])\n assert_eq!(dv.back(), Some(5))\n ```",
      "signature": "fn back[A](self : <a href=\"moonbitlang/core/deque#T\">T</a>[A]) -> A?",
      "loc": {
        "path": "moonbitlang/core/deque",
        "file": "deque.mbt",
        "line": 251,
        "column": 8
      }
    },
    {
      "name": "capacity",
      "docstring": "\n Returns the total number of elements the deque can hold in its internal\n buffer before requiring reallocation.\n\n Parameters:\n\n * `deque` : The deque whose capacity is being queried.\n\n Returns the current capacity of the deque's internal buffer.\n\n Example:\n\n ```moonbit\n test \"capacity\" {\n   let dq = @deque.new(capacity=10)\n   dq.push_back(1)\n   dq.push_back(2)\n   inspect!(dq.capacity(), content=\"10\")\n }\n ```",
      "signature": "fn capacity[A](self : <a href=\"moonbitlang/core/deque#T\">T</a>[A]) -> Int",
      "loc": {
        "path": "moonbitlang/core/deque",
        "file": "deque.mbt",
        "line": 193,
        "column": 8
      }
    },
    {
      "name": "clear",
      "docstring": "\n Clears the deque, removing all values.\n\n This method has no effect on the allocated capacity of the deque, only setting the length to 0.\n\n # Example\n ```\n let dv = @deque.of([1, 2, 3, 4, 5])\n dv.clear()\n assert_eq!(dv.length(), 0)\n ```",
      "signature": "fn clear[A](self : <a href=\"moonbitlang/core/deque#T\">T</a>[A]) -> Unit",
      "loc": {
        "path": "moonbitlang/core/deque",
        "file": "deque.mbt",
        "line": 675,
        "column": 8
      }
    },
    {
      "name": "contains",
      "docstring": "\n Tests whether a deque contains a specific element.\n\n Parameters:\n\n * `self` : The deque to search in.\n * `value` : The element to search for.\n\n Returns `true` if the deque contains the specified element, `false`\n otherwise.\n\n Example:\n\n ```moonbit\n test \"T::contains\" {\n   let dq = @deque.of([1, 2, 3, 4, 5])\n   inspect!(dq.contains(3), content=\"true\")\n   inspect!(dq.contains(6), content=\"false\")\n }\n ```",
      "signature": "fn contains[A : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : <a href=\"moonbitlang/core/deque#T\">T</a>[A], value : A) -> Bool",
      "loc": {
        "path": "moonbitlang/core/deque",
        "file": "deque.mbt",
        "line": 801,
        "column": 8
      }
    },
    {
      "name": "copy",
      "docstring": "\n Creates a new deque with the same elements as the original deque. The new\n deque will have a capacity equal to its length, and its elements will be\n stored contiguously starting from index 0.\n\n Parameters:\n\n * `self` : The deque to be copied.\n\n Returns a new deque containing all elements from the original deque in the\n same order.\n\n Example:\n\n ```moonbit\n test \"T::copy\" {\n   let dq = @deque.of([1, 2, 3, 4, 5])\n   let copied = dq.copy()\n   inspect!(copied, content=\"@deque.of([1, 2, 3, 4, 5])\")\n }\n ```",
      "signature": "fn copy[A](self : <a href=\"moonbitlang/core/deque#T\">T</a>[A]) -> <a href=\"moonbitlang/core/deque#T\">T</a>[A]",
      "loc": {
        "path": "moonbitlang/core/deque",
        "file": "deque.mbt",
        "line": 106,
        "column": 8
      }
    },
    {
      "name": "each",
      "docstring": "\n Iterates over the elements of the deque.\n\n # Example\n ```\n let dv = @deque.of([1, 2, 3, 4, 5])\n let mut sum = 0\n dv.each(fn (x) {sum = sum + x})\n assert_eq!(sum, 15)\n ```",
      "signature": "fn each[A](self : <a href=\"moonbitlang/core/deque#T\">T</a>[A], f : (A) -> Unit) -> Unit",
      "loc": {
        "path": "moonbitlang/core/deque",
        "file": "deque.mbt",
        "line": 610,
        "column": 8
      }
    },
    {
      "name": "eachi",
      "docstring": "\n Iterates over the elements of the deque with index.\n\n # Example\n ```\n let dv = @deque.of([1, 2, 3, 4, 5])\n let mut idx_sum = 0\n dv.eachi(fn (i, _x) {idx_sum = idx_sum + i})\n assert_eq!(idx_sum, 10)\n ```",
      "signature": "fn eachi[A](self : <a href=\"moonbitlang/core/deque#T\">T</a>[A], f : (Int, A) -> Unit) -> Unit",
      "loc": {
        "path": "moonbitlang/core/deque",
        "file": "deque.mbt",
        "line": 626,
        "column": 8
      }
    },
    {
      "name": "filter_map_inplace",
      "docstring": "\n Filters and maps elements in-place using a provided function. Modifies the\n deque to retain only elements for which the provided function returns `Some`,\n and updates those elements with the values inside the `Some` variant.\n",
      "signature": "fn filter_map_inplace[A](self : <a href=\"moonbitlang/core/deque#T\">T</a>[A], f : (A) -> A?) -> Unit",
      "loc": {
        "path": "moonbitlang/core/deque",
        "file": "deque.mbt",
        "line": 974,
        "column": 8
      }
    },
    {
      "name": "from_array",
      "docstring": "\n Creates a new deque with elements copied from an array.\n\n Parameters:\n\n * `array` : The array to initialize the deque with. All elements from the\n array will be copied into the new deque in the same order.\n\n Returns a new deque containing all elements from the input array.\n\n Example:\n\n ```moonbit\n test \"from_array\" {\n   let arr = [1, 2, 3, 4, 5]\n   let dq = @deque.from_array(arr)\n   inspect!(dq, content=\"@deque.of([1, 2, 3, 4, 5])\")\n }\n ```",
      "signature": "fn from_array[A](arr : <a href=\"moonbitlang/core/array#Array\">Array</a>[A]) -> <a href=\"moonbitlang/core/deque#T\">T</a>[A]",
      "loc": {
        "path": "moonbitlang/core/deque",
        "file": "deque.mbt",
        "line": 72,
        "column": 8
      }
    },
    {
      "name": "from_iter",
      "docstring": "\n Creates a new deque containing the elements from the given iterator.\n\n Parameters:\n\n * `iter` : An iterator containing the elements to be added to the deque.\n\n Returns a new deque containing all elements from the iterator in the same\n order.\n\n Example:\n\n ```moonbit\n test \"from_iter\" {\n   let arr = [1, 2, 3, 4, 5]\n   let dq = @deque.from_iter(arr.iter())\n   inspect!(dq, content=\"@deque.of([1, 2, 3, 4, 5])\")\n }\n ```",
      "signature": "fn from_iter[A](iter : <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[A]) -> <a href=\"moonbitlang/core/deque#T\">T</a>[A]",
      "loc": {
        "path": "moonbitlang/core/deque",
        "file": "deque.mbt",
        "line": 1236,
        "column": 8
      }
    },
    {
      "name": "front",
      "docstring": "\n Return the front element from a deque, or `None` if it is empty.\n\n # Example\n ```\n let dv = @deque.of([1, 2, 3, 4, 5])\n assert_eq!(dv.front(), Some(1))\n ```",
      "signature": "fn front[A](self : <a href=\"moonbitlang/core/deque#T\">T</a>[A]) -> A?",
      "loc": {
        "path": "moonbitlang/core/deque",
        "file": "deque.mbt",
        "line": 235,
        "column": 8
      }
    },
    {
      "name": "is_empty",
      "docstring": "\n Test if the deque is empty.\n\n # Example\n ```\n let dv = @deque.new()\n assert_eq!(dv.is_empty(), true)\n dv.push_back(1)\n assert_eq!(dv.is_empty(), false)\n ```",
      "signature": "fn is_empty[A](self : <a href=\"moonbitlang/core/deque#T\">T</a>[A]) -> Bool",
      "loc": {
        "path": "moonbitlang/core/deque",
        "file": "deque.mbt",
        "line": 748,
        "column": 8
      }
    },
    {
      "name": "iter",
      "docstring": "\n Creates an iterator over the elements of the deque, allowing sequential\n access to its elements in order from front to back.\n\n Parameters:\n\n * `deque` : The deque to iterate over.\n\n Returns an iterator that yields each element in the deque in order.\n\n Example:\n\n ```moonbit\n test \"T::iter\" {\n   let dq = @deque.of([1, 2, 3, 4, 5])\n   let mut sum = 0\n   dq.iter().each(fn(x) { sum = sum + x })\n   inspect!(sum, content=\"15\")\n }\n ```",
      "signature": "fn iter[A](self : <a href=\"moonbitlang/core/deque#T\">T</a>[A]) -> <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[A]",
      "loc": {
        "path": "moonbitlang/core/deque",
        "file": "deque.mbt",
        "line": 1051,
        "column": 8
      }
    },
    {
      "name": "iter2",
      "docstring": "\n Returns an iterator that yields pairs of indices and elements from the deque\n in order, starting from the front.\n\n Parameters:\n\n * `self` : The deque to iterate over.\n\n Returns an iterator of type `Iter2[Int, A]` that produces tuples of `(index,\n element)`, where `index` starts from 0 and increments by 1 for each element,\n and `element` is the corresponding element from the deque.\n\n Example:\n\n ```moonbit\n test \"iter2\" {\n   let dq = @deque.of([10, 20, 30])\n   let mut sum = 0\n   dq.iter2().each(fn(i, x) { sum = sum + i * x })\n   inspect!(sum, content=\"80\") // 0*10 + 1*20 + 2*30 = 80\n }\n ```",
      "signature": "fn iter2[A](self : <a href=\"moonbitlang/core/deque#T\">T</a>[A]) -> <a href=\"moonbitlang/core/builtin#Iter2\">Iter2</a>[Int, A]",
      "loc": {
        "path": "moonbitlang/core/deque",
        "file": "deque.mbt",
        "line": 1098,
        "column": 8
      }
    },
    {
      "name": "length",
      "docstring": "\n Returns the number of elements in the deque.\n\n Parameters:\n\n * `deque` : The deque to get the length of.\n\n Returns the current number of elements in the deque.\n\n Example:\n\n ```moonbit\n test \"length\" {\n   let dq = @deque.of([1, 2, 3])\n   inspect!(dq.length(), content=\"3\")\n   dq.push_back(4)\n   inspect!(dq.length(), content=\"4\")\n }\n ```",
      "signature": "fn length[A](self : <a href=\"moonbitlang/core/deque#T\">T</a>[A]) -> Int",
      "loc": {
        "path": "moonbitlang/core/deque",
        "file": "deque.mbt",
        "line": 169,
        "column": 8
      }
    },
    {
      "name": "map",
      "docstring": "\n Maps a function over the elements of the deque.\n\n # Example\n ```\n let dv = @deque.of([3, 4, 5])\n let dv2 = dv.map(fn (x) {x + 1})\n assert_eq!(dv2, @deque.of([4, 5, 6]))\n ```",
      "signature": "fn map[A, U](self : <a href=\"moonbitlang/core/deque#T\">T</a>[A], f : (A) -> U) -> <a href=\"moonbitlang/core/deque#T\">T</a>[U]",
      "loc": {
        "path": "moonbitlang/core/deque",
        "file": "deque.mbt",
        "line": 705,
        "column": 8
      }
    },
    {
      "name": "mapi",
      "docstring": "\n Maps a function over the elements of the deque with index.\n\n # Example\n ```\n let dv = @deque.of([3, 4, 5])\n let dv2 = dv.mapi(fn (i, x) {x + i}) // @deque.of([3, 5, 7])\n assert_eq!(dv2, @deque.of([3, 5, 7]))\n ```",
      "signature": "fn mapi[A, U](self : <a href=\"moonbitlang/core/deque#T\">T</a>[A], f : (Int, A) -> U) -> <a href=\"moonbitlang/core/deque#T\">T</a>[U]",
      "loc": {
        "path": "moonbitlang/core/deque",
        "file": "deque.mbt",
        "line": 726,
        "column": 8
      }
    },
    {
      "name": "new",
      "docstring": "\n Creates a new empty deque with an optional initial capacity.\n\n Parameters:\n\n * `capacity` : The initial capacity of the deque. If not specified, defaults\n to 0 and will be automatically adjusted as elements are added.\n\n Returns a new empty deque of type `T[A]` where `A` is the type of elements\n the deque will hold.\n\n Example:\n\n ```moonbit\n test \"T::new\" {\n   let dq : @deque.T[Int] = @deque.new()\n   inspect!(dq.length(), content=\"0\")\n   inspect!(dq.capacity(), content=\"0\")\n }\n\n test \"T::new/with_capacity\" {\n   let dq : @deque.T[Int] = @deque.new(capacity=10)\n   inspect!(dq.length(), content=\"0\")\n   inspect!(dq.capacity(), content=\"10\")\n }\n ```",
      "signature": "fn new[A](capacity~ : Int = ..) -> <a href=\"moonbitlang/core/deque#T\">T</a>[A]",
      "loc": {
        "path": "moonbitlang/core/deque",
        "file": "deque.mbt",
        "line": 44,
        "column": 8
      }
    },
    {
      "name": "of",
      "docstring": "\n Creates a new deque from a fixed array, preserving the order of elements.\n\n Parameters:\n\n * `array` : A fixed-size array containing the initial elements of the deque.\n\n Returns a new deque containing all elements from the input array.\n\n Example:\n\n ```moonbit\n test \"of\" {\n   let dq = @deque.of([1, 2, 3])\n   inspect!(dq, content=\"@deque.of([1, 2, 3])\")\n }\n ```",
      "signature": "fn of[A](arr : <a href=\"moonbitlang/core/array#FixedArray\">FixedArray</a>[A]) -> <a href=\"moonbitlang/core/deque#T\">T</a>[A]",
      "loc": {
        "path": "moonbitlang/core/deque",
        "file": "deque.mbt",
        "line": 137,
        "column": 8
      }
    },
    {
      "name": "op_get",
      "docstring": "\n Retrieves the element at the specified index from the deque.\n\n If you try to access an index which isn’t in the Deque, it will panic.\n\n # Example\n ```\n let dv = @deque.of([1, 2, 3, 4, 5])\n assert_eq!(dv[2], 3)\n ```\n @alert unsafe \"Panic if the index is out of bounds.\"",
      "signature": "fn op_get[A](self : <a href=\"moonbitlang/core/deque#T\">T</a>[A], index : Int) -> A",
      "loc": {
        "path": "moonbitlang/core/deque",
        "file": "deque.mbt",
        "line": 488,
        "column": 8
      }
    },
    {
      "name": "op_set",
      "docstring": "\n Sets the value of the element at the specified index.\n\n If you try to access an index which isn’t in the Deque, it will panic.\n\n # Example\n ```\n let dv = @deque.of([1, 2, 3, 4, 5])\n dv[2] = 1\n assert_eq!(dv[2], 1)\n ```\n @alert unsafe \"Panic if the index is out of bounds.\"",
      "signature": "fn op_set[A](self : <a href=\"moonbitlang/core/deque#T\">T</a>[A], index : Int, value : A) -> Unit",
      "loc": {
        "path": "moonbitlang/core/deque",
        "file": "deque.mbt",
        "line": 514,
        "column": 8
      }
    },
    {
      "name": "pop_back",
      "docstring": "\n Removes a back element from a deque and returns it, or `None` if it is empty.\n\n # Example\n ```\n let dv = @deque.of([1, 2, 3, 4, 5])\n assert_eq!(dv.pop_back(), Some(5))\n ```",
      "signature": "fn pop_back[A](self : <a href=\"moonbitlang/core/deque#T\">T</a>[A]) -> A?",
      "loc": {
        "path": "moonbitlang/core/deque",
        "file": "deque.mbt",
        "line": 454,
        "column": 8
      }
    },
    {
      "name": "pop_back_exn",
      "docstring": "\n Removes and discards the last element from a deque.\n\n Parameters:\n\n * `deque` : The deque to remove the last element from.\n\n Throws a runtime error if the deque is empty.\n\n Example:\n\n ```moonbit\n test \"pop_back_exn\" {\n   let dq = @deque.of([1, 2, 3])\n   // Deprecated way:\n   // dq.pop_back_exn()\n   // Recommended way:\n   dq.unsafe_pop_back()\n   inspect!(dq, content=\"@deque.of([1, 2])\")\n }\n ```\n",
      "signature": "fn pop_back_exn[A](self : <a href=\"moonbitlang/core/deque#T\">T</a>[A]) -> Unit",
      "loc": {
        "path": "moonbitlang/core/deque",
        "file": "deque.mbt",
        "line": 411,
        "column": 8
      }
    },
    {
      "name": "pop_front",
      "docstring": "\n Removes a front element from a deque and returns it, or `None` if it is empty.\n\n # Example\n ```\n let dv = @deque.of([1, 2, 3, 4, 5])\n assert_eq!(dv.pop_front(), Some(1))\n ```",
      "signature": "fn pop_front[A](self : <a href=\"moonbitlang/core/deque#T\">T</a>[A]) -> A?",
      "loc": {
        "path": "moonbitlang/core/deque",
        "file": "deque.mbt",
        "line": 423,
        "column": 8
      }
    },
    {
      "name": "pop_front_exn",
      "docstring": "\n Removes and discards the first element from the deque. This function is a\n deprecated version of `unsafe_pop_front`.\n\n Parameters:\n\n * `self` : The deque to remove the first element from.\n\n Throws a runtime error if the deque is empty.\n\n Example:\n\n ```moonbit\n test \"pop_front_exn\" {\n   let dq = @deque.of([1, 2, 3])\n   dq.unsafe_pop_front()\n   inspect!(dq, content=\"@deque.of([2, 3])\")\n }\n ```\n",
      "signature": "fn pop_front_exn[A](self : <a href=\"moonbitlang/core/deque#T\">T</a>[A]) -> Unit",
      "loc": {
        "path": "moonbitlang/core/deque",
        "file": "deque.mbt",
        "line": 354,
        "column": 8
      }
    },
    {
      "name": "push_back",
      "docstring": "\n Adds an element to the back of the deque.\n\n If the deque is at capacity, it will be reallocated.\n\n # Example\n ```\n let dv = @deque.of([1, 2, 3, 4, 5])\n dv.push_back(6)\n assert_eq!(dv.back(), Some(6))\n ```",
      "signature": "fn push_back[A](self : <a href=\"moonbitlang/core/deque#T\">T</a>[A], value : A) -> Unit",
      "loc": {
        "path": "moonbitlang/core/deque",
        "file": "deque.mbt",
        "line": 292,
        "column": 8
      }
    },
    {
      "name": "push_front",
      "docstring": "\n Adds an element to the front of the deque.\n\n If the deque is at capacity, it will be reallocated.\n\n # Example\n ```\n let dv = @deque.of([1, 2, 3, 4, 5])\n dv.push_front(0)\n assert_eq!(dv.front(), Some(0))\n ```",
      "signature": "fn push_front[A](self : <a href=\"moonbitlang/core/deque#T\">T</a>[A], value : A) -> Unit",
      "loc": {
        "path": "moonbitlang/core/deque",
        "file": "deque.mbt",
        "line": 270,
        "column": 8
      }
    },
    {
      "name": "reserve_capacity",
      "docstring": "\n Reserves capacity to ensure that it can hold at least the number of elements\n specified by the `capacity` argument.\n\n # Example\n\n ```\n let dv = @deque.of([1])\n dv.reserve_capacity(10)\n assert_eq!(dv.capacity(), 10)\n ```",
      "signature": "fn reserve_capacity[A](self : <a href=\"moonbitlang/core/deque#T\">T</a>[A], capacity : Int) -> Unit",
      "loc": {
        "path": "moonbitlang/core/deque",
        "file": "deque.mbt",
        "line": 816,
        "column": 8
      }
    },
    {
      "name": "retain",
      "docstring": "\n Filters elements in-place by retaining only the elements that satisfy the\n given predicate. Modifies the deque to keep only the elements for which the\n predicate function returns `true`.\n\n Parameters:\n\n * `self` : The deque to be filtered.\n * `predicate` : A function that takes an element and returns `true` if the\n element should be kept, `false` if it should be removed.\n\n Example:\n\n ```moonbit\n test \"retain\" {\n   let dq = @deque.of([1, 2, 3, 4, 5])\n   dq.retain(fn(x) { x % 2 == 0 })\n   inspect!(dq, content=\"@deque.of([2, 4])\")\n }\n ```",
      "signature": "fn retain[A](self : <a href=\"moonbitlang/core/deque#T\">T</a>[A], f : (A) -> Bool) -> Unit",
      "loc": {
        "path": "moonbitlang/core/deque",
        "file": "deque.mbt",
        "line": 998,
        "column": 8
      }
    },
    {
      "name": "retain_map",
      "docstring": "\n Filters and maps elements in-place using a provided function. Modifies the\n deque to retain only elements for which the provided function returns `Some`,\n and updates those elements with the values inside the `Some` variant.\n\n Parameters:\n\n * `self` : The deque to be filtered and mapped.\n * `f` : A function that takes an element and returns either `Some` with a new\n value to replace the element, or `None` to remove the element.\n\n Example:\n\n ```moonbit\n test \"retain_map\" {\n   let dq = @deque.of([1, 2, 3, 4, 5])\n   dq.retain_map(fn(x) { if x % 2 == 0 { Some(x * 2) } else { None } })\n   inspect!(dq, content=\"@deque.of([4, 8])\")\n }\n ```",
      "signature": "fn retain_map[A](self : <a href=\"moonbitlang/core/deque#T\">T</a>[A], f : (A) -> A?) -> Unit",
      "loc": {
        "path": "moonbitlang/core/deque",
        "file": "deque.mbt",
        "line": 935,
        "column": 8
      }
    },
    {
      "name": "rev_each",
      "docstring": "\n Iterates over the elements of the deque in reversed turn.\n\n # Example\n ```\n let dv = @deque.of([1, 2, 3, 4, 5])\n let mut sum = 0\n dv.rev_each(fn (x) {sum = sum + x})\n assert_eq!(sum, 15)\n ```",
      "signature": "fn rev_each[A](self : <a href=\"moonbitlang/core/deque#T\">T</a>[A], f : (A) -> Unit) -> Unit",
      "loc": {
        "path": "moonbitlang/core/deque",
        "file": "deque.mbt",
        "line": 642,
        "column": 8
      }
    },
    {
      "name": "rev_eachi",
      "docstring": "\n Iterates over the elements of the deque in reversed turn with index.\n\n # Example\n ```\n let dv = @deque.of([1, 2, 3, 4, 5])\n let mut idx_sum = 0\n dv.rev_eachi(fn (i, _x) {idx_sum = idx_sum + i})\n assert_eq!(idx_sum, 10)\n ```",
      "signature": "fn rev_eachi[A](self : <a href=\"moonbitlang/core/deque#T\">T</a>[A], f : (Int, A) -> Unit) -> Unit",
      "loc": {
        "path": "moonbitlang/core/deque",
        "file": "deque.mbt",
        "line": 658,
        "column": 8
      }
    },
    {
      "name": "rev_iter",
      "docstring": "\n Creates an iterator that yields elements in reverse order.\n\n Parameters:\n\n * `self` : The deque to iterate over.\n\n Returns an iterator that yields elements from the deque in reverse order,\n starting from the last element.\n\n Example:\n\n ```moonbit\n test \"T::rev_iter\" {\n   let dq = @deque.of([1, 2, 3])\n   let mut sum = 0\n   dq.rev_iter().each(fn(x) { sum = sum * 10 + x })\n   inspect!(sum, content=\"321\")\n }\n ```",
      "signature": "fn rev_iter[A](self : <a href=\"moonbitlang/core/deque#T\">T</a>[A]) -> <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[A]",
      "loc": {
        "path": "moonbitlang/core/deque",
        "file": "deque.mbt",
        "line": 1144,
        "column": 8
      }
    },
    {
      "name": "rev_iter2",
      "docstring": "\n Creates an iterator that yields index-value pairs of elements in the deque in\n reverse order.\n\n Parameters:\n\n * `self` : The deque to iterate over.\n\n Returns an iterator that yields tuples of `(index, value)` pairs, where the\n index starts from 0 and increments by 1, while values are taken from the\n deque in reverse order.\n\n Example:\n\n ```moonbit\n test \"rev_iter2\" {\n   let dq = @deque.of([1, 2, 3])\n   let mut s = \"\"\n   dq.rev_iter2().each(fn(i, x) { s = s + \"\\{i}:\\{x} \" })\n   inspect!(s, content=\"0:3 1:2 2:1 \")\n }\n ```",
      "signature": "fn rev_iter2[A](self : <a href=\"moonbitlang/core/deque#T\">T</a>[A]) -> <a href=\"moonbitlang/core/builtin#Iter2\">Iter2</a>[Int, A]",
      "loc": {
        "path": "moonbitlang/core/deque",
        "file": "deque.mbt",
        "line": 1191,
        "column": 8
      }
    },
    {
      "name": "search",
      "docstring": "\n Searches for a value in the deque and returns its position.\n\n Parameters:\n\n * `self` : The deque to search in.\n * `value` : The value to search for.\n\n Returns the index of the first occurrence of the value in the deque, or\n `None` if the value is not found.\n\n Example:\n\n ```moonbit\n test \"search\" {\n   let dq = @deque.of([1, 2, 3, 2, 1])\n   inspect!(dq.search(2), content=\"Some(1)\")\n   inspect!(dq.search(4), content=\"None\")\n }\n ```",
      "signature": "fn search[A : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : <a href=\"moonbitlang/core/deque#T\">T</a>[A], value : A) -> Int?",
      "loc": {
        "path": "moonbitlang/core/deque",
        "file": "deque.mbt",
        "line": 772,
        "column": 8
      }
    },
    {
      "name": "shrink_to_fit",
      "docstring": "\n Shrinks the capacity of the deque as much as possible.\n\n # Example\n\n ```\n let dv = @deque.new(capacity=10)\n dv.push_back(1)\n dv.push_back(2)\n dv.push_back(3)\n assert_eq!(dv.capacity(), 10)\n dv.shrink_to_fit()\n assert_eq!(dv.capacity(), 3)\n ```",
      "signature": "fn shrink_to_fit[A](self : <a href=\"moonbitlang/core/deque#T\">T</a>[A]) -> Unit",
      "loc": {
        "path": "moonbitlang/core/deque",
        "file": "deque.mbt",
        "line": 846,
        "column": 8
      }
    },
    {
      "name": "to_array",
      "docstring": "",
      "signature": "fn to_array[A](self : <a href=\"moonbitlang/core/deque#T\">T</a>[A]) -> <a href=\"moonbitlang/core/array#Array\">Array</a>[A]",
      "loc": {
        "path": "moonbitlang/core/deque",
        "file": "deque.mbt",
        "line": 1243,
        "column": 8
      }
    },
    {
      "name": "truncate",
      "docstring": "\n Shortens the deque in-place, keeping the first `len` elements and dropping\n the rest.\n\n If `len` is greater than or equal to the deque's current length, this has no\n effect; if `len` is negative, the function will panic.\n\n Parameters:\n\n * `self` : The deque to be truncated.\n * `len` : The new length of the deque.\n\n Example:\n\n ```moonbit\n test \"truncate\" {\n   let dq = @deque.of([1, 2, 3, 4, 5])\n   dq.truncate(3)\n   inspect!(dq, content=\"@deque.of([1, 2, 3])\")\n }\n ```",
      "signature": "fn truncate[A](self : <a href=\"moonbitlang/core/deque#T\">T</a>[A], len : Int) -> Unit",
      "loc": {
        "path": "moonbitlang/core/deque",
        "file": "deque.mbt",
        "line": 881,
        "column": 8
      }
    },
    {
      "name": "unsafe_pop_back",
      "docstring": "\n Removes a back element from a deque.\n\n # Example\n ```\n let dv = @deque.of([1, 2, 3, 4, 5])\n dv.unsafe_pop_back()\n assert_eq!(dv.back(), Some(4))\n ```\n @alert unsafe \"Panic if the deque is empty.\"",
      "signature": "fn unsafe_pop_back[A](self : <a href=\"moonbitlang/core/deque#T\">T</a>[A]) -> Unit",
      "loc": {
        "path": "moonbitlang/core/deque",
        "file": "deque.mbt",
        "line": 368,
        "column": 8
      }
    },
    {
      "name": "unsafe_pop_front",
      "docstring": "\n Removes a front element from a deque.\n\n # Example\n ```\n let dv = @deque.of([1, 2, 3, 4, 5])\n dv.unsafe_pop_front()\n assert_eq!(dv.front(), Some(2))\n ```\n @alert unsafe \"Panic if the deque is empty.\"",
      "signature": "fn unsafe_pop_front[A](self : <a href=\"moonbitlang/core/deque#T\">T</a>[A]) -> Unit",
      "loc": {
        "path": "moonbitlang/core/deque",
        "file": "deque.mbt",
        "line": 313,
        "column": 8
      }
    }
  ],
  "misc": []
}