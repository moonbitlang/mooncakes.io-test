{
  "kind": "package",
  "relative_path": "double",
  "module_path": "moonbitlang/core",
  "readme_content": "# `double`\n\nThis package provides comprehensive support for double-precision floating-point arithmetic, including basic operations, trigonometric functions, exponential and logarithmic functions, as well as utility functions for handling special values.\n\n## Constants and Special Values\n\nThe package provides several important constants and special floating-point values:\n\n```moonbit\ntest \"special values\" {\n  // Special values\n  inspect!(@double.infinity, content=\"Infinity\")\n  inspect!(@double.neg_infinity, content=\"-Infinity\")\n  inspect!(@double.not_a_number, content=\"NaN\")\n\n  // Limits\n  inspect!(@double.max_value, content=\"1.7976931348623157e+308\")\n  inspect!(@double.min_value, content=\"-1.7976931348623157e+308\")\n  inspect!(@double.min_positive, content=\"2.2250738585072014e-308\")\n}\n```\n\n## Basic Operations\n\nBasic mathematical operations and rounding functions:\n\n```moonbit\ntest \"basic operations\" {\n  // Absolute value\n  inspect!(@double.abs(-3.14), content=\"3.14\")\n\n  // Rounding functions\n  inspect!(@double.floor(3.7), content=\"3\")\n  inspect!(@double.ceil(3.2), content=\"4\")\n  inspect!(@double.round(3.5), content=\"4\")\n  inspect!(@double.trunc(3.7), content=\"3\")\n\n  // Sign\n  inspect!(@double.signum(-3.14), content=\"-1\")\n  inspect!(@double.signum(2.0), content=\"1\")\n\n  // Type conversion\n  inspect!(@double.from_int(42), content=\"42\")\n}\n```\n\n## Trigonometric Functions\n\nComplete set of trigonometric functions and their inverses:\n\n```moonbit\ntest \"trigonometric functions\" {\n  // Basic trigonometric functions\n  inspect!(@double.sin(0.0), content=\"0\")\n  inspect!(@double.cos(0.0), content=\"1\")\n  inspect!(@double.tan(0.0), content=\"0\")\n\n  // Inverse trigonometric functions\n  inspect!(@double.asin(0.0), content=\"0\")\n  inspect!(@double.acos(1.0), content=\"0\")\n  inspect!(@double.atan(0.0), content=\"0\")\n\n  // Two-argument arctangent\n  inspect!(@double.atan2(0.0, 1.0), content=\"0\")\n}\n```\n\n## Hyperbolic Functions\n\nComplete set of hyperbolic functions and their inverses:\n\n```moonbit\ntest \"hyperbolic functions\" {\n  // Basic hyperbolic functions\n  inspect!(@double.sinh(0.0), content=\"0\")\n  inspect!(@double.cosh(0.0), content=\"1\")\n  inspect!(@double.tanh(0.0), content=\"0\")\n\n  // Inverse hyperbolic functions\n  inspect!(@double.asinh(0.0), content=\"0\")\n  inspect!(@double.acosh(1.0), content=\"0\")\n  inspect!(@double.atanh(0.0), content=\"0\")\n}\n```\n\n## Exponential and Logarithmic Functions\n\nVarious exponential and logarithmic functions:\n\n```moonbit\ntest \"exponential and logarithmic\" {\n  // Exponential functions\n  inspect!(@double.exp(0.0), content=\"1\")\n  inspect!(@double.expm1(0.0), content=\"0\") // exp(x) - 1\n\n  // Logarithmic functions\n  inspect!(@double.ln(1.0), content=\"0\") // Natural logarithm\n  inspect!(@double.ln_1p(0.0), content=\"0\") // ln(1 + x)\n  inspect!(@double.log2(1.0), content=\"0\") // Base-2 logarithm\n  inspect!(@double.log10(1.0), content=\"0\") // Base-10 logarithm\n\n  // Power functions\n  inspect!(@double.pow(2.0, 3.0), content=\"8\")\n  inspect!(@double.cbrt(8.0), content=\"2\") // Cube root\n  inspect!(@double.hypot(3.0, 4.0), content=\"5\") // sqrt(x^2 + y^2)\n}\n```\n\n## Special Value Testing\n\nFunctions for testing special floating-point values and comparing numbers:\n\n```moonbit\ntest \"special value testing\" {\n  // Testing for special values\n  inspect!(@double.is_nan(@double.not_a_number), content=\"true\")\n  inspect!(@double.is_inf(@double.infinity), content=\"true\")\n  inspect!(@double.is_pos_inf(@double.infinity), content=\"true\")\n  inspect!(@double.is_neg_inf(@double.neg_infinity), content=\"true\")\n\n  // Approximate equality\n  let relative_tolerance = 1.e-9\n  inspect!(\n    @double.is_close(0.1 + 0.2, 0.3, relative_tolerance~),\n    content=\"true\",\n  )\n}\n```\n\n## Binary Representation\n\nFunctions for converting doubles to their binary representation:\n\n```moonbit\ntest \"binary representation\" {\n  let num = 1.0\n\n  // Convert to big-endian and little-endian bytes\n  // Different byte orders should produce different results\n  inspect!(\n    num.to_be_bytes(),\n    content=\n      #|b\"\\x3f\\xf0\\x00\\x00\\x00\\x00\\x00\\x00\"\n    ,\n  )\n  inspect!(\n    num.to_le_bytes(),\n    content=\n      #|b\"\\x00\\x00\\x00\\x00\\x00\\x00\\xf0\\x3f\"\n    ,\n  )\n}\n```\n\nNote: Most methods can be called either as a method (`d.to_be_bytes()`) or as a package function (`@double.to_be_bytes(d)`).\n",
  "package_data": "moonbitlang/core/double/package_data.json",
  "source_files": [
    "hyperbolic_js.mbt", "hyperbolic_nonjs.mbt", "trig_nonjs.mbt",
    "to_uint_wasm.mbt", "pow_js.mbt", "round.mbt", "pow_nonjs.mbt",
    "round_js.mbt", "double.mbt", "hypot_nonjs.mbt", "mod_js.mbt",
    "cbrt_js.mbt", "hypot_js.mbt", "mod_nonjs.mbt", "trig_js.mbt",
    "exp_js.mbt", "exp_nonjs.mbt", "round_wasm.mbt", "to_uint.mbt",
    "scalbn.mbt", "log_js.mbt", "log_nonjs.mbt", "cbrt_nonjs.mbt"
  ]
}