{
  "kind": "package",
  "relative_path": "priority_queue",
  "module_path": "moonbitlang/core",
  "readme_content": "# Priority Queue\n\nA priority queue is a data structure capable of maintaining maximum/minimum values at front of the queue, which may have other names in other programming languages (C++ std::priority_queue / Rust BinaryHeap ). The priority queue here is implemented as a pairing heap and has excellent performance.\n\n# Usage\n\n## Create\n\nYou can use `new()` or `of()` to create a priority queue.\n\n```moonbit\ntest {\n  let _queue1 : @priority_queue.T[Int] = @priority_queue.new()\n  let _queue2 = @priority_queue.of([1, 2, 3])\n}\n```\n\nNote, however, that the default priority queue created is greater-first; if you need to create a less-first queue, you can write a struct belongs to Compare trait to implement it.\n\n## Length\n\nYou can use `length()` to get the number of elements in the current priority queue.\n\n```moonbit\ntest {\n  let pq = @priority_queue.of([1, 2, 3, 4, 5])\n  assert_eq!(pq.length(), 5)\n}\n```\n\nSimilarly, you can use the `is_empty` to determine whether the priority queue is empty.\n\n```moonbit\ntest {\n  let pq : @priority_queue.T[Int] = @priority_queue.new()\n  assert_eq!(pq.is_empty(), true)\n }\n```\n\n## Peek\n\nYou can use `peek()` to look at the head element of a queue, which must be either the maximum or minimum value of an element in the queue, depending on the nature of the specification. The return value of `peek()` is an Option, which means that the result will be `None` when the queue is empty.\n\n```moonbit\ntest {\n  let pq = @priority_queue.of([1, 2, 3, 4, 5])\n  assert_eq!(pq.peek(), Some(5))\n}\n```\n\n## Push\n\nYou can use `push()` to add elements to the priority queue.\n\n```moonbit\ntest {\n  let pq : @priority_queue.T[Int] = @priority_queue.new()\n  pq.push(1)\n  pq.push(2)\n  assert_eq!(pq.peek(), Some(2))\n}\n```\n\n## Pop\n\nYou can use `pop()` to pop the element at the front of the priority queue, respectively, and like [Peek](#Peek), its return values are `Option`, loaded with the value of the element being popped.\n\n```moonbit\ntest {\n  let pq = @priority_queue.of([5, 4, 3, 2, 1])\n  assert_eq!(pq.pop(), Some(5))\n}\n```\n\n```moonbit\ntest {\n  let pq = @priority_queue.of([5, 4, 3, 2, 1])\n  assert_eq!(pq.length(), 5)\n}\n```\n\n## Clear\n\nYou can use `clear` to clear a priority queue.\n\n```moonbit\ntest {\n  let pq = @priority_queue.of([1, 2, 3, 4, 5])\n  pq.clear()\n  assert_eq!(pq.is_empty(), true)\n}\n```\n\n## Copy and Transfer\n\nYou can copy a priority queue using the `copy` method.\n\n```moonbit\ntest {\n  let pq = @priority_queue.of([1, 2, 3])\n  let _pq2 = pq.copy()\n}\n```\n",
  "package_data": "moonbitlang/core/priority_queue/package_data.json",
  "source_files": [ "priority_queue.mbt", "types.mbt" ]
}