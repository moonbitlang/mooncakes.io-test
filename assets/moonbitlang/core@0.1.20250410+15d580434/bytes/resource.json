{
  "kind": "package",
  "relative_path": "bytes",
  "module_path": "moonbitlang/core",
  "readme_content": "# `bytes`\n\nThis package provides utilities for working with sequences of bytes, offering both mutable (`Bytes`) and immutable (`View`) representations.\n\n## Creating Bytes\n\nYou can create `Bytes` from various sources including arrays, fixed arrays, and iterators:\n\n```moonbit\ntest \"bytes creation\" {\n  // Create from array of bytes\n  let arr = [b'h', b'e', b'l', b'l', b'o']\n  let bytes1 = @bytes.from_array(arr)\n  inspect!(\n    bytes1,\n    content=\n      #|b\"\\x68\\x65\\x6c\\x6c\\x6f\"\n    ,\n  )\n\n  // Create from fixed array\n  let fixed = FixedArray::make(3, b'a')\n  let bytes2 = @bytes.of(fixed)\n  inspect!(\n    bytes2,\n    content=\n      #|b\"\\x61\\x61\\x61\"\n    ,\n  )\n\n  // Create empty bytes\n  let empty = @bytes.default()\n  inspect!(\n    empty,\n    content=\n      #|b\"\"\n    ,\n  )\n\n  // Create from iterator\n  let iter_bytes = @bytes.from_iter(arr.iter())\n  inspect!(\n    iter_bytes,\n    content=\n      #|b\"\\x68\\x65\\x6c\\x6c\\x6f\"\n    ,\n  )\n}\n```\n\n## Converting Between Formats\n\n`Bytes` can be converted to and from different formats:\n\n```moonbit\ntest \"bytes conversion\" {\n  let original = [b'x', b'y', b'z']\n  let bytes = @bytes.from_array(original)\n\n  // Convert to array\n  let array = bytes.to_array()\n  inspect!(array, content=\"[b'\\\\x78', b'\\\\x79', b'\\\\x7A']\")\n\n  // Convert to fixed array\n  let fixed = bytes.to_fixedarray()\n  inspect!(fixed, content=\"[b'\\\\x78', b'\\\\x79', b'\\\\x7A']\")\n\n  // Convert to iterator and collect back\n  let collected = bytes.iter().to_array()\n  inspect!(collected, content=\"[b'\\\\x78', b'\\\\x79', b'\\\\x7A']\")\n}\n```\n\n## Working with Views\n\nViews provide a way to work with portions of bytes and interpret them as various numeric types:\n\n```moonbit\ntest \"bytes view operations\" {\n  // Create bytes with numeric data\n  let num_bytes = @bytes.from_array([0x12, 0x34, 0x56, 0x78])\n\n  // Create a view\n  let view = num_bytes[:]\n\n  // Get individual bytes\n  inspect!(view[0], content=\"b'\\\\x12'\")\n\n  // Interpret as integers (big-endian)\n  inspect!(view.to_int_be(), content=\"305419896\")\n\n  // Interpret as integers (little-endian)\n  inspect!(view.to_int_le(), content=\"2018915346\")\n\n  // Create a sub-view\n  let sub_view = view[1:3]\n  inspect!(sub_view.length(), content=\"2\")\n}\n```\n\n## Binary Data Interpretation\n\nViews provide methods to interpret byte sequences as various numeric types in both little-endian and big-endian formats:\n\n```moonbit\ntest \"numeric interpretation\" {\n  // Create test data\n  let int64_bytes = @bytes.from_array([\n    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42,\n  ])\n  let int64_view = int64_bytes[:]\n  inspect!(int64_view.to_int64_be(), content=\"66\")\n  inspect!(int64_view.to_uint64_le(), content=\"4755801206503243776\")\n}\n```\n\n## Concatenation and Comparison\n\nBytes can be concatenated and compared:\n\n```moonbit\ntest \"bytes operations\" {\n  let b1 = @bytes.from_array([b'a', b'b'])\n  let b2 = @bytes.from_array([b'c', b'd'])\n\n  // Concatenation\n  let combined = b1 + b2\n  inspect!(\n    combined,\n    content=\n      #|b\"\\x61\\x62\\x63\\x64\"\n    ,\n  )\n\n  // Comparison\n  let same = @bytes.from_array([b'a', b'b'])\n  let different = @bytes.from_array([b'x', b'y'])\n  inspect!(b1 == same, content=\"true\")\n  inspect!(b1 == different, content=\"false\")\n  inspect!(b1 < b2, content=\"true\")\n}\n```\n",
  "package_data": "moonbitlang/core/bytes/package_data.json",
  "source_files": [ "xxhash.mbt", "view.mbt", "bytes.mbt" ]
}