{
  "name": "moonbitlang/core/immut/array",
  "traits": [],
  "types": [
    {
      "name": "T",
      "docstring": "\n Invariants:\n - `shift` = tree height * `num_bits`. When it is 0, we are at the leaf level.\n - `size` = the number of elements in the tree.\n - `shift` is not used when `tree` is `Empty`.",
      "signature": "type T[A]",
      "loc": {
        "path": "moonbitlang/core/immut/array",
        "file": "types.mbt",
        "line": 20,
        "column": 8
      },
      "methods": [
        {
          "name": "concat",
          "docstring": "\n Given two trees, concatenate them into a new tree.",
          "signature": "fn <a href=\"moonbitlang/core/immut/array#T\">T</a>::concat[A](self : <a href=\"moonbitlang/core/immut/array#T\">T</a>[A], other : <a href=\"moonbitlang/core/immut/array#T\">T</a>[A]) -> <a href=\"moonbitlang/core/immut/array#T\">T</a>[A]",
          "loc": {
            "path": "moonbitlang/core/immut/array",
            "file": "array.mbt",
            "line": 172,
            "column": 8
          }
        },
        {
          "name": "copy",
          "docstring": "\n Physically copy the array.\n Since it is an immutable data structure,\n it is rarely the case that you would need this function.\n ",
          "signature": "fn <a href=\"moonbitlang/core/immut/array#T\">T</a>::copy[A](self : <a href=\"moonbitlang/core/immut/array#T\">T</a>[A]) -> <a href=\"moonbitlang/core/immut/array#T\">T</a>[A]",
          "loc": {
            "path": "moonbitlang/core/immut/array",
            "file": "array.mbt",
            "line": 50,
            "column": 8
          }
        },
        {
          "name": "each",
          "docstring": "\n Iterate over the array.\n\n # Example\n ```\n let arr = []\n let v = @array.of([1, 2, 3, 4, 5])\n v.each(fn(e) { arr.push(e) })\n assert_eq!(arr, [1, 2, 3, 4, 5])\n ```",
          "signature": "fn <a href=\"moonbitlang/core/immut/array#T\">T</a>::each[A](self : <a href=\"moonbitlang/core/immut/array#T\">T</a>[A], f : (A) -> Unit) -> Unit",
          "loc": {
            "path": "moonbitlang/core/immut/array",
            "file": "array.mbt",
            "line": 215,
            "column": 8
          }
        },
        {
          "name": "eachi",
          "docstring": "\n Iterate over the array with index.\n\n # Example\n ```\n let arr = []\n let v = @array.of([1, 2, 3, 4, 5])\n v.eachi(fn(i, e) { arr.push(i * e) })\n assert_eq!(arr, [0, 2, 6, 12, 20])\n ```",
          "signature": "fn <a href=\"moonbitlang/core/immut/array#T\">T</a>::eachi[A](self : <a href=\"moonbitlang/core/immut/array#T\">T</a>[A], f : (Int, A) -> Unit) -> Unit",
          "loc": {
            "path": "moonbitlang/core/immut/array",
            "file": "array.mbt",
            "line": 229,
            "column": 8
          }
        },
        {
          "name": "fold",
          "docstring": "\n Fold the array.\n\n # Example\n ```\n let v = @array.of([1, 2, 3, 4, 5])\n assert_eq!(v.fold(fn(a, b) { a + b }, init=0), 15)\n ```",
          "signature": "fn <a href=\"moonbitlang/core/immut/array#T\">T</a>::fold[A, B](self : <a href=\"moonbitlang/core/immut/array#T\">T</a>[A], init~ : B, f : (B, A) -> B) -> B",
          "loc": {
            "path": "moonbitlang/core/immut/array",
            "file": "array.mbt",
            "line": 241,
            "column": 8
          }
        },
        {
          "name": "fold_left",
          "docstring": "\n Fold the array from left to right.\n\n # Example\n ```\n let v = @array.of([1, 2, 3, 4, 5])\n assert_eq!(v.fold(fn(a, b) { a + b }, init=0), 15)\n ```",
          "signature": "fn <a href=\"moonbitlang/core/immut/array#T\">T</a>::fold_left[A](self : <a href=\"moonbitlang/core/immut/array#T\">T</a>[A], f : (A, A) -> A, init~ : A) -> A",
          "loc": {
            "path": "moonbitlang/core/immut/array",
            "file": "array.mbt",
            "line": 267,
            "column": 8
          }
        },
        {
          "name": "fold_right",
          "docstring": "\n Fold the array from right to left.\n\n # Example\n ```\n let v = @array.of([1, 2, 3, 4, 5])\n assert_eq!(v.rev_fold(fn(a, b) { a + b }, init=0), 15)\n ```",
          "signature": "fn <a href=\"moonbitlang/core/immut/array#T\">T</a>::fold_right[A](self : <a href=\"moonbitlang/core/immut/array#T\">T</a>[A], f : (A, A) -> A, init~ : A) -> A",
          "loc": {
            "path": "moonbitlang/core/immut/array",
            "file": "array.mbt",
            "line": 281,
            "column": 8
          }
        },
        {
          "name": "from_array",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/immut/array#T\">T</a>::from_array[A](arr : <a href=\"moonbitlang/core/array#Array\">Array</a>[A]) -> <a href=\"moonbitlang/core/immut/array#T\">T</a>[A]",
          "loc": {
            "path": "moonbitlang/core/immut/array",
            "file": "deprecated.mbt",
            "line": 32,
            "column": 11
          }
        },
        {
          "name": "from_iter",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/immut/array#T\">T</a>::from_iter[A](iter : <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[A]) -> <a href=\"moonbitlang/core/immut/array#T\">T</a>[A]",
          "loc": {
            "path": "moonbitlang/core/immut/array",
            "file": "deprecated.mbt",
            "line": 25,
            "column": 11
          }
        },
        {
          "name": "is_empty",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/immut/array#T\">T</a>::is_empty[A](self : <a href=\"moonbitlang/core/immut/array#T\">T</a>[A]) -> Bool",
          "loc": {
            "path": "moonbitlang/core/immut/array",
            "file": "array.mbt",
            "line": 106,
            "column": 8
          }
        },
        {
          "name": "iter",
          "docstring": "\n Return an iterator over the array.",
          "signature": "fn <a href=\"moonbitlang/core/immut/array#T\">T</a>::iter[A](self : <a href=\"moonbitlang/core/immut/array#T\">T</a>[A]) -> <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[A]",
          "loc": {
            "path": "moonbitlang/core/immut/array",
            "file": "array.mbt",
            "line": 201,
            "column": 8
          }
        },
        {
          "name": "length",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/immut/array#T\">T</a>::length[A](self : <a href=\"moonbitlang/core/immut/array#T\">T</a>[A]) -> Int",
          "loc": {
            "path": "moonbitlang/core/immut/array",
            "file": "array.mbt",
            "line": 111,
            "column": 8
          }
        },
        {
          "name": "make",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/immut/array#T\">T</a>::make[A](len : Int, value : A) -> <a href=\"moonbitlang/core/immut/array#T\">T</a>[A]",
          "loc": {
            "path": "moonbitlang/core/immut/array",
            "file": "deprecated.mbt",
            "line": 39,
            "column": 11
          }
        },
        {
          "name": "makei",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/immut/array#T\">T</a>::makei[A](len : Int, f : (Int) -> A) -> <a href=\"moonbitlang/core/immut/array#T\">T</a>[A]",
          "loc": {
            "path": "moonbitlang/core/immut/array",
            "file": "deprecated.mbt",
            "line": 46,
            "column": 11
          }
        },
        {
          "name": "map",
          "docstring": "\n Map a function over the array.\n\n # Example\n ```\n let v = @array.of([1, 2, 3, 4, 5])\n assert_eq!(v.map(fn(e) { e * 2 }), @array.of([2, 4, 6, 8, 10]))\n ```",
          "signature": "fn <a href=\"moonbitlang/core/immut/array#T\">T</a>::map[A, B](self : <a href=\"moonbitlang/core/immut/array#T\">T</a>[A], f : (A) -> B) -> <a href=\"moonbitlang/core/immut/array#T\">T</a>[B]",
          "loc": {
            "path": "moonbitlang/core/immut/array",
            "file": "array.mbt",
            "line": 293,
            "column": 8
          }
        },
        {
          "name": "new",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/immut/array#T\">T</a>::new[A]() -> <a href=\"moonbitlang/core/immut/array#T\">T</a>[A]",
          "loc": {
            "path": "moonbitlang/core/immut/array",
            "file": "deprecated.mbt",
            "line": 18,
            "column": 11
          }
        },
        {
          "name": "of",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/immut/array#T\">T</a>::of[A](arr : <a href=\"moonbitlang/core/array#FixedArray\">FixedArray</a>[A]) -> <a href=\"moonbitlang/core/immut/array#T\">T</a>[A]",
          "loc": {
            "path": "moonbitlang/core/immut/array",
            "file": "deprecated.mbt",
            "line": 53,
            "column": 11
          }
        },
        {
          "name": "op_get",
          "docstring": "\n Get a value at the given index.\n\n # Examples\n ```\n let v = @array.of([1, 2, 3, 4, 5])\n assert_eq!(v[0], 1)\n ```",
          "signature": "fn <a href=\"moonbitlang/core/immut/array#T\">T</a>::op_get[A](self : <a href=\"moonbitlang/core/immut/array#T\">T</a>[A], index : Int) -> A",
          "loc": {
            "path": "moonbitlang/core/immut/array",
            "file": "array.mbt",
            "line": 127,
            "column": 8
          }
        },
        {
          "name": "push",
          "docstring": "\n Push a value to the end of the array.\n\n # Example\n ```\n let v = @array.of([1, 2, 3])\n assert_eq!(v.push(4), @array.of([1, 2, 3, 4]))\n ```",
          "signature": "fn <a href=\"moonbitlang/core/immut/array#T\">T</a>::push[A](self : <a href=\"moonbitlang/core/immut/array#T\">T</a>[A], value : A) -> <a href=\"moonbitlang/core/immut/array#T\">T</a>[A]",
          "loc": {
            "path": "moonbitlang/core/immut/array",
            "file": "array.mbt",
            "line": 165,
            "column": 8
          }
        },
        {
          "name": "rev_fold",
          "docstring": "\n Fold the array in reverse order.\n\n # Example\n ```\n let v = @array.of([1, 2, 3, 4, 5])\n assert_eq!(v.rev_fold(fn(a, b) { a + b }, init=0), 15)\n ```",
          "signature": "fn <a href=\"moonbitlang/core/immut/array#T\">T</a>::rev_fold[A, B](self : <a href=\"moonbitlang/core/immut/array#T\">T</a>[A], init~ : B, f : (B, A) -> B) -> B",
          "loc": {
            "path": "moonbitlang/core/immut/array",
            "file": "array.mbt",
            "line": 253,
            "column": 8
          }
        },
        {
          "name": "set",
          "docstring": "\n Set a value at the given index (immutable).\n\n # Example\n ```\n let v = @array.of([1, 2, 3, 4, 5])\n assert_eq!(v.set(1, 10), @array.of([1, 10, 3, 4, 5]))\n ```",
          "signature": "fn <a href=\"moonbitlang/core/immut/array#T\">T</a>::set[A](self : <a href=\"moonbitlang/core/immut/array#T\">T</a>[A], index : Int, value : A) -> <a href=\"moonbitlang/core/immut/array#T\">T</a>[A]",
          "loc": {
            "path": "moonbitlang/core/immut/array",
            "file": "array.mbt",
            "line": 149,
            "column": 8
          }
        },
        {
          "name": "to_array",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/immut/array#T\">T</a>::to_array[A](self : <a href=\"moonbitlang/core/immut/array#T\">T</a>[A]) -> <a href=\"moonbitlang/core/array#Array\">Array</a>[A]",
          "loc": {
            "path": "moonbitlang/core/immut/array",
            "file": "array.mbt",
            "line": 91,
            "column": 8
          }
        }
      ],
      "impls": [
        {
          "self": {
            "kind": "constr",
            "constructor": {
              "name": "T",
              "path": "moonbitlang/core/immut/array"
            },
            "arguments": [ { "kind": "param", "name": "A" } ]
          },
          "trait": { "name": "Add", "path": "moonbitlang/core/builtin" },
          "methods": [
            {
              "name": "op_add",
              "docstring": "\n Concat two arrays.",
              "signature": "fn op_add[A](self : <a href=\"moonbitlang/core/immut/array#T\">T</a>[A], other : <a href=\"moonbitlang/core/immut/array#T\">T</a>[A]) -> <a href=\"moonbitlang/core/immut/array#T\">T</a>[A]",
              "loc": {
                "path": "moonbitlang/core/immut/array",
                "file": "array.mbt",
                "line": 191,
                "column": 31
              }
            }
          ]
        },
        {
          "self": {
            "kind": "constr",
            "constructor": {
              "name": "T",
              "path": "moonbitlang/core/immut/array"
            },
            "arguments": [ { "kind": "param", "name": "A" } ]
          },
          "trait": { "name": "Eq", "path": "moonbitlang/core/builtin" },
          "methods": [
            {
              "name": "op_equal",
              "docstring": "",
              "signature": "fn op_equal[A : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : <a href=\"moonbitlang/core/immut/array#T\">T</a>[A], other : <a href=\"moonbitlang/core/immut/array#T\">T</a>[A]) -> Bool",
              "loc": {
                "path": "moonbitlang/core/immut/array",
                "file": "array.mbt",
                "line": 317,
                "column": 35
              }
            }
          ]
        },
        {
          "self": {
            "kind": "constr",
            "constructor": {
              "name": "T",
              "path": "moonbitlang/core/immut/array"
            },
            "arguments": [ { "kind": "param", "name": "A" } ]
          },
          "trait": { "name": "Hash", "path": "moonbitlang/core/builtin" },
          "methods": [
            {
              "name": "hash_combine",
              "docstring": "",
              "signature": "fn hash_combine[A : <a href=\"moonbitlang/core/builtin#Hash\">Hash</a>](self : <a href=\"moonbitlang/core/immut/array#T\">T</a>[A], hasher : <a href=\"moonbitlang/core/builtin#Hasher\">Hasher</a>) -> Unit",
              "loc": {
                "path": "moonbitlang/core/immut/array",
                "file": "array.mbt",
                "line": 310,
                "column": 39
              }
            }
          ]
        },
        {
          "self": {
            "kind": "constr",
            "constructor": {
              "name": "T",
              "path": "moonbitlang/core/immut/array"
            },
            "arguments": [ { "kind": "param", "name": "A" } ]
          },
          "trait": { "name": "Show", "path": "moonbitlang/core/builtin" },
          "methods": [
            {
              "name": "output",
              "docstring": "",
              "signature": "fn output[A : <a href=\"moonbitlang/core/builtin#Show\">Show</a>](self : <a href=\"moonbitlang/core/immut/array#T\">T</a>[A], logger : <a href=\"moonbitlang/core/builtin#Logger\">Logger</a>) -> Unit",
              "loc": {
                "path": "moonbitlang/core/immut/array",
                "file": "array.mbt",
                "line": 322,
                "column": 39
              }
            }
          ]
        },
        {
          "self": {
            "kind": "constr",
            "constructor": {
              "name": "T",
              "path": "moonbitlang/core/immut/array"
            },
            "arguments": [ { "kind": "param", "name": "X" } ]
          },
          "trait": {
            "name": "Arbitrary",
            "path": "moonbitlang/core/quickcheck"
          },
          "methods": [
            {
              "name": "arbitrary",
              "docstring": "",
              "signature": "fn arbitrary[X : <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a>](size : Int, rs : <a href=\"moonbitlang/core/quickcheck/splitmix#RandomState\">@moonbitlang/core/quickcheck/splitmix.RandomState</a>) -> <a href=\"moonbitlang/core/immut/array#T\">T</a>[X]",
              "loc": {
                "path": "moonbitlang/core/immut/array",
                "file": "array.mbt",
                "line": 302,
                "column": 73
              }
            }
          ]
        }
      ]
    }
  ],
  "typealias": [],
  "values": [
    {
      "name": "concat",
      "docstring": "\n Given two trees, concatenate them into a new tree.",
      "signature": "fn concat[A](self : <a href=\"moonbitlang/core/immut/array#T\">T</a>[A], other : <a href=\"moonbitlang/core/immut/array#T\">T</a>[A]) -> <a href=\"moonbitlang/core/immut/array#T\">T</a>[A]",
      "loc": {
        "path": "moonbitlang/core/immut/array",
        "file": "array.mbt",
        "line": 172,
        "column": 8
      }
    },
    {
      "name": "copy",
      "docstring": "\n Physically copy the array.\n Since it is an immutable data structure,\n it is rarely the case that you would need this function.\n ",
      "signature": "fn copy[A](self : <a href=\"moonbitlang/core/immut/array#T\">T</a>[A]) -> <a href=\"moonbitlang/core/immut/array#T\">T</a>[A]",
      "loc": {
        "path": "moonbitlang/core/immut/array",
        "file": "array.mbt",
        "line": 50,
        "column": 8
      }
    },
    {
      "name": "each",
      "docstring": "\n Iterate over the array.\n\n # Example\n ```\n let arr = []\n let v = @array.of([1, 2, 3, 4, 5])\n v.each(fn(e) { arr.push(e) })\n assert_eq!(arr, [1, 2, 3, 4, 5])\n ```",
      "signature": "fn each[A](self : <a href=\"moonbitlang/core/immut/array#T\">T</a>[A], f : (A) -> Unit) -> Unit",
      "loc": {
        "path": "moonbitlang/core/immut/array",
        "file": "array.mbt",
        "line": 215,
        "column": 8
      }
    },
    {
      "name": "eachi",
      "docstring": "\n Iterate over the array with index.\n\n # Example\n ```\n let arr = []\n let v = @array.of([1, 2, 3, 4, 5])\n v.eachi(fn(i, e) { arr.push(i * e) })\n assert_eq!(arr, [0, 2, 6, 12, 20])\n ```",
      "signature": "fn eachi[A](self : <a href=\"moonbitlang/core/immut/array#T\">T</a>[A], f : (Int, A) -> Unit) -> Unit",
      "loc": {
        "path": "moonbitlang/core/immut/array",
        "file": "array.mbt",
        "line": 229,
        "column": 8
      }
    },
    {
      "name": "fold",
      "docstring": "\n Fold the array.\n\n # Example\n ```\n let v = @array.of([1, 2, 3, 4, 5])\n assert_eq!(v.fold(fn(a, b) { a + b }, init=0), 15)\n ```",
      "signature": "fn fold[A, B](self : <a href=\"moonbitlang/core/immut/array#T\">T</a>[A], init~ : B, f : (B, A) -> B) -> B",
      "loc": {
        "path": "moonbitlang/core/immut/array",
        "file": "array.mbt",
        "line": 241,
        "column": 8
      }
    },
    {
      "name": "fold_left",
      "docstring": "\n Fold the array from left to right.\n\n # Example\n ```\n let v = @array.of([1, 2, 3, 4, 5])\n assert_eq!(v.fold(fn(a, b) { a + b }, init=0), 15)\n ```",
      "signature": "fn fold_left[A](self : <a href=\"moonbitlang/core/immut/array#T\">T</a>[A], f : (A, A) -> A, init~ : A) -> A",
      "loc": {
        "path": "moonbitlang/core/immut/array",
        "file": "array.mbt",
        "line": 267,
        "column": 8
      }
    },
    {
      "name": "fold_right",
      "docstring": "\n Fold the array from right to left.\n\n # Example\n ```\n let v = @array.of([1, 2, 3, 4, 5])\n assert_eq!(v.rev_fold(fn(a, b) { a + b }, init=0), 15)\n ```",
      "signature": "fn fold_right[A](self : <a href=\"moonbitlang/core/immut/array#T\">T</a>[A], f : (A, A) -> A, init~ : A) -> A",
      "loc": {
        "path": "moonbitlang/core/immut/array",
        "file": "array.mbt",
        "line": 281,
        "column": 8
      }
    },
    {
      "name": "from_array",
      "docstring": "\n Create a persistent array from an array.\n \n # Example\n ```\n let v = @array.of([1, 2, 3])\n assert_eq!(v, @array.from_array([1, 2, 3]))\n ```",
      "signature": "fn from_array[A](arr : <a href=\"moonbitlang/core/array#Array\">Array</a>[A]) -> <a href=\"moonbitlang/core/immut/array#T\">T</a>[A]",
      "loc": {
        "path": "moonbitlang/core/immut/array",
        "file": "array.mbt",
        "line": 77,
        "column": 8
      }
    },
    {
      "name": "from_iter",
      "docstring": "",
      "signature": "fn from_iter[A](iter : <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[A]) -> <a href=\"moonbitlang/core/immut/array#T\">T</a>[A]",
      "loc": {
        "path": "moonbitlang/core/immut/array",
        "file": "array.mbt",
        "line": 82,
        "column": 8
      }
    },
    {
      "name": "is_empty",
      "docstring": "",
      "signature": "fn is_empty[A](self : <a href=\"moonbitlang/core/immut/array#T\">T</a>[A]) -> Bool",
      "loc": {
        "path": "moonbitlang/core/immut/array",
        "file": "array.mbt",
        "line": 106,
        "column": 8
      }
    },
    {
      "name": "iter",
      "docstring": "\n Return an iterator over the array.",
      "signature": "fn iter[A](self : <a href=\"moonbitlang/core/immut/array#T\">T</a>[A]) -> <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[A]",
      "loc": {
        "path": "moonbitlang/core/immut/array",
        "file": "array.mbt",
        "line": 201,
        "column": 8
      }
    },
    {
      "name": "length",
      "docstring": "",
      "signature": "fn length[A](self : <a href=\"moonbitlang/core/immut/array#T\">T</a>[A]) -> Int",
      "loc": {
        "path": "moonbitlang/core/immut/array",
        "file": "array.mbt",
        "line": 111,
        "column": 8
      }
    },
    {
      "name": "make",
      "docstring": "\n Create a persistent array with a given length and value.",
      "signature": "fn make[A](len : Int, value : A) -> <a href=\"moonbitlang/core/immut/array#T\">T</a>[A]",
      "loc": {
        "path": "moonbitlang/core/immut/array",
        "file": "array.mbt",
        "line": 27,
        "column": 8
      }
    },
    {
      "name": "makei",
      "docstring": "\n Create a persistent array with a given length and a function to generate values.",
      "signature": "fn makei[A](len : Int, f : (Int) -> A) -> <a href=\"moonbitlang/core/immut/array#T\">T</a>[A]",
      "loc": {
        "path": "moonbitlang/core/immut/array",
        "file": "array.mbt",
        "line": 33,
        "column": 8
      }
    },
    {
      "name": "map",
      "docstring": "\n Map a function over the array.\n\n # Example\n ```\n let v = @array.of([1, 2, 3, 4, 5])\n assert_eq!(v.map(fn(e) { e * 2 }), @array.of([2, 4, 6, 8, 10]))\n ```",
      "signature": "fn map[A, B](self : <a href=\"moonbitlang/core/immut/array#T\">T</a>[A], f : (A) -> B) -> <a href=\"moonbitlang/core/immut/array#T\">T</a>[B]",
      "loc": {
        "path": "moonbitlang/core/immut/array",
        "file": "array.mbt",
        "line": 293,
        "column": 8
      }
    },
    {
      "name": "new",
      "docstring": "\n Return a new empty array",
      "signature": "fn new[A]() -> <a href=\"moonbitlang/core/immut/array#T\">T</a>[A]",
      "loc": {
        "path": "moonbitlang/core/immut/array",
        "file": "array.mbt",
        "line": 21,
        "column": 8
      }
    },
    {
      "name": "of",
      "docstring": "\n Convert a FixedArray to an @immut/array.",
      "signature": "fn of[A](arr : <a href=\"moonbitlang/core/array#FixedArray\">FixedArray</a>[A]) -> <a href=\"moonbitlang/core/immut/array#T\">T</a>[A]",
      "loc": {
        "path": "moonbitlang/core/immut/array",
        "file": "array.mbt",
        "line": 39,
        "column": 8
      }
    },
    {
      "name": "op_get",
      "docstring": "\n Get a value at the given index.\n\n # Examples\n ```\n let v = @array.of([1, 2, 3, 4, 5])\n assert_eq!(v[0], 1)\n ```",
      "signature": "fn op_get[A](self : <a href=\"moonbitlang/core/immut/array#T\">T</a>[A], index : Int) -> A",
      "loc": {
        "path": "moonbitlang/core/immut/array",
        "file": "array.mbt",
        "line": 127,
        "column": 8
      }
    },
    {
      "name": "push",
      "docstring": "\n Push a value to the end of the array.\n\n # Example\n ```\n let v = @array.of([1, 2, 3])\n assert_eq!(v.push(4), @array.of([1, 2, 3, 4]))\n ```",
      "signature": "fn push[A](self : <a href=\"moonbitlang/core/immut/array#T\">T</a>[A], value : A) -> <a href=\"moonbitlang/core/immut/array#T\">T</a>[A]",
      "loc": {
        "path": "moonbitlang/core/immut/array",
        "file": "array.mbt",
        "line": 165,
        "column": 8
      }
    },
    {
      "name": "rev_fold",
      "docstring": "\n Fold the array in reverse order.\n\n # Example\n ```\n let v = @array.of([1, 2, 3, 4, 5])\n assert_eq!(v.rev_fold(fn(a, b) { a + b }, init=0), 15)\n ```",
      "signature": "fn rev_fold[A, B](self : <a href=\"moonbitlang/core/immut/array#T\">T</a>[A], init~ : B, f : (B, A) -> B) -> B",
      "loc": {
        "path": "moonbitlang/core/immut/array",
        "file": "array.mbt",
        "line": 253,
        "column": 8
      }
    },
    {
      "name": "set",
      "docstring": "\n Set a value at the given index (immutable).\n\n # Example\n ```\n let v = @array.of([1, 2, 3, 4, 5])\n assert_eq!(v.set(1, 10), @array.of([1, 10, 3, 4, 5]))\n ```",
      "signature": "fn set[A](self : <a href=\"moonbitlang/core/immut/array#T\">T</a>[A], index : Int, value : A) -> <a href=\"moonbitlang/core/immut/array#T\">T</a>[A]",
      "loc": {
        "path": "moonbitlang/core/immut/array",
        "file": "array.mbt",
        "line": 149,
        "column": 8
      }
    },
    {
      "name": "to_array",
      "docstring": "",
      "signature": "fn to_array[A](self : <a href=\"moonbitlang/core/immut/array#T\">T</a>[A]) -> <a href=\"moonbitlang/core/array#Array\">Array</a>[A]",
      "loc": {
        "path": "moonbitlang/core/immut/array",
        "file": "array.mbt",
        "line": 91,
        "column": 8
      }
    }
  ],
  "misc": []
}