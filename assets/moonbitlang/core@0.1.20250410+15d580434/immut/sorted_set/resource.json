{
  "kind": "package",
  "relative_path": "immut/sorted_set",
  "module_path": "moonbitlang/core",
  "readme_content": "---\nmoonbit : true\n---\n\n# Immutable Set\n\nImmutableSet is an immutable, persistent implementation of the set structure (each operation returns a new ImmutableSet), implemented here using a balance tree.\n\n# Usage\n\n## Create\n\nSince set is based on comparison, the type used to construct ImmutableSet needs to implement Compare trait.\n\nYou can create an empty ImmutableSet with a value separately through the following methods, or create it directly from the Array.\n\n```moonbit\nlet _set1 : @sorted_set.T[Int] = @sorted_set.new()\nlet _set2 = @sorted_set.singleton(1)\nlet _set4 = @sorted_set.from_array([1])\nlet _set5= @sorted_set.of([1])\n```\n\n## Conversion\n\nYou can convert an immutable set to an array, which will be sorted.\n\n```moonbit\nlet set = @sorted_set.of([3, 2, 1])\nassert_eq!(set.to_array(), [1, 2, 3])\n```\n\n## Add & Remove\n\nYou can use `add` to add an element to the ImmutableSet.\n\n```moonbit\nlet set = @sorted_set.of([1, 2, 3, 4])\nassert_eq!(set.add(5).to_array(), [1, 2, 3, 4, 5])\n```\n\nYou can use `remove` to remove a specific value.\n\n```moonbit\nlet set = @sorted_set.of([3, 8, 1])\nassert_eq!(set.remove(8).to_array(), [1, 3])\n```\n\n## Max & Min & Contains\n\nYou can use `contains` to query whether an element is in the set.\n\n```moonbit\nlet set = @sorted_set.of([1, 2, 3, 4])\nassert_eq!(set.contains(1), true)\nassert_eq!(set.contains(5), false)\n```\n\nYou can also use `min` and `max` to obtain the minimum or maximum value in the set. When the set is empty, an error will be reported, and they have corresponding Option versions to handle this.\n\n```moonbit\nlet set = @sorted_set.of([1, 2, 3, 4])\nassert_eq!(set.min(), 1)\nassert_eq!(set.max(), 4)\nassert_eq!(set.min_option(), Some(1))\nassert_eq!(set.max_option(), Some(4))\n```\n\n## Split & Union & Inter & Diff & Filter\n\nYou can provide an intermediate value to divide a set into two sets by `split`, and whether the intermediate value is in the set will also be returned as the return value.\n\n```moonbit\nlet (left, present, right) = @sorted_set.of([7, 2, 9, 4, 5, 6, 3, 8, 1]).split(5)\nassert_eq!(present, true)\nassert_eq!(left.to_array(), [1, 2, 3, 4])\nassert_eq!(right.to_array(), [6, 7, 8, 9])\n```\n\nAt the same time, you can use union and inter to take the union or intersection of two sets.\n\n```moonbit\nlet set1 = @sorted_set.of([3, 4, 5])\nlet set2 = @sorted_set.of([4, 5, 6])\nassert_eq!(set1.union(set2).to_array(), [3, 4, 5, 6])\nassert_eq!(set1.intersection(set2).to_array(), [4, 5])\n```\n\nYou can also use the `diff` function to obtain the difference between two sets.\n\n```moonbit\nlet set1 = @sorted_set.of([1, 2, 3])\nlet set2 = @sorted_set.of([4, 5, 1])\nassert_eq!(set1.difference(set2).to_array(), [2, 3])\n```\n\nYou can use `filter` to filter the elements in the set.\n\n```moonbit\nlet set = @sorted_set.of([1, 2, 3, 4, 5, 6])\nassert_eq!(set.filter(fn(v) { v % 2 == 0}).to_array(), [2, 4, 6])\n```\n\n## Subset & Disjoint\n\nYou can use `subsets` and `disjoint` to determine the inclusion and separation relationship between two sets\n\n```moonbit\nassert_eq!(@sorted_set.of([1, 2, 3]).subset(@sorted_set.of([7, 2, 9, 4, 5, 6, 3, 8, 1])), true)\nassert_eq!(@sorted_set.of([1, 2, 3]).disjoint(@sorted_set.of([4, 5, 6])), true)\n```\n\n## Iter & Fold & Map\n\nLike other sequential containers, set also has iterative methods such as `iter`, `fold`, and `map`, and their order is based on the comparison being less than the order.\n\n```moonbit\nlet arr = []\n@sorted_set.of([7, 2, 9, 4, 5, 6, 3, 8, 1]).each(fn(v) { arr.push(v) })\nassert_eq!(arr, [1, 2, 3, 4, 5, 6, 7, 8, 9])\nlet val = @sorted_set.of([1, 2, 3, 4, 5]).fold(init=0, fn(acc, x) { acc + x })\nassert_eq!(val, 15)\nlet set = @sorted_set.of([1, 2, 3])\nassert_eq!(set.map(fn(x){ x * 2}).to_array(), [2, 4, 6])\n```\n\n## All & Any\n\n`all` and `any` can detect whether all elements in the set match or if there are elements that match.\n\n```moonbit\nassert_eq!(@sorted_set.of([2, 4, 6]).all(fn(v) { v % 2 == 0}), true)\nassert_eq!(@sorted_set.of([1, 4, 3]).any(fn(v) { v % 2 == 0}), true)\n```\n\n## Empty\n\n`is_empty` can determine whether a set is empty.\n\n```moonbit\nlet set1 : @sorted_set.T[Int] = @sorted_set.of([])\nassert_eq!(set1.is_empty(), true)\nlet set2 = @sorted_set.of([1])\nassert_eq!(set2.is_empty(), false)\n```\n",
  "package_data": "moonbitlang/core/immut/sorted_set/package_data.json",
  "source_files": [
    "deprecated.mbt", "types.mbt", "generic.mbt", "immutable_set.mbt"
  ]
}