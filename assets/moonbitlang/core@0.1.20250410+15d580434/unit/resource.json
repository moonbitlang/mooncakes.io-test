{
  "kind": "package",
  "relative_path": "unit",
  "module_path": "moonbitlang/core",
  "readme_content": "# `unit`\n\nThis package provides functionality for working with the singleton type `Unit`, which has only one value `()`. `Unit` is commonly used to represent a computation that has side effects but no meaningful return value.\n\n## Unit Value and Default Constructor\n\nThe unit type `Unit` has a single value `()` which can also be obtained via the `default()` function:\n\n```moonbit\ntest \"unit construction\" {\n  let u1 = ()\n  let u2 = @unit.default()\n  // Any two unit values are equal\n  inspect!(u1 == u2, content=\"true\")\n}\n```\n\n## String Representation\n\nUnit values can be converted to strings using either the standalone function or method:\n\n```moonbit\ntest \"unit string conversion\" {\n  let u = ()\n  // Both ways produce the same result\n  inspect!(@unit.to_string(u), content=\"()\")\n  inspect!(u.to_string(), content=\"()\")\n}\n```\n\n## Built-in Trait Implementations\n\nUnit implements several useful traits out of the box:\n\n```moonbit\ntest \"unit trait implementations\" {\n  // Compare - all unit values compare equal\n  let u1 = ()\n  let u2 = ()\n  inspect!(u1.compare(u2), content=\"0\")\n\n  // Hash - all unit values hash to the same value\n  let h1 = u1.hash()\n  let h2 = u2.hash()\n  inspect!(h1 == h2, content=\"true\")\n\n  // Default - provides the unit value\n  let u3 = Unit::default()\n  inspect!(u3 == u1, content=\"true\")\n}\n```\n\nAs we can see, while simple, `Unit` provides all the essential functionality needed for a proper type in the MoonBit type system.\n",
  "package_data": "moonbitlang/core/unit/package_data.json",
  "source_files": [ "unit.mbt" ]
}