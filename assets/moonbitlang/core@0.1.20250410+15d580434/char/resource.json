{
  "kind": "package",
  "relative_path": "char",
  "module_path": "moonbitlang/core",
  "readme_content": "---\nmoonbit: true\n---\n\n# `char`\n\nThis package provides a set of utilities for working with characters, focusing on character classification and validation.\n\n## Basic ASCII Classification\n\nFunctions for determining if a character belongs to various ASCII categories.\n\n```moonbit\ntest \"ascii classification\" {\n  // Basic ASCII checks\n  inspect!(@char.is_ascii('A'), content=\"true\")\n  inspect!(@char.is_ascii('Î»'), content=\"false\")\n\n  // Letter classification\n  inspect!(@char.is_ascii_alphabetic('Z'), content=\"true\")\n  inspect!(@char.is_ascii_alphabetic('1'), content=\"false\")\n\n  // Case classification\n  inspect!(@char.is_ascii_uppercase('A'), content=\"true\")\n  inspect!(@char.is_ascii_uppercase('a'), content=\"false\")\n  inspect!(@char.is_ascii_lowercase('a'), content=\"true\")\n  inspect!(@char.is_ascii_lowercase('A'), content=\"false\")\n}\n```\n\n## Number Classification\n\nFunctions for identifying digits in different number bases.\n\n```moonbit\ntest \"number classification\" {\n  // Decimal digits\n  inspect!(@char.is_ascii_digit('5'), content=\"true\")\n  inspect!(@char.is_ascii_digit('x'), content=\"false\")\n\n  // Hexadecimal digits\n  inspect!(@char.is_ascii_hexdigit('F'), content=\"true\")\n  inspect!(@char.is_ascii_hexdigit('G'), content=\"false\")\n\n  // Octal digits\n  inspect!(@char.is_ascii_octdigit('7'), content=\"true\")\n  inspect!(@char.is_ascii_octdigit('8'), content=\"false\")\n\n  // Custom base digits\n  inspect!(@char.is_digit('5', 6U), content=\"true\")\n  inspect!(@char.is_digit('6', 6U), content=\"false\")\n\n  // General numeric characters\n  inspect!(@char.is_numeric('1'), content=\"true\")\n  inspect!(@char.is_numeric('A'), content=\"false\")\n}\n```\n\n## Special Characters\n\nFunctions for identifying whitespace, control characters and other special characters.\n\n```moonbit\ntest \"special characters\" {\n  // Whitespace characters\n  inspect!(@char.is_ascii_whitespace(' '), content=\"true\")\n  inspect!(@char.is_whitespace('\\n'), content=\"true\")\n\n  // Control characters\n  inspect!(@char.is_ascii_control('\\u0000'), content=\"true\")\n  inspect!(@char.is_control('\\u007F'), content=\"true\")\n\n  // Graphic and punctuation characters\n  inspect!(@char.is_ascii_graphic('!'), content=\"true\")\n  inspect!(@char.is_ascii_graphic(' '), content=\"false\")\n  inspect!(@char.is_ascii_punctuation(','), content=\"true\")\n}\n```\n\n## Method Style Usage\n\nAll character classification functions can also be called as methods directly on characters.\n\n```moonbit\ntest \"method style\" {\n  // Letter methods\n  let c = 'A'\n  inspect!(c.is_ascii(), content=\"true\")\n  inspect!(c.is_ascii_alphabetic(), content=\"true\")\n  inspect!(c.is_ascii_uppercase(), content=\"true\")\n\n  // Digit methods\n  let d = '7'\n  inspect!(d.is_ascii_digit(), content=\"true\")\n  inspect!(d.is_digit(8U), content=\"true\")\n  inspect!(d.is_ascii_hexdigit(), content=\"true\")\n\n  // Special character methods\n  let s = ' '\n  inspect!(s.is_ascii_whitespace(), content=\"true\")\n  inspect!(s.is_whitespace(), content=\"true\")\n}\n```\n",
  "package_data": "moonbitlang/core/char/package_data.json",
  "source_files": [ "char.mbt" ]
}