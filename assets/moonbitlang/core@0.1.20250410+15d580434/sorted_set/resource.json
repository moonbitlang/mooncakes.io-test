{
  "kind": "package",
  "relative_path": "sorted_set",
  "module_path": "moonbitlang/core",
  "readme_content": "---\nmoonbit : true\n---\n\n# Sorted Set\n\nA mutable set backed by a red-black tree.\n\n# Usage\n\n## Create\n\nYou can create an empty MutableSet or a MutableSet from other containers.\n\n```moonbit\nlet _set1 : @sorted_set.T[Int] = @sorted_set.new()\nlet _set2 = @sorted_set.singleton(1)\nlet _set3 = @sorted_set.from_array([1])\n```\n### Container Operations\n\nAdd an element to the MutableSet in place.\n\n```moonbit\nlet set4 = @sorted_set.from_array([1, 2, 3, 4])\nset4.add(5) // ()\nlet set6 = @sorted_set.from_array([1, 2, 3, 4, 5])\nassert_eq!(set6.to_array(), [1, 2, 3, 4, 5])\n```\n\nRemove an element from the MutableSet in place.\n\n```moonbit\nlet set = @sorted_set.from_array([3, 8, 1]) \nset.remove(8) // () \nlet set7 = @sorted_set.from_array([1, 3])\nassert_eq!(set7.to_array(), [1, 3])\n```\n\nWhether an element is in the set.\n\n```moonbit\nlet set = @sorted_set.from_array([1, 2, 3, 4])\nassert_eq!(set.contains(1), true)\nassert_eq!(set.contains(5), false)\n```\n\nIterates over the elements in the set.\n\n```moonbit\nlet arr = []\n@sorted_set.from_array([1, 2, 3, 4]).each(fn(v) { arr.push(v) })\nassert_eq!(arr, [1, 2, 3, 4])\n```\n\nGet the size of the set.\n\n```moonbit\nlet set = @sorted_set.from_array([1, 2, 3, 4])\nassert_eq!(set.size(), 4)\n```\n\nWhether the set is empty.\n\n```moonbit\nlet set : @sorted_set.T[Int] = @sorted_set.new()\nassert_eq!(set.is_empty(), true)\n```\n\n### Set Operations\n\nUnion, intersection and difference of two sets. They return a new set that does not overlap with the original sets in memory.\n\n```moonbit\nlet set1 = @sorted_set.from_array([3, 4, 5])\nlet set2 = @sorted_set.from_array([4, 5, 6])\nlet set3 = set1.union(set2)\nassert_eq!(set3.to_array(), [3, 4, 5, 6])\nlet set4 = set1.intersection(set2)\nassert_eq!(set4.to_array(), [4, 5])\nlet set5 = set1.difference(set2)\nassert_eq!(set5.to_array(), [3])\n```\n\nDetermine the inclusion and separation relationship between two sets.\n\n```moonbit\nlet set1 = @sorted_set.from_array([1, 2, 3])\nlet set2 = @sorted_set.from_array([7, 2, 9, 4, 5, 6, 3, 8, 1])\nassert_eq!(set1.subset(set2), true)\nlet set3 = @sorted_set.from_array([4, 5, 6])\nassert_eq!(set1.disjoint(set3), true)\n```\n\n### Stringify\n\nMutableSet implements to_string (i.e. Show trait), which allows you to directly output it.\n\n```moonbit\nlet set = @sorted_set.from_array([1, 2, 3])\nassert_eq!(set.to_string(), \"@sorted_set.of([1, 2, 3])\")\n```\n\n",
  "package_data": "moonbitlang/core/sorted_set/package_data.json",
  "source_files": [ "deprecated.mbt", "utils.mbt", "types.mbt", "set.mbt" ]
}