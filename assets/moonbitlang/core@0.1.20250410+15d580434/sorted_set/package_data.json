{
  "name": "moonbitlang/core/sorted_set",
  "traits": [],
  "types": [
    {
      "name": "T",
      "docstring": "",
      "signature": "type T[V]",
      "loc": {
        "path": "moonbitlang/core/sorted_set",
        "file": "types.mbt",
        "line": 20,
        "column": 8
      },
      "methods": [
        {
          "name": "add",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/sorted_set#T\">T</a>::add[V : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : <a href=\"moonbitlang/core/sorted_set#T\">T</a>[V], value : V) -> Unit",
          "loc": {
            "path": "moonbitlang/core/sorted_set",
            "file": "set.mbt",
            "line": 105,
            "column": 8
          }
        },
        {
          "name": "contains",
          "docstring": "\n Return if a value is contained in the set.",
          "signature": "fn <a href=\"moonbitlang/core/sorted_set#T\">T</a>::contains[V : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : <a href=\"moonbitlang/core/sorted_set#T\">T</a>[V], value : V) -> Bool",
          "loc": {
            "path": "moonbitlang/core/sorted_set",
            "file": "set.mbt",
            "line": 135,
            "column": 8
          }
        },
        {
          "name": "copy",
          "docstring": "\n Returns a shallow copy of the MutableSet.\n \n It is just copying the tree structure, not the values.\n ",
          "signature": "fn <a href=\"moonbitlang/core/sorted_set#T\">T</a>::copy[V](self : <a href=\"moonbitlang/core/sorted_set#T\">T</a>[V]) -> <a href=\"moonbitlang/core/sorted_set#T\">T</a>[V]",
          "loc": {
            "path": "moonbitlang/core/sorted_set",
            "file": "set.mbt",
            "line": 63,
            "column": 8
          }
        },
        {
          "name": "deep_clone",
          "docstring": "\n It is just copying the tree structure, not the values.\n It requires a Clone trait on T, which we don't have yet.\n",
          "signature": "fn <a href=\"moonbitlang/core/sorted_set#T\">T</a>::deep_clone[V](self : <a href=\"moonbitlang/core/sorted_set#T\">T</a>[V]) -> <a href=\"moonbitlang/core/sorted_set#T\">T</a>[V]",
          "loc": {
            "path": "moonbitlang/core/sorted_set",
            "file": "set.mbt",
            "line": 54,
            "column": 8
          }
        },
        {
          "name": "diff",
          "docstring": "\n Returns the difference of two sets.\n ",
          "signature": "fn <a href=\"moonbitlang/core/sorted_set#T\">T</a>::diff[V : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : <a href=\"moonbitlang/core/sorted_set#T\">T</a>[V], src : <a href=\"moonbitlang/core/sorted_set#T\">T</a>[V]) -> <a href=\"moonbitlang/core/sorted_set#T\">T</a>[V]",
          "loc": {
            "path": "moonbitlang/core/sorted_set",
            "file": "set.mbt",
            "line": 270,
            "column": 8
          }
        },
        {
          "name": "difference",
          "docstring": "\n Returns the difference of two sets.",
          "signature": "fn <a href=\"moonbitlang/core/sorted_set#T\">T</a>::difference[V : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : <a href=\"moonbitlang/core/sorted_set#T\">T</a>[V], src : <a href=\"moonbitlang/core/sorted_set#T\">T</a>[V]) -> <a href=\"moonbitlang/core/sorted_set#T\">T</a>[V]",
          "loc": {
            "path": "moonbitlang/core/sorted_set",
            "file": "set.mbt",
            "line": 278,
            "column": 8
          }
        },
        {
          "name": "disjoint",
          "docstring": "\n Returns if two sets are disjoint.",
          "signature": "fn <a href=\"moonbitlang/core/sorted_set#T\">T</a>::disjoint[V : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : <a href=\"moonbitlang/core/sorted_set#T\">T</a>[V], src : <a href=\"moonbitlang/core/sorted_set#T\">T</a>[V]) -> Bool",
          "loc": {
            "path": "moonbitlang/core/sorted_set",
            "file": "set.mbt",
            "line": 310,
            "column": 8
          }
        },
        {
          "name": "each",
          "docstring": "\n Iterates the set.",
          "signature": "fn <a href=\"moonbitlang/core/sorted_set#T\">T</a>::each[V](self : <a href=\"moonbitlang/core/sorted_set#T\">T</a>[V], f : (V) -> Unit) -> Unit",
          "loc": {
            "path": "moonbitlang/core/sorted_set",
            "file": "set.mbt",
            "line": 337,
            "column": 8
          }
        },
        {
          "name": "eachi",
          "docstring": "\n Iterates the set with index.",
          "signature": "fn <a href=\"moonbitlang/core/sorted_set#T\">T</a>::eachi[V](self : <a href=\"moonbitlang/core/sorted_set#T\">T</a>[V], f : (Int, V) -> Unit) -> Unit",
          "loc": {
            "path": "moonbitlang/core/sorted_set",
            "file": "set.mbt",
            "line": 351,
            "column": 8
          }
        },
        {
          "name": "from_iter",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/sorted_set#T\">T</a>::from_iter[V : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](iter : <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[V]) -> <a href=\"moonbitlang/core/sorted_set#T\">T</a>[V]",
          "loc": {
            "path": "moonbitlang/core/sorted_set",
            "file": "deprecated.mbt",
            "line": 18,
            "column": 11
          }
        },
        {
          "name": "intersect",
          "docstring": "\n Returns the intersection of two sets.",
          "signature": "fn <a href=\"moonbitlang/core/sorted_set#T\">T</a>::intersect[V : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : <a href=\"moonbitlang/core/sorted_set#T\">T</a>[V], src : <a href=\"moonbitlang/core/sorted_set#T\">T</a>[V]) -> <a href=\"moonbitlang/core/sorted_set#T\">T</a>[V]",
          "loc": {
            "path": "moonbitlang/core/sorted_set",
            "file": "set.mbt",
            "line": 288,
            "column": 8
          }
        },
        {
          "name": "intersection",
          "docstring": "\n Returns the intersection of two sets.",
          "signature": "fn <a href=\"moonbitlang/core/sorted_set#T\">T</a>::intersection[V : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : <a href=\"moonbitlang/core/sorted_set#T\">T</a>[V], src : <a href=\"moonbitlang/core/sorted_set#T\">T</a>[V]) -> <a href=\"moonbitlang/core/sorted_set#T\">T</a>[V]",
          "loc": {
            "path": "moonbitlang/core/sorted_set",
            "file": "set.mbt",
            "line": 294,
            "column": 8
          }
        },
        {
          "name": "is_empty",
          "docstring": "\n Returns if MutableSet is empty.",
          "signature": "fn <a href=\"moonbitlang/core/sorted_set#T\">T</a>::is_empty[V : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : <a href=\"moonbitlang/core/sorted_set#T\">T</a>[V]) -> Bool",
          "loc": {
            "path": "moonbitlang/core/sorted_set",
            "file": "set.mbt",
            "line": 325,
            "column": 8
          }
        },
        {
          "name": "iter",
          "docstring": "\n Returns a iterator.",
          "signature": "fn <a href=\"moonbitlang/core/sorted_set#T\">T</a>::iter[V](self : <a href=\"moonbitlang/core/sorted_set#T\">T</a>[V]) -> <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[V]",
          "loc": {
            "path": "moonbitlang/core/sorted_set",
            "file": "set.mbt",
            "line": 384,
            "column": 8
          }
        },
        {
          "name": "range",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/sorted_set#T\">T</a>::range[V : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : <a href=\"moonbitlang/core/sorted_set#T\">T</a>[V], low : V, high : V) -> <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[V]",
          "loc": {
            "path": "moonbitlang/core/sorted_set",
            "file": "set.mbt",
            "line": 451,
            "column": 8
          }
        },
        {
          "name": "remove",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/sorted_set#T\">T</a>::remove[V : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : <a href=\"moonbitlang/core/sorted_set#T\">T</a>[V], value : V) -> Unit",
          "loc": {
            "path": "moonbitlang/core/sorted_set",
            "file": "set.mbt",
            "line": 116,
            "column": 8
          }
        },
        {
          "name": "size",
          "docstring": "\n Returns the number of elements in the MutableSet.",
          "signature": "fn <a href=\"moonbitlang/core/sorted_set#T\">T</a>::size[V : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : <a href=\"moonbitlang/core/sorted_set#T\">T</a>[V]) -> Int",
          "loc": {
            "path": "moonbitlang/core/sorted_set",
            "file": "set.mbt",
            "line": 331,
            "column": 8
          }
        },
        {
          "name": "subset",
          "docstring": "\n Returns if a set is a subset of another set.",
          "signature": "fn <a href=\"moonbitlang/core/sorted_set#T\">T</a>::subset[V : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : <a href=\"moonbitlang/core/sorted_set#T\">T</a>[V], src : <a href=\"moonbitlang/core/sorted_set#T\">T</a>[V]) -> Bool",
          "loc": {
            "path": "moonbitlang/core/sorted_set",
            "file": "set.mbt",
            "line": 302,
            "column": 8
          }
        },
        {
          "name": "to_array",
          "docstring": "\n Converts the set to an array.",
          "signature": "fn <a href=\"moonbitlang/core/sorted_set#T\">T</a>::to_array[V](self : <a href=\"moonbitlang/core/sorted_set#T\">T</a>[V]) -> <a href=\"moonbitlang/core/array#Array\">Array</a>[V]",
          "loc": {
            "path": "moonbitlang/core/sorted_set",
            "file": "set.mbt",
            "line": 361,
            "column": 8
          }
        },
        {
          "name": "union",
          "docstring": "\n Returns the union of two sets.",
          "signature": "fn <a href=\"moonbitlang/core/sorted_set#T\">T</a>::union[V : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : <a href=\"moonbitlang/core/sorted_set#T\">T</a>[V], src : <a href=\"moonbitlang/core/sorted_set#T\">T</a>[V]) -> <a href=\"moonbitlang/core/sorted_set#T\">T</a>[V]",
          "loc": {
            "path": "moonbitlang/core/sorted_set",
            "file": "set.mbt",
            "line": 153,
            "column": 8
          }
        }
      ],
      "impls": [
        {
          "self": {
            "kind": "constr",
            "constructor": {
              "name": "T",
              "path": "moonbitlang/core/sorted_set"
            },
            "arguments": [ { "kind": "param", "name": "V" } ]
          },
          "trait": { "name": "Eq", "path": "moonbitlang/core/builtin" },
          "methods": [
            {
              "name": "op_equal",
              "docstring": "",
              "signature": "fn op_equal[V : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : <a href=\"moonbitlang/core/sorted_set#T\">T</a>[V], other : <a href=\"moonbitlang/core/sorted_set#T\">T</a>[V]) -> Bool",
              "loc": {
                "path": "moonbitlang/core/sorted_set",
                "file": "set.mbt",
                "line": 319,
                "column": 40
              }
            }
          ]
        },
        {
          "self": {
            "kind": "constr",
            "constructor": {
              "name": "T",
              "path": "moonbitlang/core/sorted_set"
            },
            "arguments": [ { "kind": "param", "name": "V" } ]
          },
          "trait": { "name": "Show", "path": "moonbitlang/core/builtin" },
          "methods": [
            {
              "name": "output",
              "docstring": "\n Converts the set to string.",
              "signature": "fn output[V : <a href=\"moonbitlang/core/builtin#Show\">Show</a>](self : <a href=\"moonbitlang/core/sorted_set#T\">T</a>[V], logger : <a href=\"moonbitlang/core/builtin#Logger\">Logger</a>) -> Unit",
              "loc": {
                "path": "moonbitlang/core/sorted_set",
                "file": "set.mbt",
                "line": 418,
                "column": 39
              }
            }
          ]
        },
        {
          "self": {
            "kind": "constr",
            "constructor": {
              "name": "T",
              "path": "moonbitlang/core/sorted_set"
            },
            "arguments": [ { "kind": "param", "name": "X" } ]
          },
          "trait": {
            "name": "Arbitrary",
            "path": "moonbitlang/core/quickcheck"
          },
          "methods": [
            {
              "name": "arbitrary",
              "docstring": "",
              "signature": "fn arbitrary[X : <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a> + <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](size : Int, rs : <a href=\"moonbitlang/core/quickcheck/splitmix#RandomState\">@moonbitlang/core/quickcheck/splitmix.RandomState</a>) -> <a href=\"moonbitlang/core/sorted_set#T\">T</a>[X]",
              "loc": {
                "path": "moonbitlang/core/sorted_set",
                "file": "set.mbt",
                "line": 426,
                "column": 83
              }
            }
          ]
        }
      ]
    }
  ],
  "typealias": [],
  "values": [
    {
      "name": "add",
      "docstring": "",
      "signature": "fn add[V : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : <a href=\"moonbitlang/core/sorted_set#T\">T</a>[V], value : V) -> Unit",
      "loc": {
        "path": "moonbitlang/core/sorted_set",
        "file": "set.mbt",
        "line": 105,
        "column": 8
      }
    },
    {
      "name": "contains",
      "docstring": "\n Return if a value is contained in the set.",
      "signature": "fn contains[V : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : <a href=\"moonbitlang/core/sorted_set#T\">T</a>[V], value : V) -> Bool",
      "loc": {
        "path": "moonbitlang/core/sorted_set",
        "file": "set.mbt",
        "line": 135,
        "column": 8
      }
    },
    {
      "name": "copy",
      "docstring": "\n Returns a shallow copy of the MutableSet.\n \n It is just copying the tree structure, not the values.\n ",
      "signature": "fn copy[V](self : <a href=\"moonbitlang/core/sorted_set#T\">T</a>[V]) -> <a href=\"moonbitlang/core/sorted_set#T\">T</a>[V]",
      "loc": {
        "path": "moonbitlang/core/sorted_set",
        "file": "set.mbt",
        "line": 63,
        "column": 8
      }
    },
    {
      "name": "deep_clone",
      "docstring": "\n It is just copying the tree structure, not the values.\n It requires a Clone trait on T, which we don't have yet.\n",
      "signature": "fn deep_clone[V](self : <a href=\"moonbitlang/core/sorted_set#T\">T</a>[V]) -> <a href=\"moonbitlang/core/sorted_set#T\">T</a>[V]",
      "loc": {
        "path": "moonbitlang/core/sorted_set",
        "file": "set.mbt",
        "line": 54,
        "column": 8
      }
    },
    {
      "name": "diff",
      "docstring": "\n Returns the difference of two sets.\n ",
      "signature": "fn diff[V : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : <a href=\"moonbitlang/core/sorted_set#T\">T</a>[V], src : <a href=\"moonbitlang/core/sorted_set#T\">T</a>[V]) -> <a href=\"moonbitlang/core/sorted_set#T\">T</a>[V]",
      "loc": {
        "path": "moonbitlang/core/sorted_set",
        "file": "set.mbt",
        "line": 270,
        "column": 8
      }
    },
    {
      "name": "difference",
      "docstring": "\n Returns the difference of two sets.",
      "signature": "fn difference[V : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : <a href=\"moonbitlang/core/sorted_set#T\">T</a>[V], src : <a href=\"moonbitlang/core/sorted_set#T\">T</a>[V]) -> <a href=\"moonbitlang/core/sorted_set#T\">T</a>[V]",
      "loc": {
        "path": "moonbitlang/core/sorted_set",
        "file": "set.mbt",
        "line": 278,
        "column": 8
      }
    },
    {
      "name": "disjoint",
      "docstring": "\n Returns if two sets are disjoint.",
      "signature": "fn disjoint[V : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : <a href=\"moonbitlang/core/sorted_set#T\">T</a>[V], src : <a href=\"moonbitlang/core/sorted_set#T\">T</a>[V]) -> Bool",
      "loc": {
        "path": "moonbitlang/core/sorted_set",
        "file": "set.mbt",
        "line": 310,
        "column": 8
      }
    },
    {
      "name": "each",
      "docstring": "\n Iterates the set.",
      "signature": "fn each[V](self : <a href=\"moonbitlang/core/sorted_set#T\">T</a>[V], f : (V) -> Unit) -> Unit",
      "loc": {
        "path": "moonbitlang/core/sorted_set",
        "file": "set.mbt",
        "line": 337,
        "column": 8
      }
    },
    {
      "name": "eachi",
      "docstring": "\n Iterates the set with index.",
      "signature": "fn eachi[V](self : <a href=\"moonbitlang/core/sorted_set#T\">T</a>[V], f : (Int, V) -> Unit) -> Unit",
      "loc": {
        "path": "moonbitlang/core/sorted_set",
        "file": "set.mbt",
        "line": 351,
        "column": 8
      }
    },
    {
      "name": "from_array",
      "docstring": "\n Initialize an set from an array.",
      "signature": "fn from_array[V : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](array : <a href=\"moonbitlang/core/array#Array\">Array</a>[V]) -> <a href=\"moonbitlang/core/sorted_set#T\">T</a>[V]",
      "loc": {
        "path": "moonbitlang/core/sorted_set",
        "file": "set.mbt",
        "line": 31,
        "column": 8
      }
    },
    {
      "name": "from_iter",
      "docstring": "",
      "signature": "fn from_iter[V : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](iter : <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[V]) -> <a href=\"moonbitlang/core/sorted_set#T\">T</a>[V]",
      "loc": {
        "path": "moonbitlang/core/sorted_set",
        "file": "set.mbt",
        "line": 410,
        "column": 8
      }
    },
    {
      "name": "intersect",
      "docstring": "\n Returns the intersection of two sets.",
      "signature": "fn intersect[V : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : <a href=\"moonbitlang/core/sorted_set#T\">T</a>[V], src : <a href=\"moonbitlang/core/sorted_set#T\">T</a>[V]) -> <a href=\"moonbitlang/core/sorted_set#T\">T</a>[V]",
      "loc": {
        "path": "moonbitlang/core/sorted_set",
        "file": "set.mbt",
        "line": 288,
        "column": 8
      }
    },
    {
      "name": "intersection",
      "docstring": "\n Returns the intersection of two sets.",
      "signature": "fn intersection[V : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : <a href=\"moonbitlang/core/sorted_set#T\">T</a>[V], src : <a href=\"moonbitlang/core/sorted_set#T\">T</a>[V]) -> <a href=\"moonbitlang/core/sorted_set#T\">T</a>[V]",
      "loc": {
        "path": "moonbitlang/core/sorted_set",
        "file": "set.mbt",
        "line": 294,
        "column": 8
      }
    },
    {
      "name": "is_empty",
      "docstring": "\n Returns if MutableSet is empty.",
      "signature": "fn is_empty[V : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : <a href=\"moonbitlang/core/sorted_set#T\">T</a>[V]) -> Bool",
      "loc": {
        "path": "moonbitlang/core/sorted_set",
        "file": "set.mbt",
        "line": 325,
        "column": 8
      }
    },
    {
      "name": "iter",
      "docstring": "\n Returns a iterator.",
      "signature": "fn iter[V](self : <a href=\"moonbitlang/core/sorted_set#T\">T</a>[V]) -> <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[V]",
      "loc": {
        "path": "moonbitlang/core/sorted_set",
        "file": "set.mbt",
        "line": 384,
        "column": 8
      }
    },
    {
      "name": "new",
      "docstring": "\n Construct a empty set.",
      "signature": "fn new[V]() -> <a href=\"moonbitlang/core/sorted_set#T\">T</a>[V]",
      "loc": {
        "path": "moonbitlang/core/sorted_set",
        "file": "set.mbt",
        "line": 19,
        "column": 8
      }
    },
    {
      "name": "of",
      "docstring": " @alert deprecated \"Use @sorted_set.from_array instead\"",
      "signature": "fn of[V : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](array : <a href=\"moonbitlang/core/array#Array\">Array</a>[V]) -> <a href=\"moonbitlang/core/sorted_set#T\">T</a>[V]",
      "loc": {
        "path": "moonbitlang/core/sorted_set",
        "file": "set.mbt",
        "line": 40,
        "column": 8
      }
    },
    {
      "name": "range",
      "docstring": "",
      "signature": "fn range[V : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : <a href=\"moonbitlang/core/sorted_set#T\">T</a>[V], low : V, high : V) -> <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[V]",
      "loc": {
        "path": "moonbitlang/core/sorted_set",
        "file": "set.mbt",
        "line": 451,
        "column": 8
      }
    },
    {
      "name": "remove",
      "docstring": "",
      "signature": "fn remove[V : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : <a href=\"moonbitlang/core/sorted_set#T\">T</a>[V], value : V) -> Unit",
      "loc": {
        "path": "moonbitlang/core/sorted_set",
        "file": "set.mbt",
        "line": 116,
        "column": 8
      }
    },
    {
      "name": "singleton",
      "docstring": "\n Returns the one-value set containing only `value`.",
      "signature": "fn singleton[V : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](value : V) -> <a href=\"moonbitlang/core/sorted_set#T\">T</a>[V]",
      "loc": {
        "path": "moonbitlang/core/sorted_set",
        "file": "set.mbt",
        "line": 25,
        "column": 8
      }
    },
    {
      "name": "size",
      "docstring": "\n Returns the number of elements in the MutableSet.",
      "signature": "fn size[V : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : <a href=\"moonbitlang/core/sorted_set#T\">T</a>[V]) -> Int",
      "loc": {
        "path": "moonbitlang/core/sorted_set",
        "file": "set.mbt",
        "line": 331,
        "column": 8
      }
    },
    {
      "name": "subset",
      "docstring": "\n Returns if a set is a subset of another set.",
      "signature": "fn subset[V : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : <a href=\"moonbitlang/core/sorted_set#T\">T</a>[V], src : <a href=\"moonbitlang/core/sorted_set#T\">T</a>[V]) -> Bool",
      "loc": {
        "path": "moonbitlang/core/sorted_set",
        "file": "set.mbt",
        "line": 302,
        "column": 8
      }
    },
    {
      "name": "to_array",
      "docstring": "\n Converts the set to an array.",
      "signature": "fn to_array[V](self : <a href=\"moonbitlang/core/sorted_set#T\">T</a>[V]) -> <a href=\"moonbitlang/core/array#Array\">Array</a>[V]",
      "loc": {
        "path": "moonbitlang/core/sorted_set",
        "file": "set.mbt",
        "line": 361,
        "column": 8
      }
    },
    {
      "name": "union",
      "docstring": "\n Returns the union of two sets.",
      "signature": "fn union[V : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : <a href=\"moonbitlang/core/sorted_set#T\">T</a>[V], src : <a href=\"moonbitlang/core/sorted_set#T\">T</a>[V]) -> <a href=\"moonbitlang/core/sorted_set#T\">T</a>[V]",
      "loc": {
        "path": "moonbitlang/core/sorted_set",
        "file": "set.mbt",
        "line": 153,
        "column": 8
      }
    }
  ],
  "misc": []
}