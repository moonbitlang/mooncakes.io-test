{
  "kind": "package",
  "relative_path": "int",
  "module_path": "moonbitlang/core",
  "readme_content": "# `int`\n\nThe `moonbitlang/core/int` package provides essential operations on 32-bit integers.\n\n## Basic Operations\n\nThis section shows the basic operations available for integers:\n\n```moonbit\ntest \"basic int operations\" {\n  // Get absolute value\n  inspect!(@int.abs(-42), content=\"42\")\n  inspect!(@int.abs(42), content=\"42\")\n\n  // Access min/max values\n  inspect!(@int.min_value, content=\"-2147483648\")\n  inspect!(@int.max_value, content=\"2147483647\")\n}\n```\n\n## Byte Conversion\n\nThe package provides methods to convert integers to their byte representation in both big-endian and little-endian formats:\n\n```moonbit\ntest \"byte conversions\" {\n  let num = 258 // 0x0102 in hex\n\n  // Big-endian conversion (most significant byte first)\n  let be_bytes = @int.to_be_bytes(num)\n  inspect!(\n    be_bytes.to_string(),\n    content=\n      #|b\"\\x00\\x00\\x01\\x02\"\n    ,\n  )\n\n  // Little-endian conversion (least significant byte first)\n  let le_bytes = @int.to_le_bytes(num)\n  inspect!(\n    le_bytes.to_string(),\n    content=\n      #|b\"\\x02\\x01\\x00\\x00\"\n    ,\n  )\n}\n```\n\n## Method Syntax\n\nAll operations are also available using method syntax for better readability:\n\n```moonbit\ntest \"method syntax\" {\n  let n = -42\n\n  // Using method syntax\n  inspect!(n.abs(), content=\"42\")\n\n  // Byte conversions using method syntax\n  let be = n.to_be_bytes()\n  let le = n.to_le_bytes()\n  inspect!(\n    be.to_string(),\n    content=\n      #|b\"\\xff\\xff\\xff\\xd6\"\n    ,\n  )\n  inspect!(\n    le.to_string(),\n    content=\n      #|b\"\\xd6\\xff\\xff\\xff\"\n    ,\n  )\n}\n```\n\nThe package provides the foundations for 32-bit integer operations in MoonBit, essential for any numeric computation.\n",
  "package_data": "moonbitlang/core/int/package_data.json",
  "source_files": [ "int.mbt" ]
}