{
  "kind": "package",
  "relative_path": "array",
  "module_path": "moonbitlang/core",
  "readme_content": "---\nmoonbit: true\n---\n\n# Array Package Documentation\n\nThis package provides array manipulation utilities for MoonBit, including fixed-size arrays (`FixedArray`), dynamic arrays (`Array`), and array views (`ArrayView`/`View`).\n\n## Creating Arrays\n\nThere are several ways to create arrays in MoonBit:\n\n```moonbit\ntest \"array creation\" {\n  // Using array literal\n  let arr1 = [1, 2, 3]\n\n  // Creating with indices\n  let arr2 = Array::makei(3, fn(i) { i * 2 })\n\n  // Creating from iterator\n  let arr3 = Array::from_iter(\"hello\".iter())\n  inspect!(arr1, content=\"[1, 2, 3]\")\n  inspect!(arr2, content=\"[0, 2, 4]\")\n  inspect!(arr3, content=\"['h', 'e', 'l', 'l', 'o']\")\n}\n```\n\n## Array Operations\n\nCommon array operations include mapping, filtering, and folding:\n\n```moonbit\ntest \"array operations\" {\n  let nums = [1, 2, 3, 4, 5]\n\n  // Filtering out odd numbers and negating the remaining\n  let neg_evens = nums.filter_map(fn(x) {\n    if x % 2 == 0 {\n      Some(-x)\n    } else {\n      None\n    }\n  })\n\n  // Summing array\n  let sum = nums.fold(init=0, fn(acc, x) { acc + x })\n\n  // Finding last element\n  let last = nums.last()\n  inspect!(neg_evens, content=\"[-2, -4]\")\n  inspect!(sum, content=\"15\")\n  inspect!(last, content=\"Some(5)\")\n}\n```\n\n## Sorting\n\nThe package provides various sorting utilities:\n\n```moonbit\ntest \"sorting\" {\n  let arr = [3, 1, 4, 1, 5, 9, 2, 6]\n\n  // Basic sorting - creates new sorted array\n  let sorted1 = arr.copy()\n  sorted1.sort()\n  inspect!(sorted1, content=\"[1, 1, 2, 3, 4, 5, 6, 9]\")\n\n  // Custom comparison\n  let strs = [\"aa\", \"b\", \"ccc\"]\n  let sorted2 = strs\n    .copy()\n    ..sort_by(fn(a, b) { a.length().compare(b.length()) })\n  inspect!(\n    sorted2,\n    content=\n      #|[\"b\", \"aa\", \"ccc\"]\n    ,\n  )\n\n  // Sort by key\n  let pairs = [(2, \"b\"), (1, \"a\"), (3, \"c\")]\n  let sorted3 = pairs.copy()..sort_by_key(fn(p) { p.0 })\n  inspect!(\n    sorted3,\n    content=\n      #|[(1, \"a\"), (2, \"b\"), (3, \"c\")]\n    ,\n  )\n}\n```\n\n## Array Views\n\nArray views provide a lightweight way to work with array slices:\n\n```moonbit\ntest \"array views\" {\n  let arr = [1, 2, 3, 4, 5]\n  let view = arr[1:4] // View of elements 1,2,3\n\n  // Map view to new array\n  let doubled = view.map(fn(x) { x * 2 })\n\n  // Modify view in-place\n  view.map_inplace(fn(x) { x + 1 })\n  inspect!(doubled, content=\"[4, 6, 8]\")\n  inspect!(arr, content=\"[1, 3, 4, 5, 5]\")\n}\n```\n\n## Fixed Arrays\n\nFixed arrays provide immutable array operations:\n\n```moonbit\ntest \"fixed arrays\" {\n  let fixed : FixedArray[_] = [1, 2, 3]\n\n  // Concatenation creates new array\n  let combined = fixed + [4, 5]\n\n  // Check for containment\n  let has_two = fixed.contains(2)\n\n  // Check if array starts/ends with sequence\n  let starts = fixed.starts_with([1, 2])\n  let ends = fixed.ends_with([2, 3])\n  inspect!(combined, content=\"[1, 2, 3, 4, 5]\")\n  inspect!(has_two, content=\"true\")\n  inspect!(starts, content=\"true\")\n  inspect!(ends, content=\"true\")\n}\n```\n\n## Utilities\n\nAdditional array utilities for common operations:\n\n```moonbit\ntest \"utilities\" {\n  // Join string array\n  let words = [\"hello\", \"world\"]\n  let joined = words.join(\" \")\n\n  // Random shuffling\n  let nums = [1, 2, 3, 4, 5]\n  // Using deterministic `rand` function below for demonstration\n  // NOTE: When using a normal `rand` function, the actual result may vary\n  let shuffled = nums.shuffle(rand=fn(_) { 1 })\n  inspect!(joined, content=\"hello world\")\n  inspect!(shuffled, content=\"[1, 3, 4, 5, 2]\")\n}\n```\n",
  "package_data": "moonbitlang/core/array/package_data.json",
  "source_files": [
    "array.mbt", "fixedarray.mbt", "sort_by.mbt", "fixedarray_sort_by.mbt",
    "array_nonjs.mbt", "deprecated.mbt", "array_js.mbt",
    "fixedarray_sort.mbt", "utils.mbt", "blit.mbt", "view.mbt", "sort.mbt",
    "slice.mbt"
  ]
}