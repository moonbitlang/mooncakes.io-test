{
  "kind": "package",
  "relative_path": "buffer",
  "module_path": "moonbitlang/core",
  "readme_content": "---\nmoonbit: true\n---\n\n# `buffer`\n\nThe buffer package provides a flexible byte buffer implementation for efficient binary data handling and serialization.\n\n## Basic Usage\n\nCreate a new buffer and write basic data:\n\n```moonbit\ntest \"basic buffer operations\" {\n  let buf = @buffer.new()\n\n  // Write some bytes\n  buf..write_byte(b'H').write_byte(b'i')\n\n  // Check contents\n  inspect!(buf.is_empty(), content=\"false\")\n  inspect!(buf.length(), content=\"2\")\n\n  // Get contents as bytes\n  let bytes = buf.contents()\n  inspect!(\n    bytes,\n    content=\n      #|b\"\\x48\\x69\"\n    ,\n  )\n\n  // Reset buffer\n  buf.reset()\n  inspect!(buf.is_empty(), content=\"true\")\n}\n```\n\n## Writing Numbers\n\nWrite numbers in different encodings:\n\n```moonbit\ntest \"number serialization\" {\n  inspect!(\n    @buffer.new()\n    // Write integers in different byte orders\n    ..write_int_be(42)\n    ..write_int_le(42)\n    .to_bytes(),\n    content=\n      #|b\"\\x00\\x00\\x00\\x2a\\x2a\\x00\\x00\\x00\"\n    ,\n  )\n  inspect!(\n    @buffer.new()\n    // Write floating point numbers\n    ..write_float_be(3.14)\n    ..write_float_le(3.14)\n    .to_bytes(),\n    content=\n      #|b\"\\x40\\x48\\xf5\\xc3\\xc3\\xf5\\x48\\x40\"\n    ,\n  )\n  inspect!(\n    @buffer.new()\n    // Write 64-bit integers\n    ..write_int64_be(0xAABBCCDDEEL)\n    ..write_int64_le(0xAABBCCDDEEL)\n    .to_bytes(),\n    content=\n      #|b\"\\x00\\x00\\x00\\xaa\\xbb\\xcc\\xdd\\xee\\xee\\xdd\\xcc\\xbb\\xaa\\x00\\x00\\x00\"\n    ,\n  )\n  inspect!(\n    @buffer.new()\n    // Write unsigned integers\n    ..write_uint_be(0x2077U)\n    ..write_uint_le(0x2077U)\n    .to_bytes(),\n    content=\n      #|b\"\\x00\\x00\\x20\\x77\\x77\\x20\\x00\\x00\"\n    ,\n  )\n}\n```\n\n## Writing Byte Sequences\n\nWrite sequences of bytes:\n\n```moonbit\ntest \"byte sequence writing\" {\n  let buf = @buffer.new()\n\n  // Write byte array\n  let bytes = b\"Hello\"\n  buf.write_bytes(bytes)\n\n  // Write byte iterator\n  buf.write_iter(bytes.iter())\n  let contents = buf.to_bytes()\n  inspect!(\n    contents,\n    content=\n      #|b\"\\x48\\x65\\x6c\\x6c\\x6f\\x48\\x65\\x6c\\x6c\\x6f\"\n    ,\n  ) // \"Hello\" written twice\n}\n```\n\n## Writing Structured Data\n\nWrite structured data that implements Show:\n\n```moonbit\ntest \"object writing\" {\n  let buf = @buffer.new()\n\n  // Write int as object\n  buf.write_object(42)\n\n  // Contents will be \"42\" as bytes\n  let contents = buf.contents()\n  inspect!(\n    contents,\n    content=\n      #|b\"\\x34\\x00\\x32\\x00\"\n    ,\n  )\n}\n```\n\n## Size Hints\n\nProvide size hints for better performance:\n\n```moonbit\ntest \"buffer with size hint\" {\n  // Create buffer with initial capacity hint\n  let buf = @buffer.new(size_hint=1024)\n\n  // Write some data\n  for i = 0; i < 100; i = i + 1 {\n    buf.write_int_le(i)\n  }\n\n  // Each integer takes 4 bytes\n  inspect!(buf.length(), content=\"400\")\n}\n```\n\n## Buffer as Logger\n\nThe buffer implements the Logger trait for Show:\n\n```moonbit\ntest \"buffer as logger\" {\n  let buf = @buffer.new()\n  let array = [1, 2, 3]\n\n  // Use buffer to log array\n  array.output(buf)\n  let contents = buf.contents()\n  inspect!(\n    contents,\n    content=\n      #|b\"\\x5b\\x00\\x31\\x00\\x2c\\x00\\x20\\x00\\x32\\x00\\x2c\\x00\\x20\\x00\\x33\\x00\\x5d\\x00\"\n    ,\n  )\n}\n```\n\n## Converting to String/Bytes\n\nMethods for converting buffer contents:\n\n```moonbit\ntest \"buffer conversion\" {\n  let buf = @buffer.new()\n  buf.write_byte(b'a')\n  buf.write_byte(b'b')\n  buf.write_byte(b'c')\n  let bytes = buf.to_bytes()\n  inspect!(\n    bytes,\n    content=\n      #|b\"\\x61\\x62\\x63\"\n    ,\n  )\n}\n```\n\n## Binary Viewing\n\nSupport for viewing subsets of bytes:\n\n```moonbit\ntest \"byte view writing\" {\n  let buf = @buffer.new()\n  let bytes = b\"Hello World\"\n\n  // Write a view of the bytes\n  buf.write_bytesview(bytes[0:5]) // Write \"Hello\"\n  let contents = buf.to_bytes()\n  inspect!(\n    contents,\n    content=\n      #|b\"\\x48\\x65\\x6c\\x6c\\x6f\"\n    ,\n  )\n}\n```\n",
  "package_data": "moonbitlang/core/buffer/package_data.json",
  "source_files": [ "buffer.mbt" ]
}