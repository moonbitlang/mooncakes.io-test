{
  "kind": "package",
  "relative_path": "int16",
  "module_path": "moonbitlang/core",
  "readme_content": "# `int16`\n\nThis package provides a fixed-width 16-bit signed integer type.\n\n## Range and Constants\n\nThe `Int16` type represents values from -32768 to 32767 (inclusive). The package provides these boundary values as constants:\n\n```moonbit\ntest \"int16 range\" {\n  inspect!(@int16.min_value, content=\"-32768\")\n  inspect!(@int16.max_value, content=\"32767\")\n}\n```\n\n## Arithmetic Operations\n\nThe `Int16` type supports standard arithmetic operations:\n\n```moonbit\ntest \"int16 arithmetic\" {\n  let a : Int16 = 100\n  let b : Int16 = 50\n\n  // Basic arithmetic\n  inspect!(a + b, content=\"150\")\n  inspect!(a - b, content=\"50\")\n  inspect!(a * b, content=\"5000\")\n  inspect!(a / b, content=\"2\")\n\n  // Overflow behavior\n  let max = @int16.max_value\n  let min = @int16.min_value\n  inspect!(max + 1, content=\"-32768\") // Wraps around to min_value\n  inspect!(min - 1, content=\"32767\") // Wraps around to max_value\n}\n```\n\n## Bitwise Operations\n\n`Int16` supports standard bitwise operations:\n\n```moonbit\ntest \"int16 bitwise\" {\n  let a : Int16 = 0b1100\n  let b : Int16 = 0b1010\n\n  // Bitwise AND, OR, XOR\n  inspect!(a & b, content=\"8\") // 0b1000\n  inspect!(a | b, content=\"14\") // 0b1110\n  inspect!(a ^ b, content=\"6\") // 0b0110\n\n  // Bit shifts\n  let x : Int16 = 8\n  inspect!(x << 1, content=\"16\") // Left shift\n  inspect!(x >> 1, content=\"4\") // Right shift\n}\n```\n\n## Comparison Operations\n\n`Int16` implements the `Compare` trait for total ordering:\n\n```moonbit\ntest \"int16 comparison\" {\n  let a : Int16 = 100\n  let b : Int16 = 50\n  let c : Int16 = 100\n\n  // Equality\n  inspect!(a == b, content=\"false\")\n  inspect!(a == c, content=\"true\")\n\n  // Ordering\n  inspect!(a > b, content=\"true\")\n  inspect!(b < c, content=\"true\")\n\n  // Compare function returns -1, 0, or 1\n  inspect!(a.compare(b), content=\"1\")\n  inspect!(b.compare(c), content=\"-1\")\n  inspect!(a.compare(c), content=\"0\")\n}\n```\n\n## Default Value\n\n`Int16` implements the `Default` trait, with 0 as its default value:\n\n```moonbit\ntest \"int16 default\" {\n  let x = Int16::default()\n  inspect!(x, content=\"0\")\n}\n```\n\n## Type Coercion and Conversion\n\nInteger literals can be coerced to `Int16` when the type is explicitly specified:\n\n```moonbit\ntest \"int16 coercion\" {\n  let a : Int16 = 42 // Coercion from integer literal\n  let b : Int16 = 0xFF // Hexadecimal literal\n  let c : Int16 = 0b1111 // Binary literal\n  inspect!(a, content=\"42\")\n  inspect!(b, content=\"255\")\n  inspect!(c, content=\"15\")\n}\n```\n",
  "package_data": "moonbitlang/core/int16/package_data.json",
  "source_files": [ "int16.mbt" ]
}