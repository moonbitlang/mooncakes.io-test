{
  "kind": "package",
  "relative_path": "ref",
  "module_path": "moonbitlang/core",
  "readme_content": "# `ref`\n\nThis package provides functionality for working with mutable references, allowing you to create sharable mutable values that can be modified safely.\n\n## Creating and Accessing References\n\nReferences can be created using `@ref.new()`. The reference value can be accessed through the `val` field:\n\n```moonbit\ntest \"creating and accessing refs\" {\n  let r1 = @ref.new(42)\n  inspect!(r1.val, content=\"42\")\n}\n```\n\n## Updating Reference Values\n\nThe `update` function allows modifying the contained value using a transformation function:\n\n```moonbit\ntest \"updating refs\" {\n  let counter = @ref.new(0)\n  @ref.update(counter, fn(x) { x + 1 })\n  inspect!(counter.val, content=\"1\")\n  counter.update(fn(x) { x * 2 })\n  inspect!(counter.val, content=\"2\")\n}\n```\n\n## Mapping References\n\nThe `map` function transforms a reference while preserving the reference wrapper:\n\n```moonbit\ntest \"mapping refs\" {\n  let num = @ref.new(10)\n  let doubled = @ref.map(num, fn(x) { x * 2 })\n  inspect!(doubled.val, content=\"20\")\n  let squared = num.map(fn(x) { x * x })\n  inspect!(squared.val, content=\"100\")\n}\n```\n\n## Swapping Reference Values\n\nYou can exchange the values of two references using the `swap` function:\n\n```moonbit\ntest \"swapping refs\" {\n  let r1 = @ref.new(\"first\")\n  let r2 = @ref.new(\"second\")\n  @ref.swap(r1, r2)\n  inspect!(r1.val, content=\"second\")\n  inspect!(r2.val, content=\"first\")\n}\n```\n\n## Temporary Value Protection\n\nThe `protect` function temporarily sets a reference to a value and restores it after executing a block:\n\n```moonbit\ntest \"protected updates\" {\n  let state = @ref.new(100)\n  let mut middle = 0\n  let result = @ref.protect(state, 50, fn() {\n    middle = state.val\n    42\n  })\n  inspect!(middle, content=\"50\")\n  inspect!(result, content=\"42\")\n  inspect!(state.val, content=\"100\")\n}\n```\n\nThis is useful for temporarily modifying state that needs to be restored afterwards.\n",
  "package_data": "moonbitlang/core/ref/package_data.json",
  "source_files": [ "ref.mbt" ]
}