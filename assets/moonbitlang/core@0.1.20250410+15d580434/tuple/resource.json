{
  "kind": "package",
  "relative_path": "tuple",
  "module_path": "moonbitlang/core",
  "readme_content": "---\nmoonbit : true\n---\n\n# Tuple\n\nTuple is a fixed-size collection of elements of different types. It is a lightweight data structure that can be used to store multiple values in a single variable. This sub-package introduces utils for binary tuples.\n\n# Usage\n\n## Create\n\nCreate a new tuple by `pair` or using the tuple literal syntax.\n\n```moonbit\ntest {\n    let _tuple = @tuple.pair(1, 2)\n    let _tuple2 = (1, 2)\n}\n```\n\n## Access\n\nYou can access the elements of the tuple using the `fst` and `snd` methods (Shortly use dot access).\n\n```moonbit\ntest {\n    let tuple = (1, 2)\n    assert_eq!(tuple.0, 1)\n    assert_eq!(tuple.1, 2)\n    assert_eq!(@tuple.fst(tuple), 1)\n    assert_eq!(@tuple.snd(tuple), 2)\n}\n```\n\n## Transformation\n\nYou can transform the tuple using the `map_fst` and `map_snd` method, which will apply the function to the first and second element of the tuple respectively.\n\n```moonbit  \ntest {\n    let tuple = (1, 2)\n    let _tuple2 = @tuple.map_fst(fn(x) { x + 1 }, tuple) // tuple2 = (2, 2)\n    let _tuple3 = @tuple.map_snd(fn(x) { x + 1 }, tuple) // tuple3 = (1, 3)\n}\n```\n\nOr you can use the `map_both` method to apply the function to both elements of the tuple.\n\n```moonbit\ntest {\n    let tuple = (1, 2)\n    let _mapped = @tuple.map_both(\n        fn(x : Int) -> Int { x + 1 },\n        fn(x : Int) -> Int { x - 1 },\n        tuple\n    ) // mapped = (2, 1)\n}\n```\n\n## Conversion\nSwap the elements of the tuple using the `swap` method.\n\n```moonbit\ntest {\n    let tuple = (1, 2)\n    let _swapped = @tuple.swap(tuple) // swapped = (2, 1)\n}\n```\n\n## Currying\nMoonbit provides a currying method for the tuple. You can use the `curry` method to convert a function into a curried function.\n\n```moonbit\ntest {\n    let add = fn(a, b) { a + b }\n    let curried_add = @tuple.curry(add)\n    let _result = curried_add(1)(2) // result = 3\n}\n```\n\nThe dual of the `curry` method is the `uncurry` method, which converts a curried function back to a normal function.\n\n```moonbit\ntest {\n    let add = fn(a) { fn(b) { a + b } }\n    let uncurried_add = @tuple.uncurry(add)\n    let _result = uncurried_add(1, 2) // result = 3\n}\n```\n\n",
  "package_data": "moonbitlang/core/tuple/package_data.json",
  "source_files": [ "tuple.mbt", "tuple_arbitrary.mbt" ]
}