{
  "kind": "package",
  "relative_path": "hashmap",
  "module_path": "moonbitlang/core",
  "readme_content": "---\nmoonbit : true\n---\n\n# HashMap\n\nA mutable hash map based on a Robin Hood hash table.\n\n# Usage\n\n## Create\n\nYou can create an empty map using `new()` or construct it using `from_array()`.\n\n```moonbit\ntest {\n  let _map2 : @hashmap.T[String, Int] = @hashmap.new()\n}\n```\n\n## Set & Get\n\nYou can use `set()` to add a key-value pair to the map, and use `get()` to get a value.\n\n```moonbit\ntest {\n  let map : @hashmap.T[String, Int] = @hashmap.new()\n  map.set(\"a\", 1)\n  assert_eq!(map.get(\"a\"), Some(1))\n  assert_eq!(map.get_or_default(\"a\", 0), 1)\n  assert_eq!(map.get_or_default(\"b\", 0), 0)\n  map.remove(\"a\")\n  assert_eq!(map.contains(\"a\"), false)\n}\n```\n\n## Remove\n\nYou can use `remove()` to remove a key-value pair.\n\n```moonbit\ntest {\n    let map = @hashmap.of([(\"a\", 1), (\"b\", 2), (\"c\", 3)])\n    map.remove(\"a\") |> ignore\n    assert_eq!(map.to_array(), [(\"c\", 3), (\"b\", 2)])\n}\n```\n\n## Contains\n\nYou can use `contains()` to check whether a key exists.\n\n```moonbit\ntest {\n    let map = @hashmap.of([(\"a\", 1), (\"b\", 2), (\"c\", 3)])\n    assert_eq!(map.contains(\"a\"), true)\n    assert_eq!(map.contains(\"d\"), false)\n}    \n```\n\n## Size & Capacity\n\nYou can use `size()` to get the number of key-value pairs in the map, or `capacity()` to get the current capacity.\n\n```moonbit\ntest {\n    let map = @hashmap.of([(\"a\", 1), (\"b\", 2), (\"c\", 3)])\n    assert_eq!(map.size(), 3)\n    assert_eq!(map.capacity(), 8)\n}    \n```\n\nSimilarly, you can use `is_empty()` to check whether the map is empty.\n\n```moonbit\ntest {\n    let map: @hashmap.T[String, Int] = @hashmap.new()\n    assert_eq!(map.is_empty(), true)\n}\n```\n\n## Clear\n\nYou can use `clear` to remove all key-value pairs from the map, but the allocated memory will not change.\n\n```moonbit\ntest {\n   let map = @hashmap.of([(\"a\", 1), (\"b\", 2), (\"c\", 3)])\n    map.clear()\n    assert_eq!(map.is_empty(), true)\n}\n```\n\n## Iteration\n\nYou can use `each()` or `eachi()` to iterate through all key-value pairs.\n\n```moonbit\ntest {\n   let map = @hashmap.of([(\"a\", 1), (\"b\", 2), (\"c\", 3)])\n   let arr = []\n    map.each(fn(k, v) { arr.push((k, v)) })\n    let arr2 = []\n    map.eachi(fn(i, k, v) { arr2.push((i, k, v)) })\n}\n```\n\nOr use `iter()` to get an iterator of hashmap.\n\n```moonbit\ntest {\n  let map = @hashmap.of([(\"a\", 1), (\"b\", 2), (\"c\", 3)])\n  let _iter = map.iter()\n}\n```\n",
  "package_data": "moonbitlang/core/hashmap/package_data.json",
  "source_files": [
    "json.mbt", "deprecated.mbt", "utils.mbt", "types.mbt", "hashmap.mbt"
  ]
}