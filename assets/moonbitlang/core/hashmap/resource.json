{
  "kind": "package",
  "relative_path": "hashmap",
  "module_path": "moonbitlang/core",
  "readme_content": "# HashMap\n\nA mutable hash map based on a Robin Hood hash table.\n\n# Usage\n\n## Create\n\nYou can create an empty map using `new()` or construct it using `from_array()`.\n\n```moonbit\nlet map1 = @hashmap.of([1, 2, 3, 4, 5])\nlet map2 : @hashmap.T[String, Int] = @hashmap.new()\n```\n\n## Set & Get\n\nYou can use `set()` to add a key-value pair to the map, and use `get()` to get a value.\n\n```moonbit\nlet map : HashMap[String, Int] = HashMap::new()\nmap.set(\"a\", 1)\nprintln(map.get(\"a\")) // Some(1)\nprintln(map.get_or_default(\"a\", 0)) // 1\nprintln(map.get_or_default(\"b\", 0)) // 0\n```\n\n## Remove\n\nYou can use `remove()` to remove a key-value pair.\n\n```moonbit\nlet map = @hashmap.of([(\"a\", 1), (\"b\", 2), (\"c\", 3)])\nmap.remove(\"a\")\nprintln(map) // of([(\"c\", 3), (\"b\", 2)])\n```\n\n## Contains\n\nYou can use `contains()` to check whether a key exists.\n\n```moonbit\nlet map = @hashmap.of([(\"a\", 1), (\"b\", 2), (\"c\", 3)])\nprintln(map.contains(\"a\")) // true\nprintln(map.contains(\"d\")) // false\n```\n\n## Size & Capacity\n\nYou can use `size()` to get the number of key-value pairs in the map, or `capacity()` to get the current capacity.\n\n```moonbit\nlet map = @hashmap.of([(\"a\", 1), (\"b\", 2), (\"c\", 3)])\nprintln(map.size()) // 3\nprintln(map.capacity()) // 8\n```\n\nSimilarly, you can use `is_empty()` to check whether the map is empty.\n\n```moonbit\nlet map = @hashmap.new()\nprintln(map.is_empty()) // true\n```\n\n## Clear\n\nYou can use `clear` to remove all key-value pairs from the map, but the allocated memory will not change.\n\n```moonbit\nlet map = @hashmap.of([(\"a\", 1), (\"b\", 2), (\"c\", 3)])\nmap.clear()\nprintln(map.is_empty()) // true\n```\n\n## Iteration\n\nYou can use `each()` or `eachi()` to iterate through all key-value pairs.\n\n```moonbit\nlet map = @hashmap.of([(\"a\", 1), (\"b\", 2), (\"c\", 3)])\nmap.each(fn(k, v) { println(\"key: {k}, value:\\{v}\") })\nmap.eachi(fn(i, k, v) { println(\"index:\\{i}, key:\\{k}, value:\\{v}\") })\n```\n\nOr use `iter()` to get an iterator of hashmap.\n\n```moonbit\nlet map = @hashmap.of([(\"a\", 1), (\"b\", 2), (\"c\", 3)])\nprintln(map.iter())\n```\n",
  "package_data": "moonbitlang/core/hashmap/package_data.json",
  "source_files": [
    "deprecated.mbt", "hashmap.mbt", "types.mbt", "utils.mbt"
  ]
}