{
  "kind": "package",
  "relative_path": "sorted_set",
  "module_path": "moonbitlang/core",
  "readme_content": "# Sorted Set\n\nA mutable set backed by a red-black tree.\n\n# Usage\n\n## Create\n\nYou can create an empty MutableSet or a MutableSet from other containers.\n\n```moonbit\nlet set1 : @sorted_set.T[Int] = @sorted_set.new()\nlet set2 = @sorted_set.singleton(1)\nlet set5 = @sorted_set.of([1])\nlet set4 = @sorted_set.from_array([1])\n```\n### Container Operations\n\nAdd an element to the MutableSet in place.\n\n```moonbit\nlet set = @sorted_set.of([1, 2, 3, 4])\nset.add(5) // ()\nset.to_string() // of([1, 2, 3, 4, 5])\n```\n\nRemove an element from the MutableSet in place.\n\n```moonbit\nlet set = @sorted_set.of([3, 8, 1]) \nset.remove(8) // () \nset.to_string() // of([1, 3])\n```\n\nWhether an element is in the set.\n\n```moonbit\nlet set = @sorted_set.of([1, 2, 3, 4])\nset.contains(1) // true\nset.contains(5) // false\n```\n\nIterates over the elements in the set.\n\n```moonbit\n@sorted_set.of([1, 2, 3, 4]).each(print) // output: 1234\n```\n\nDelete all elements of the set that filter returns false. It is done in place.\n\n```moonbit\nlet set = @sorted_set.of([1, 2, 3, 4, 5, 6])\nset.filter(fn(v) { v % 2 == 0}) // ()\nset.to_string() // of([2, 4, 6])\n```\n\nGet the size of the set.\n\n```moonbit\n@sorted_set.of([1, 2, 3, 4]).size() // 4\n```\n\nWhether the set is empty.\n\n```moonbit\n@sorted_set.new().is_empty() // true\n```\n\n### Set Operations\n\nUnion, intersection and difference of two sets. They return a new set that does not overlap with the original sets in memory.\n\n```moonbit\nlet set1 = @sorted_set.of([3, 4, 5])\nlet set2 = @sorted_set.of([4, 5, 6])\nset1.union(set2) // of([3, 4, 5, 6])\nset1.inter(set2) // of([4, 5])\nset1.diff(set2) // of([3])\n```\n\nDetermine the inclusion and separation relationship between two sets.\n\n```moonbit\n@sorted_set.of([1, 2, 3]).subset(of([7, 2, 9, 4, 5, 6, 3, 8, 1])) // true\n@sorted_set.of([1, 2, 3]).disjoint(of([4, 5, 6])) // true\n```\n\n### Stringify\n\nMutableSet implements to_string (i.e. Show trait), which allows you to directly output it.\n\n```moonbit\nprintln(@sorted_set.of([1, 2, 3])) // output of([1, 2, 3]))\n@sorted_set.of([1, 2, 3]).to_string() // \"MutableSet::[1, 2, 3]\"\n```\n\n",
  "package_data": "moonbitlang/core/sorted_set/package_data.json",
  "source_files": [ "deprecated.mbt", "set.mbt", "types.mbt", "utils.mbt" ]
}