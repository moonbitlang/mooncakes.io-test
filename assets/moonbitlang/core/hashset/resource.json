{
  "kind": "package",
  "relative_path": "hashset",
  "module_path": "moonbitlang/core",
  "readme_content": "# HashSet\n\nA mutable hash set based on a Robin Hood hash table.\n\n# Usage\n\n## Create\n\nYou can create an empty set using `new()` or construct it using `from_array()`.\n\n```moonbit\nlet set1 = @hashset.of([1, 2, 3, 4, 5])\nlet set2 : @hashset.T[String] = @hashset.new()\n```\n\n## Insert & Contain\n\nYou can use `insert()` to add a key to the set, and `contains()` to check whether a key exists.\n\n```moonbit\nlet set : @hashset.T[String] = @hashset.new()\nset.insert(\"a\")\nprintln(set.contains(\"a\")) // true\n```\n\n## Remove\n\nYou can use `remove()` to remove a key.\n\n```moonbit\nlet set = @hashset.of([(\"a\"), (\"b\"), (\"c\")])\nset.remove(\"a\")\nprintln(set.contains(\"a\")) // false\n```\n\n## Size & Capacity\n\nYou can use `size()` to get the number of keys in the set, or `capacity()` to get the current capacity.\n\n```moonbit\nlet set = @hashset.of([(\"a\"), (\"b\"), (\"c\")])\nprintln(set.size()) // 3\nprintln(set.capacity()) // 8\n```\n\nSimilarly, you can use `is_empty()` to check whether the set is empty.\n\n```moonbit\nlet set = @hashset.new()\nprintln(set.is_empty()) // true\n```\n\n## Clear\n\nYou can use `clear` to remove all keys from the set, but the allocated memory will not change.\n\n```moonbit\nlet set = @hashset.of([(\"a\"), (\"b\"), (\"c\")])\nset.clear()\nprintln(set.is_empty()) // true\n```\n\n## Iteration\n\nYou can use `each()` or `eachi()` to iterate through all keys.\n\n```moonbit\nlet set = @hashset.of([(\"a\"), (\"b\"), (\"c\")])\nset.each(fn(k) { println(\"element: \\{k}\") })\nset.eachi(fn(i, k) { println(\"index: \\{i}, element:\\{k}\") })\n```\n\n## Set Operations\n\nYou can use `union()`, `intersection()`, `difference()` and `symmetric_difference()` to perform set operations.\n\n```moonbit\nlet m1 = @hashset.of([\"a\", \"b\", \"c\"])\nlet m2 = @hashset.of([\"b\", \"c\", \"d\"])\nprintln(m1.union(m2)) // of([\"a\", \"b\", \"c\", \"d\"])\nprintln(m1.intersection(m2)) // of([\"b\", \"c\"])\nprintln(m1.difference(m2)) // of([\"a\"])\nprintln(m1.symmetric_difference(m2)) // of([\"a\", \"d\"])\n```\n\n",
  "package_data": "moonbitlang/core/hashset/package_data.json",
  "source_files": [ "deprecated.mbt", "hashset.mbt", "types.mbt" ]
}