{
  "kind": "package",
  "relative_path": "tuple",
  "module_path": "moonbitlang/core",
  "readme_content": "# Tuple\n\nTuple is a fixed-size collection of elements of different types. It is a lightweight data structure that can be used to store multiple values in a single variable. This sub-package introduces utils for binary tuples.\n\n# Usage\n\n## Create\n\nCreate a new tuple by `pair` or using the tuple literal syntax.\n\n```moonbit\nlet tuple = @tuple.pair(1, 2)\nlet tuple2 = (1, 2)\n```\n\n## Access\n\nYou can access the elements of the tuple using the `fst` and `snd` methods (Shortly use dot access).\n\n```moonbit\nlet tuple = (1, 2)\n@tuple.fst(tuple) // 1\n@tuple.snd(tuple) // 2\ntuple.0 // 1\ntuple.1 // 2\n```\n\n## Transformation\n\nYou can transform the tuple using the `map_fst` and `map_snd` method, which will apply the function to the first and second element of the tuple respectively.\n\n```moonbit\nlet tuple = (1, 2)\nlet tuple2 = @tuple.map_fst(tuple, fn(x) { x + 1 }) // tuple2 = (2, 2)\nlet tuple3 = @tuple.map_snd(tuple, fn(x) { x + 1 }) // tuple3 = (1, 3)\n```\n\nOr you can use the `map_both` method to apply the function to both elements of the tuple.\n\n```moonbit\nlet tuple = (1, 2)\nlet mapped = @tuple.map_both(\n    fn(x : Int) -> Int { x + 1 },\n    fn(x : Int) -> Int { x - 1 },\n    tuple\n) // mapped = (2, 1)\n```\n\n## Conversion\nSwap the elements of the tuple using the `swap` method.\n\n```moonbit\nlet tuple = (1, 2)\nlet swapped = @tuple.swap(tuple) // swapped = (2, 1)\n```\n\n## Currying\nMoonbit provides a currying method for the tuple. You can use the `curry` method to convert a function into a curried function.\n\n```moonbit\nlet add = fn(a, b) { a + b }\nlet curried_add = @tuple.curry(add)\nlet result = curried_add(1)(2) // result = 3\n```\n\nThe dual of the `curry` method is the `uncurry` method, which converts a curried function back to a normal function.\n\n```moonbit\nlet add = fn(a) { fn(b) { a + b } }\nlet uncurried_add = @tuple.uncurry(add)\nlet result = uncurried_add(1, 2) // result = 3\n```\n\n",
  "package_data": "moonbitlang/core/tuple/package_data.json",
  "source_files": [ "tuple.mbt", "tuple_arbitrary.mbt" ]
}