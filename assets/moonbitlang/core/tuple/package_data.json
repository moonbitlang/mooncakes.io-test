{
  "name": "moonbitlang/core/tuple",
  "traits": [],
  "types": [],
  "typealias": [],
  "values": [
    {
      "name": "curry",
      "docstring": "\n Curry a function.\n\n # Example\n ```\n let add = fn(x : Int, y : Int) -> Int { x + y }\n let curried_add = @tuple.curry(add)\n assert_eq!(curried_add(1)(2), 3)\n ```",
      "signature": "fn curry[T, U, V](f : (T, U) -> V) -> ((T) -> ((U) -> V))",
      "loc": {
        "path": "moonbitlang/core/tuple",
        "file": "tuple.mbt",
        "line": 118,
        "column": 8
      }
    },
    {
      "name": "fst",
      "docstring": "\n Get the first element of a tuple.\n\n # Example\n ```\n let tuple = (1, 2)\n let x = @tuple.fst(tuple)\n assert_eq!(x, 1)\n ```",
      "signature": "fn fst[T, U](tuple : (T, U)) -> T",
      "loc": {
        "path": "moonbitlang/core/tuple",
        "file": "tuple.mbt",
        "line": 36,
        "column": 8
      }
    },
    {
      "name": "map_both",
      "docstring": "\n Map a function over both elements of a tuple.\n\n # Example\n ```\n let tuple = (1, 2)\n let mapped = @tuple.map_both(fn(x : Int) -> Int { x + 1 }, fn(x : Int) -> Int { x - 1 }, tuple)\n assert_eq!(mapped, (2, 1))\n ```",
      "signature": "fn map_both[T, U, V, W](f : (T) -> U, g : (V) -> W, tuple : (T, V)) -> (U, W)",
      "loc": {
        "path": "moonbitlang/core/tuple",
        "file": "tuple.mbt",
        "line": 88,
        "column": 8
      }
    },
    {
      "name": "map_fst",
      "docstring": "\n Map a function over the first element of a tuple.\n\n # Example\n ```\n let tuple = (1, 2)\n let mapped = @tuple.map_fst(fn(x : Int) -> Int { x + 1 }, tuple)\n assert_eq!(mapped, (2, 2))\n ```",
      "signature": "fn map_fst[T, U, V](f : (T) -> U, tuple : (T, V)) -> (U, V)",
      "loc": {
        "path": "moonbitlang/core/tuple",
        "file": "tuple.mbt",
        "line": 62,
        "column": 8
      }
    },
    {
      "name": "map_snd",
      "docstring": "\n Map a function over the second element of a tuple.\n\n # Example\n ```\n let tuple = (1, 2)\n let mapped = @tuple.map_snd(fn(x : Int) -> Int { x + 1 }, tuple)\n assert_eq!(mapped, (1, 3))\n ```",
      "signature": "fn map_snd[T, U, V](f : (T) -> U, tuple : (V, T)) -> (V, U)",
      "loc": {
        "path": "moonbitlang/core/tuple",
        "file": "tuple.mbt",
        "line": 75,
        "column": 8
      }
    },
    {
      "name": "pair",
      "docstring": "\n Create a tuple with two elements.\n\n # Example\n ```\n let tuple = @tuple.pair(1, 2)\n assert_eq!(tuple, (1, 2))\n ```",
      "signature": "fn pair[T, U](x : T, y : U) -> (T, U)",
      "loc": {
        "path": "moonbitlang/core/tuple",
        "file": "tuple.mbt",
        "line": 23,
        "column": 8
      }
    },
    {
      "name": "snd",
      "docstring": "\n Get the second element of a tuple.\n\n # Example\n ```\n let tuple = (1, 2)\n let y = @tuple.snd(tuple)\n assert_eq!(y, 2)\n ```",
      "signature": "fn snd[T, U](tuple : (T, U)) -> U",
      "loc": {
        "path": "moonbitlang/core/tuple",
        "file": "tuple.mbt",
        "line": 49,
        "column": 8
      }
    },
    {
      "name": "swap",
      "docstring": "\n Swap the elements of a tuple.\n\n # Example\n ```\n let tuple = (1, 2)\n let swapped = @tuple.swap(tuple)\n assert_eq!(swapped, (2, 1))\n ```",
      "signature": "fn swap[T, U](tuple : (T, U)) -> (U, T)",
      "loc": {
        "path": "moonbitlang/core/tuple",
        "file": "tuple.mbt",
        "line": 105,
        "column": 8
      }
    },
    {
      "name": "uncurry",
      "docstring": "\n Uncurry a function.\n\n # Example\n ```\n let add = fn(x : Int) -> (Int) -> Int { fn(y : Int) -> Int { x + y } }\n let uncurried_add = @tuple.uncurry(add)\n assert_eq!(uncurried_add(1, 2), 3)\n ```",
      "signature": "fn uncurry[T, U, V](f : (T) -> ((U) -> V)) -> ((T, U) -> V)",
      "loc": {
        "path": "moonbitlang/core/tuple",
        "file": "tuple.mbt",
        "line": 131,
        "column": 8
      }
    }
  ],
  "misc": [
    {
      "name": "Tuple7",
      "impls": [
        {
          "self": {
            "kind": "constr",
            "constructor": {
              "name": "Tuple7",
              "path": "moonbitlang/core/tuple"
            },
            "arguments": [
              { "kind": "param", "name": "A" },
              { "kind": "param", "name": "B" },
              { "kind": "param", "name": "C" },
              { "kind": "param", "name": "D" },
              { "kind": "param", "name": "E" },
              { "kind": "param", "name": "F" },
              { "kind": "param", "name": "G" }
            ]
          },
          "trait": {
            "name": "Arbitrary",
            "path": "moonbitlang/core/quickcheck"
          },
          "methods": [
            {
              "name": "arbitrary",
              "docstring": "",
              "signature": "fn arbitrary[A : <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a>, B : <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a>, C : <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a>, D : <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a>, E : <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a>, F : <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a>, G : <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a>](size : Int, r0 : <a href=\"moonbitlang/core/quickcheck/splitmix#RandomState\">@moonbitlang/core/quickcheck/splitmix.RandomState</a>) -> (A, B, C, D, E, F, G)",
              "loc": {
                "path": "moonbitlang/core/tuple",
                "file": "tuple_arbitrary.mbt",
                "line": 86,
                "column": 8
              }
            }
          ]
        }
      ],
      "methods": []
    },
    {
      "name": "Tuple6",
      "impls": [
        {
          "self": {
            "kind": "constr",
            "constructor": {
              "name": "Tuple6",
              "path": "moonbitlang/core/tuple"
            },
            "arguments": [
              { "kind": "param", "name": "A" },
              { "kind": "param", "name": "B" },
              { "kind": "param", "name": "C" },
              { "kind": "param", "name": "D" },
              { "kind": "param", "name": "E" },
              { "kind": "param", "name": "F" }
            ]
          },
          "trait": {
            "name": "Arbitrary",
            "path": "moonbitlang/core/quickcheck"
          },
          "methods": [
            {
              "name": "arbitrary",
              "docstring": "",
              "signature": "fn arbitrary[A : <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a>, B : <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a>, C : <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a>, D : <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a>, E : <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a>, F : <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a>](size : Int, r0 : <a href=\"moonbitlang/core/quickcheck/splitmix#RandomState\">@moonbitlang/core/quickcheck/splitmix.RandomState</a>) -> (A, B, C, D, E, F)",
              "loc": {
                "path": "moonbitlang/core/tuple",
                "file": "tuple_arbitrary.mbt",
                "line": 71,
                "column": 8
              }
            }
          ]
        }
      ],
      "methods": []
    },
    {
      "name": "Tuple5",
      "impls": [
        {
          "self": {
            "kind": "constr",
            "constructor": {
              "name": "Tuple5",
              "path": "moonbitlang/core/tuple"
            },
            "arguments": [
              { "kind": "param", "name": "A" },
              { "kind": "param", "name": "B" },
              { "kind": "param", "name": "C" },
              { "kind": "param", "name": "D" },
              { "kind": "param", "name": "E" }
            ]
          },
          "trait": {
            "name": "Arbitrary",
            "path": "moonbitlang/core/quickcheck"
          },
          "methods": [
            {
              "name": "arbitrary",
              "docstring": "",
              "signature": "fn arbitrary[A : <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a>, B : <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a>, C : <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a>, D : <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a>, E : <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a>](size : Int, r0 : <a href=\"moonbitlang/core/quickcheck/splitmix#RandomState\">@moonbitlang/core/quickcheck/splitmix.RandomState</a>) -> (A, B, C, D, E)",
              "loc": {
                "path": "moonbitlang/core/tuple",
                "file": "tuple_arbitrary.mbt",
                "line": 57,
                "column": 8
              }
            }
          ]
        }
      ],
      "methods": []
    },
    {
      "name": "Tuple4",
      "impls": [
        {
          "self": {
            "kind": "constr",
            "constructor": {
              "name": "Tuple4",
              "path": "moonbitlang/core/tuple"
            },
            "arguments": [
              { "kind": "param", "name": "A" },
              { "kind": "param", "name": "B" },
              { "kind": "param", "name": "C" },
              { "kind": "param", "name": "D" }
            ]
          },
          "trait": {
            "name": "Arbitrary",
            "path": "moonbitlang/core/quickcheck"
          },
          "methods": [
            {
              "name": "arbitrary",
              "docstring": "",
              "signature": "fn arbitrary[A : <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a>, B : <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a>, C : <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a>, D : <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a>](size : Int, r0 : <a href=\"moonbitlang/core/quickcheck/splitmix#RandomState\">@moonbitlang/core/quickcheck/splitmix.RandomState</a>) -> (A, B, C, D)",
              "loc": {
                "path": "moonbitlang/core/tuple",
                "file": "tuple_arbitrary.mbt",
                "line": 44,
                "column": 8
              }
            }
          ]
        }
      ],
      "methods": []
    },
    {
      "name": "Tuple3",
      "impls": [
        {
          "self": {
            "kind": "constr",
            "constructor": {
              "name": "Tuple3",
              "path": "moonbitlang/core/tuple"
            },
            "arguments": [
              { "kind": "param", "name": "A" },
              { "kind": "param", "name": "B" },
              { "kind": "param", "name": "C" }
            ]
          },
          "trait": {
            "name": "Arbitrary",
            "path": "moonbitlang/core/quickcheck"
          },
          "methods": [
            {
              "name": "arbitrary",
              "docstring": "",
              "signature": "fn arbitrary[A : <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a>, B : <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a>, C : <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a>](size : Int, r0 : <a href=\"moonbitlang/core/quickcheck/splitmix#RandomState\">@moonbitlang/core/quickcheck/splitmix.RandomState</a>) -> (A, B, C)",
              "loc": {
                "path": "moonbitlang/core/tuple",
                "file": "tuple_arbitrary.mbt",
                "line": 32,
                "column": 8
              }
            }
          ]
        }
      ],
      "methods": []
    },
    {
      "name": "Tuple2",
      "impls": [
        {
          "self": {
            "kind": "constr",
            "constructor": {
              "name": "Tuple2",
              "path": "moonbitlang/core/tuple"
            },
            "arguments": [
              { "kind": "param", "name": "A" },
              { "kind": "param", "name": "B" }
            ]
          },
          "trait": {
            "name": "Arbitrary",
            "path": "moonbitlang/core/quickcheck"
          },
          "methods": [
            {
              "name": "arbitrary",
              "docstring": "",
              "signature": "fn arbitrary[A : <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a>, B : <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a>](size : Int, r0 : <a href=\"moonbitlang/core/quickcheck/splitmix#RandomState\">@moonbitlang/core/quickcheck/splitmix.RandomState</a>) -> (A, B)",
              "loc": {
                "path": "moonbitlang/core/tuple",
                "file": "tuple_arbitrary.mbt",
                "line": 19,
                "column": 8
              }
            }
          ]
        }
      ],
      "methods": []
    }
  ]
}