{
  "name": "moonbitlang/core/queue",
  "traits": [],
  "types": [
    {
      "name": "T",
      "docstring": "",
      "signature": "type T",
      "loc": {
        "path": "moonbitlang/core/queue",
        "file": "types.mbt",
        "line": 28,
        "column": 8
      },
      "methods": [
        {
          "name": "clear",
          "docstring": "\n Clears the queue.\n\n # Example\n ```\n let queue : @queue.T[Int] = @queue.of([1, 2, 3, 4])\n queue.clear()\n ```",
          "signature": "fn <a href=\"moonbitlang/core/queue#T\">T</a>::clear[A](self : <a href=\"moonbitlang/core/queue#T\">T</a>[A]) -> Unit",
          "loc": {
            "path": "moonbitlang/core/queue",
            "file": "queue.mbt",
            "line": 84,
            "column": 8
          }
        },
        {
          "name": "copy",
          "docstring": "\n Returns a copy of the queue.\n\n # Example\n ```\n let queue : @queue.T[Int] = @queue.of([1, 2, 3, 4])\n let queue2 : @queue.T[Int] = queue.copy()\n assert_eq!(queue2.length(), 4)\n ```",
          "signature": "fn <a href=\"moonbitlang/core/queue#T\">T</a>::copy[A](self : <a href=\"moonbitlang/core/queue#T\">T</a>[A]) -> <a href=\"moonbitlang/core/queue#T\">T</a>[A]",
          "loc": {
            "path": "moonbitlang/core/queue",
            "file": "queue.mbt",
            "line": 286,
            "column": 8
          }
        },
        {
          "name": "each",
          "docstring": "\n Iterates over the queue.\n\n # Example\n ```\n let queue : @queue.T[Int] = @queue.of([1, 2, 3, 4])\n let mut sum = 0\n queue.each(fn(x) { sum = sum + x })\n ```",
          "signature": "fn <a href=\"moonbitlang/core/queue#T\">T</a>::each[A](self : <a href=\"moonbitlang/core/queue#T\">T</a>[A], f : (A) -> Unit) -> Unit",
          "loc": {
            "path": "moonbitlang/core/queue",
            "file": "queue.mbt",
            "line": 232,
            "column": 8
          }
        },
        {
          "name": "eachi",
          "docstring": "\n Iterates over the queue with index.\n\n # Example\n ```\n let queue : @queue.T[Int] = @queue.of([1, 2, 3, 4])\n let mut sum = 0\n queue.eachi(fn(x, i) { sum = sum + x * i })\n ```",
          "signature": "fn <a href=\"moonbitlang/core/queue#T\">T</a>::eachi[A](self : <a href=\"moonbitlang/core/queue#T\">T</a>[A], f : (Int, A) -> Unit) -> Unit",
          "loc": {
            "path": "moonbitlang/core/queue",
            "file": "queue.mbt",
            "line": 251,
            "column": 8
          }
        },
        {
          "name": "fold",
          "docstring": "\n Folds over the queue.\n\n # Example\n ```\n let queue : @queue.T[Int] = @queue.new()\n let sum = queue.fold(init=0, fn(acc, x) { acc + x })\n assert_eq!(sum, 0)\n ```",
          "signature": "fn <a href=\"moonbitlang/core/queue#T\">T</a>::fold[A, B](self : <a href=\"moonbitlang/core/queue#T\">T</a>[A], init~ : B, f : (B, A) -> B) -> B",
          "loc": {
            "path": "moonbitlang/core/queue",
            "file": "queue.mbt",
            "line": 270,
            "column": 8
          }
        },
        {
          "name": "from_array",
          "docstring": "\n @alert deprecated \"use `@queue.from_array` instead\"\n @coverage.skip",
          "signature": "fn <a href=\"moonbitlang/core/queue#T\">T</a>::from_array[A](arr : <a href=\"moonbitlang/core/array#Array\">Array</a>[A]) -> <a href=\"moonbitlang/core/queue#T\">T</a>[A]",
          "loc": {
            "path": "moonbitlang/core/queue",
            "file": "deprecated.mbt",
            "line": 25,
            "column": 11
          }
        },
        {
          "name": "from_iter",
          "docstring": "\n @alert deprecated \"use `@queue.from_iter` instead\"\n @coverage.skip",
          "signature": "fn <a href=\"moonbitlang/core/queue#T\">T</a>::from_iter[A](iter : <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[A]) -> <a href=\"moonbitlang/core/queue#T\">T</a>[A]",
          "loc": {
            "path": "moonbitlang/core/queue",
            "file": "deprecated.mbt",
            "line": 32,
            "column": 11
          }
        },
        {
          "name": "is_empty",
          "docstring": "\n Checks if the queue is empty.\n\n # Example\n ```\n let queue : @queue.T[Int] = @queue.new()\n assert_true!(queue.is_empty())\n ```",
          "signature": "fn <a href=\"moonbitlang/core/queue#T\">T</a>::is_empty[A](self : <a href=\"moonbitlang/core/queue#T\">T</a>[A]) -> Bool",
          "loc": {
            "path": "moonbitlang/core/queue",
            "file": "queue.mbt",
            "line": 110,
            "column": 8
          }
        },
        {
          "name": "iter",
          "docstring": "\n Creates an iter from the queue.\n\n # Example\n ```\n let queue : @queue.T[Int] = @queue.of([5, 6, 7, 8])\n let sum = queue.iter().fold(fn(x, y) { x + y }, init=0)\n assert_eq!(sum, 26)\n ```",
          "signature": "fn <a href=\"moonbitlang/core/queue#T\">T</a>::iter[A](self : <a href=\"moonbitlang/core/queue#T\">T</a>[A]) -> <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[A]",
          "loc": {
            "path": "moonbitlang/core/queue",
            "file": "queue.mbt",
            "line": 348,
            "column": 8
          }
        },
        {
          "name": "length",
          "docstring": "\n Get the length of the queue.\n\n # Example\n ```\n let queue : @queue.T[Int] = @queue.new()\n assert_eq!(queue.length(), 0)\n ```",
          "signature": "fn <a href=\"moonbitlang/core/queue#T\">T</a>::length[A](self : <a href=\"moonbitlang/core/queue#T\">T</a>[A]) -> Int",
          "loc": {
            "path": "moonbitlang/core/queue",
            "file": "queue.mbt",
            "line": 98,
            "column": 8
          }
        },
        {
          "name": "new",
          "docstring": "\n @alert deprecated \"use `@queue.new` instead\"\n @coverage.skip",
          "signature": "fn <a href=\"moonbitlang/core/queue#T\">T</a>::new[A]() -> <a href=\"moonbitlang/core/queue#T\">T</a>[A]",
          "loc": {
            "path": "moonbitlang/core/queue",
            "file": "deprecated.mbt",
            "line": 18,
            "column": 11
          }
        },
        {
          "name": "of",
          "docstring": "\n @alert deprecated \"use `@queue.of` instead\"\n @coverage.skip",
          "signature": "fn <a href=\"moonbitlang/core/queue#T\">T</a>::of[A](arr : <a href=\"moonbitlang/core/array#FixedArray\">FixedArray</a>[A]) -> <a href=\"moonbitlang/core/queue#T\">T</a>[A]",
          "loc": {
            "path": "moonbitlang/core/queue",
            "file": "deprecated.mbt",
            "line": 39,
            "column": 11
          }
        },
        {
          "name": "peek",
          "docstring": "\n Peeks at the first value in the queue, which returns None if the queue is empty.\n\n # Example\n ```\n let queue : @queue.T[Int] = @queue.of([1, 2, 3, 4])\n assert_eq!(queue.peek(), Some(1))\n ```",
          "signature": "fn <a href=\"moonbitlang/core/queue#T\">T</a>::peek[A](self : <a href=\"moonbitlang/core/queue#T\">T</a>[A]) -> A?",
          "loc": {
            "path": "moonbitlang/core/queue",
            "file": "queue.mbt",
            "line": 169,
            "column": 8
          }
        },
        {
          "name": "peek_exn",
          "docstring": "\n @alert deprecated \"Use `unsafe_peek` instead\"\n @coverage.skip",
          "signature": "fn <a href=\"moonbitlang/core/queue#T\">T</a>::peek_exn[A](self : <a href=\"moonbitlang/core/queue#T\">T</a>[A]) -> A",
          "loc": {
            "path": "moonbitlang/core/queue",
            "file": "queue.mbt",
            "line": 157,
            "column": 8
          }
        },
        {
          "name": "pop",
          "docstring": "\n Pops the first value from the queue, which returns None if the queue is empty.\n\n # Example\n ```\n let queue : @queue.T[Int] = @queue.of([1, 2, 3, 4])\n assert_eq!(queue.pop(), Some(1))\n ```",
          "signature": "fn <a href=\"moonbitlang/core/queue#T\">T</a>::pop[A](self : <a href=\"moonbitlang/core/queue#T\">T</a>[A]) -> A?",
          "loc": {
            "path": "moonbitlang/core/queue",
            "file": "queue.mbt",
            "line": 215,
            "column": 8
          }
        },
        {
          "name": "pop_exn",
          "docstring": "\n @alert deprecated \"Use `unsafe_pop` instead\"\n @coverage.skip",
          "signature": "fn <a href=\"moonbitlang/core/queue#T\">T</a>::pop_exn[A](self : <a href=\"moonbitlang/core/queue#T\">T</a>[A]) -> A",
          "loc": {
            "path": "moonbitlang/core/queue",
            "file": "queue.mbt",
            "line": 203,
            "column": 8
          }
        },
        {
          "name": "push",
          "docstring": "\n Adds a value to the queue.\n\n # Example\n ```\n let queue : @queue.T[Int] = @queue.new()\n queue.push(1)\n ```",
          "signature": "fn <a href=\"moonbitlang/core/queue#T\">T</a>::push[A](self : <a href=\"moonbitlang/core/queue#T\">T</a>[A], x : A) -> Unit",
          "loc": {
            "path": "moonbitlang/core/queue",
            "file": "queue.mbt",
            "line": 122,
            "column": 8
          }
        },
        {
          "name": "transfer",
          "docstring": "\n Transfers all elements from one queue to another.\n\n Adds all of the elements of source to the end of destination, then clears source.\n\n # Example\n ```\n let dst : @queue.T[Int] = @queue.new()\n let src : @queue.T[Int] = @queue.of([5, 6, 7, 8])\n src.transfer(dst)\n ```",
          "signature": "fn <a href=\"moonbitlang/core/queue#T\">T</a>::transfer[A](self : <a href=\"moonbitlang/core/queue#T\">T</a>[A], dst : <a href=\"moonbitlang/core/queue#T\">T</a>[A]) -> Unit",
          "loc": {
            "path": "moonbitlang/core/queue",
            "file": "queue.mbt",
            "line": 320,
            "column": 8
          }
        },
        {
          "name": "unsafe_peek",
          "docstring": "\n Peeks at the first value in the queue.\n\n # Example\n ```\n let queue : @queue.T[Int] = @queue.of([1, 2, 3, 4])\n assert_eq!(queue.unsafe_peek(), 1)\n ```\n @alert unsafe \"Panics if the queue is empty.\"",
          "signature": "fn <a href=\"moonbitlang/core/queue#T\">T</a>::unsafe_peek[A](self : <a href=\"moonbitlang/core/queue#T\">T</a>[A]) -> A",
          "loc": {
            "path": "moonbitlang/core/queue",
            "file": "queue.mbt",
            "line": 147,
            "column": 8
          }
        },
        {
          "name": "unsafe_pop",
          "docstring": "\n Pops the first value from the queue.\n\n # Example\n ```\n let queue : @queue.T[Int] = @queue.of([1, 2, 3, 4])\n assert_eq!(queue.unsafe_pop(), 1)\n ```\n @alert unsafe \"Panics if the queue is empty.\"",
          "signature": "fn <a href=\"moonbitlang/core/queue#T\">T</a>::unsafe_pop[A](self : <a href=\"moonbitlang/core/queue#T\">T</a>[A]) -> A",
          "loc": {
            "path": "moonbitlang/core/queue",
            "file": "queue.mbt",
            "line": 185,
            "column": 8
          }
        }
      ],
      "impls": [
        {
          "self": {
            "kind": "constr",
            "constructor": { "name": "T", "path": "moonbitlang/core/queue" },
            "arguments": [ { "kind": "param", "name": "A" } ]
          },
          "trait": { "name": "Show", "path": "moonbitlang/core/builtin" },
          "methods": [
            {
              "name": "output",
              "docstring": "",
              "signature": "fn output[A : <a href=\"moonbitlang/core/builtin#Show\">Show</a>](self : <a href=\"moonbitlang/core/queue#T\">T</a>[A], logger : <a href=\"moonbitlang/core/builtin#Logger\">Logger</a>) -> Unit",
              "loc": {
                "path": "moonbitlang/core/queue",
                "file": "queue.mbt",
                "line": 51,
                "column": 39
              }
            }
          ]
        },
        {
          "self": {
            "kind": "constr",
            "constructor": { "name": "T", "path": "moonbitlang/core/queue" },
            "arguments": [ { "kind": "param", "name": "X" } ]
          },
          "trait": {
            "name": "Arbitrary",
            "path": "moonbitlang/core/quickcheck"
          },
          "methods": [
            {
              "name": "arbitrary",
              "docstring": "",
              "signature": "fn arbitrary[X : <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a>](size : Int, rs : <a href=\"moonbitlang/core/quickcheck/splitmix#RandomState\">@moonbitlang/core/quickcheck/splitmix.RandomState</a>) -> <a href=\"moonbitlang/core/queue#T\">T</a>[X]",
              "loc": {
                "path": "moonbitlang/core/queue",
                "file": "queue.mbt",
                "line": 465,
                "column": 73
              }
            }
          ]
        }
      ]
    }
  ],
  "typealias": [],
  "values": [
    {
      "name": "from_array",
      "docstring": "\n Creates a new queue from an array.\n\n # Example\n ```\n let array = Array::makei(3, fn(idx) { idx + 1 })\n let queue : @queue.T[Int] = @queue.from_array(array)\n assert_eq!(queue.length(), 3)\n ```",
      "signature": "fn from_array[A](arr : <a href=\"moonbitlang/core/array#Array\">Array</a>[A]) -> <a href=\"moonbitlang/core/queue#T\">T</a>[A]",
      "loc": {
        "path": "moonbitlang/core/queue",
        "file": "queue.mbt",
        "line": 36,
        "column": 8
      }
    },
    {
      "name": "from_iter",
      "docstring": "\n Creates a new queue from an iter.\n\n # Example\n ```\n let queue : @queue.T[Int] = @queue.from_iter(Iter::empty())\n assert_eq!(queue.length(), 0)\n ```",
      "signature": "fn from_iter[A](iter : <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[A]) -> <a href=\"moonbitlang/core/queue#T\">T</a>[A]",
      "loc": {
        "path": "moonbitlang/core/queue",
        "file": "queue.mbt",
        "line": 370,
        "column": 8
      }
    },
    {
      "name": "new",
      "docstring": "\n Creates a new empty queue.\n\n # Example\n ```\n let queue : @queue.T[Int] = @queue.new()\n assert_eq!(queue.length(), 0)\n ```",
      "signature": "fn new[A]() -> <a href=\"moonbitlang/core/queue#T\">T</a>[A]",
      "loc": {
        "path": "moonbitlang/core/queue",
        "file": "queue.mbt",
        "line": 23,
        "column": 8
      }
    },
    {
      "name": "of",
      "docstring": "\n Creates a new queue from a FixedArray.\n\n # Example\n ```\n let queue : @queue.T[Int] = @queue.of([1, 2, 3, 4])\n assert_eq!(queue.length(), 4)\n ```",
      "signature": "fn of[A](arr : <a href=\"moonbitlang/core/array#FixedArray\">FixedArray</a>[A]) -> <a href=\"moonbitlang/core/queue#T\">T</a>[A]",
      "loc": {
        "path": "moonbitlang/core/queue",
        "file": "queue.mbt",
        "line": 384,
        "column": 8
      }
    }
  ],
  "misc": []
}