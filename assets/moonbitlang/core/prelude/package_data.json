{
  "name": "moonbitlang/core/prelude",
  "traits": [],
  "types": [],
  "typealias": [
    {
      "name": "ArgsLoc",
      "docstring": "\n Represents a type for storing argument locations in source code. It is an\n array of optional source locations, where each element corresponds to an\n argument's location in the source code. Used internally by the compiler for\n error reporting and debugging purposes.",
      "signature": "type ArgsLoc = <a href=\"moonbitlang/core/builtin#ArgsLoc\">ArgsLoc</a>",
      "loc": {
        "path": "moonbitlang/core/prelude",
        "file": "prelude.mbt",
        "line": 16,
        "column": 1
      }
    },
    {
      "name": "Array",
      "docstring": "\n An `Array` is a collection of values that supports random access and can\n grow in size.",
      "signature": "type Array[X] = <a href=\"moonbitlang/core/array#Array\">Array</a>[X]",
      "loc": {
        "path": "moonbitlang/core/prelude",
        "file": "prelude.mbt",
        "line": 16,
        "column": 1
      }
    },
    {
      "name": "ArrayView",
      "docstring": "\n An `ArrayView` represents a view into a section of an array without copying the data.\n\n # Example\n\n ```moonbit\n let arr = [1, 2, 3, 4, 5]\n let view = arr[1:4]  // Creates a view of elements at indices 1,2,3\n assert_eq!(view[0], 2)\n assert_eq!(view.length(), 3)\n ```\n @alert deprecated \"use @array.View instead\"",
      "signature": "type ArrayView[X] = <a href=\"moonbitlang/core/array#ArrayView\">ArrayView</a>[X]",
      "loc": {
        "path": "moonbitlang/core/prelude",
        "file": "prelude.mbt",
        "line": 16,
        "column": 1
      }
    },
    {
      "name": "BigInt",
      "docstring": "\n A big integer represented as an array of Int.",
      "signature": "type BigInt = <a href=\"moonbitlang/core/bigint#BigInt\">BigInt</a>",
      "loc": {
        "path": "moonbitlang/core/prelude",
        "file": "prelude.mbt",
        "line": 16,
        "column": 1
      }
    },
    {
      "name": "Failure",
      "docstring": "\n Represents a generic test failure type used primarily in test assertions and\n validations.\n\n Since this is a type definition using `type!` syntax, it creates an error\n type `Failure` that wraps a `String` value containing the failure message.\n\n Parameters:\n\n * `message` : A string describing the nature of the failure.\n\n Example:\n\n ```moonbit\n test \"Failure\" {\n   let err : Failure = Failure(\"Test assertion failed\")\n   match err {\n     Failure(msg) => inspect!(msg, content=\"Test assertion failed\")\n   }\n }\n ```",
      "signature": "type Failure = <a href=\"moonbitlang/core/builtin#Failure\">Failure</a>",
      "loc": {
        "path": "moonbitlang/core/prelude",
        "file": "prelude.mbt",
        "line": 16,
        "column": 1
      }
    },
    {
      "name": "Hasher",
      "docstring": "\n Represents a hasher that implements the xxHash32 algorithm. The hasher\n maintains a mutable accumulator that is updated with each value added to the\n hash computation.\n\n This struct provides methods for combining different types of values into a\n single hash value, making it suitable for implementing hash functions for\n custom types.\n\n Example:\n\n ```moonbit\n test \"Hasher/basic\" {\n   let hasher = Hasher::new()\n   hasher.combine_int(42)\n   hasher.combine_string(\"hello\")\n   inspect!(hasher.finalize(), content=\"860601284\")\n }\n ```",
      "signature": "type Hasher = <a href=\"moonbitlang/core/builtin#Hasher\">Hasher</a>",
      "loc": {
        "path": "moonbitlang/core/prelude",
        "file": "prelude.mbt",
        "line": 16,
        "column": 1
      }
    },
    {
      "name": "InspectError",
      "docstring": "\n Represents an error type used by the `inspect!` function to indicate failures\n in value inspection. Contains a string message describing the nature of the\n inspection failure.\n\n Returns a type constructor that creates an error type from a string message.\n\n Example:\n\n ```moonbit\n test \"inspect/failure\" {\n   let x : Int = 42\n   inspect!(x, content=\"42\") // Raises InspectError with detailed failure message\n }\n ```",
      "signature": "type InspectError = <a href=\"moonbitlang/core/builtin#InspectError\">InspectError</a>",
      "loc": {
        "path": "moonbitlang/core/prelude",
        "file": "prelude.mbt",
        "line": 16,
        "column": 1
      }
    },
    {
      "name": "Iter",
      "docstring": "",
      "signature": "type Iter[X] = <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[X]",
      "loc": {
        "path": "moonbitlang/core/prelude",
        "file": "prelude.mbt",
        "line": 16,
        "column": 1
      }
    },
    {
      "name": "Iter2",
      "docstring": "",
      "signature": "type Iter2[X, Y] = <a href=\"moonbitlang/core/builtin#Iter2\">Iter2</a>[X, Y]",
      "loc": {
        "path": "moonbitlang/core/prelude",
        "file": "prelude.mbt",
        "line": 16,
        "column": 1
      }
    },
    {
      "name": "IterResult",
      "docstring": "",
      "signature": "type IterResult = <a href=\"moonbitlang/core/builtin#IterResult\">IterResult</a>",
      "loc": {
        "path": "moonbitlang/core/prelude",
        "file": "prelude.mbt",
        "line": 16,
        "column": 1
      }
    },
    {
      "name": "Json",
      "docstring": "",
      "signature": "type Json = <a href=\"moonbitlang/core/json#Json\">Json</a>",
      "loc": {
        "path": "moonbitlang/core/prelude",
        "file": "prelude.mbt",
        "line": 16,
        "column": 1
      }
    },
    {
      "name": "Map",
      "docstring": "\n Mutable linked hash map that maintains the order of insertion, not thread safe.\n\n # Example\n\n ```\n let map = { 3: \"three\", 8 :  \"eight\", 1 :  \"one\"}\n assert_eq!(map.get(2), None)\n assert_eq!(map.get(3), Some(\"three\"))\n map.set(3, \"updated\")\n assert_eq!(map.get(3), Some(\"updated\"))\n ```",
      "signature": "type Map[K, V] = <a href=\"moonbitlang/core/builtin#Map\">Map</a>[K, V]",
      "loc": {
        "path": "moonbitlang/core/prelude",
        "file": "prelude.mbt",
        "line": 16,
        "column": 1
      }
    },
    {
      "name": "Set",
      "docstring": "\n Mutable linked hash set that maintains the order of insertion, not thread safe.",
      "signature": "type Set[X] = <a href=\"moonbitlang/core/builtin#Set\">Set</a>[X]",
      "loc": {
        "path": "moonbitlang/core/prelude",
        "file": "prelude.mbt",
        "line": 16,
        "column": 1
      }
    },
    {
      "name": "SnapshotError",
      "docstring": "\n Represents an error that occurs during snapshot testing. Contains a string\n message describing the error.\n\n Used internally by the test driver to handle snapshot-related errors. Not\n intended for direct use by end users.\n\n Example:\n\n ```moonbit\n test \"SnapshotError\" {\n   let err : SnapshotError = SnapshotError(\"failed to load snapshot\")\n   match err {\n     SnapshotError(msg) => assert_eq!(msg, \"failed to load snapshot\")\n   }\n }\n ```",
      "signature": "type SnapshotError = <a href=\"moonbitlang/core/builtin#SnapshotError\">SnapshotError</a>",
      "loc": {
        "path": "moonbitlang/core/prelude",
        "file": "prelude.mbt",
        "line": 16,
        "column": 1
      }
    },
    {
      "name": "SourceLoc",
      "docstring": "\n Represents a source code location in a MoonBit program, containing\n information about the file path, line number, and column number. Used\n internally by the compiler for error reporting and debugging purposes.\n\n This type is public to all packages but its internal representation is\n opaque. Users cannot construct values of this type directly; they are\n automatically created by the compiler when needed.",
      "signature": "type SourceLoc = <a href=\"moonbitlang/core/builtin#SourceLoc\">SourceLoc</a>",
      "loc": {
        "path": "moonbitlang/core/prelude",
        "file": "prelude.mbt",
        "line": 16,
        "column": 1
      }
    },
    {
      "name": "StringBuilder",
      "docstring": "",
      "signature": "type StringBuilder = <a href=\"moonbitlang/core/builtin#StringBuilder\">StringBuilder</a>",
      "loc": {
        "path": "moonbitlang/core/prelude",
        "file": "prelude.mbt",
        "line": 16,
        "column": 1
      }
    },
    {
      "name": "UninitializedArray",
      "docstring": "",
      "signature": "type UninitializedArray[X] = <a href=\"moonbitlang/core/builtin#UninitializedArray\">UninitializedArray</a>[X]",
      "loc": {
        "path": "moonbitlang/core/prelude",
        "file": "prelude.mbt",
        "line": 16,
        "column": 1
      }
    },
    {
      "name": "Add",
      "docstring": "\n types implementing this trait can use the `+` operator",
      "signature": "type Add = <a href=\"moonbitlang/core/builtin#Add\">Add</a>",
      "loc": {
        "path": "moonbitlang/core/prelude",
        "file": "prelude.mbt",
        "line": 37,
        "column": 1
      }
    },
    {
      "name": "BitAnd",
      "docstring": "\n types implementing this trait can use the `&` operator",
      "signature": "type BitAnd = <a href=\"moonbitlang/core/builtin#BitAnd\">BitAnd</a>",
      "loc": {
        "path": "moonbitlang/core/prelude",
        "file": "prelude.mbt",
        "line": 37,
        "column": 1
      }
    },
    {
      "name": "BitOr",
      "docstring": "\n types implementing this trait can use the `|` operator",
      "signature": "type BitOr = <a href=\"moonbitlang/core/builtin#BitOr\">BitOr</a>",
      "loc": {
        "path": "moonbitlang/core/prelude",
        "file": "prelude.mbt",
        "line": 37,
        "column": 1
      }
    },
    {
      "name": "BitXOr",
      "docstring": "\n types implementing this trait can use the `^` operator",
      "signature": "type BitXOr = <a href=\"moonbitlang/core/builtin#BitXOr\">BitXOr</a>",
      "loc": {
        "path": "moonbitlang/core/prelude",
        "file": "prelude.mbt",
        "line": 37,
        "column": 1
      }
    },
    {
      "name": "Compare",
      "docstring": "\n Trait for types whose elements are ordered\n\n The return value of [compare] is:\n - zero, if the two arguments are equal\n - negative, if the first argument is smaller\n - positive, if the first argument is greater",
      "signature": "type Compare = <a href=\"moonbitlang/core/builtin#Compare\">Compare</a>",
      "loc": {
        "path": "moonbitlang/core/prelude",
        "file": "prelude.mbt",
        "line": 37,
        "column": 1
      }
    },
    {
      "name": "Default",
      "docstring": "\n Trait for types with a default value",
      "signature": "type Default = <a href=\"moonbitlang/core/builtin#Default\">Default</a>",
      "loc": {
        "path": "moonbitlang/core/prelude",
        "file": "prelude.mbt",
        "line": 37,
        "column": 1
      }
    },
    {
      "name": "Div",
      "docstring": "\n types implementing this trait can use the `/` operator",
      "signature": "type Div = <a href=\"moonbitlang/core/builtin#Div\">Div</a>",
      "loc": {
        "path": "moonbitlang/core/prelude",
        "file": "prelude.mbt",
        "line": 37,
        "column": 1
      }
    },
    {
      "name": "Eq",
      "docstring": "\n Trait for types whose elements can test for equality",
      "signature": "type Eq = <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>",
      "loc": {
        "path": "moonbitlang/core/prelude",
        "file": "prelude.mbt",
        "line": 37,
        "column": 1
      }
    },
    {
      "name": "Hash",
      "docstring": "\n Trait for types that can be hashed",
      "signature": "type Hash = <a href=\"moonbitlang/core/builtin#Hash\">Hash</a>",
      "loc": {
        "path": "moonbitlang/core/prelude",
        "file": "prelude.mbt",
        "line": 37,
        "column": 1
      }
    },
    {
      "name": "Logger",
      "docstring": "\n Trait for a logger, where debug logs can be written into",
      "signature": "type Logger = <a href=\"moonbitlang/core/builtin#Logger\">Logger</a>",
      "loc": {
        "path": "moonbitlang/core/prelude",
        "file": "prelude.mbt",
        "line": 37,
        "column": 1
      }
    },
    {
      "name": "Mod",
      "docstring": "\n types implementing this trait can use the `%` operator",
      "signature": "type Mod = <a href=\"moonbitlang/core/builtin#Mod\">Mod</a>",
      "loc": {
        "path": "moonbitlang/core/prelude",
        "file": "prelude.mbt",
        "line": 37,
        "column": 1
      }
    },
    {
      "name": "Mul",
      "docstring": "\n types implementing this trait can use the `*` operator",
      "signature": "type Mul = <a href=\"moonbitlang/core/builtin#Mul\">Mul</a>",
      "loc": {
        "path": "moonbitlang/core/prelude",
        "file": "prelude.mbt",
        "line": 37,
        "column": 1
      }
    },
    {
      "name": "Neg",
      "docstring": "\n types implementing this trait can use the unary `-` operator",
      "signature": "type Neg = <a href=\"moonbitlang/core/builtin#Neg\">Neg</a>",
      "loc": {
        "path": "moonbitlang/core/prelude",
        "file": "prelude.mbt",
        "line": 37,
        "column": 1
      }
    },
    {
      "name": "Shl",
      "docstring": "\n types implementing this trait can use the `<<` operator",
      "signature": "type Shl = <a href=\"moonbitlang/core/builtin#Shl\">Shl</a>",
      "loc": {
        "path": "moonbitlang/core/prelude",
        "file": "prelude.mbt",
        "line": 37,
        "column": 1
      }
    },
    {
      "name": "Show",
      "docstring": "\n Trait for types that can be converted to `String`",
      "signature": "type Show = <a href=\"moonbitlang/core/builtin#Show\">Show</a>",
      "loc": {
        "path": "moonbitlang/core/prelude",
        "file": "prelude.mbt",
        "line": 37,
        "column": 1
      }
    },
    {
      "name": "Shr",
      "docstring": "\n types implementing this trait can use the `>>` operator",
      "signature": "type Shr = <a href=\"moonbitlang/core/builtin#Shr\">Shr</a>",
      "loc": {
        "path": "moonbitlang/core/prelude",
        "file": "prelude.mbt",
        "line": 37,
        "column": 1
      }
    },
    {
      "name": "Sub",
      "docstring": "\n types implementing this trait can use the `-` operator",
      "signature": "type Sub = <a href=\"moonbitlang/core/builtin#Sub\">Sub</a>",
      "loc": {
        "path": "moonbitlang/core/prelude",
        "file": "prelude.mbt",
        "line": 37,
        "column": 1
      }
    },
    {
      "name": "ToJson",
      "docstring": "\n Trait for types that can be converted to `Json`",
      "signature": "type ToJson = <a href=\"moonbitlang/core/builtin#ToJson\">ToJson</a>",
      "loc": {
        "path": "moonbitlang/core/prelude",
        "file": "prelude.mbt",
        "line": 37,
        "column": 1
      }
    }
  ],
  "values": [
    {
      "name": "abort",
      "docstring": "\n Aborts the program with an error message. Always causes a panic, regardless\n of the message provided.\n\n Parameters:\n\n * `message` : A string containing the error message to be displayed when\n aborting.\n\n Returns a value of type `T`. However, this function never actually returns a\n value as it always causes a panic.\n\n Example:\n\n ```moonbit\n test \"panic abort/with_message\" {\n   let x : Int = abort(\"Something went wrong\") // specify return type as Int\n   ignore(x)\n }\n ```",
      "signature": "fn abort[T](msg : String) -> T",
      "loc": {
        "path": "moonbitlang/core/builtin",
        "file": "intrinsics.mbt",
        "line": 84,
        "column": 8
      }
    },
    {
      "name": "assert_eq",
      "docstring": "\n Asserts that two values are equal. If they are not equal, raises a failure\n with a message containing the source location and the values being compared.\n\n Parameters:\n\n * `a` : First value to compare.\n * `b` : Second value to compare.\n * `loc` : Source location information to include in failure messages. This is\n usually automatically provided by the compiler.\n\n Throws a `Failure` error if the values are not equal, with a message showing\n the location of the failing assertion and the actual values that were\n compared.\n\n Example:\n\n ```moonbit\n test \"assert_eq\" {\n   assert_eq!(1, 1)\n   assert_eq!(\"hello\", \"hello\")\n }\n\n test \"panic assert_eq/not_equal\" {\n   ignore(assert_eq!(1, 2)) // Will fail with message showing values and location\n }\n ```",
      "signature": "fn assert_eq[T : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a> + <a href=\"moonbitlang/core/builtin#Show\">Show</a>](a : T, b : T, loc~ : <a href=\"moonbitlang/core/builtin#SourceLoc\">SourceLoc</a> = _) -> Unit!<a href=\"moonbitlang/core/error#Error\">Error</a>",
      "loc": {
        "path": "moonbitlang/core/builtin",
        "file": "assert.mbt",
        "line": 49,
        "column": 8
      }
    },
    {
      "name": "assert_false",
      "docstring": "\n Tests whether a boolean condition is false, throwing an error if the\n condition is true.\n\n Parameters:\n\n * `condition` : The boolean condition to test.\n * `location` : The source location where the assertion is made. Used in error\n messages.\n\n Throws a `Failure` error if the condition is true. The error message includes\n the source location and the value that was expected to be false.\n\n Example:\n\n ```moonbit\n test \"assert_false\" {\n   assert_false!(false)\n   assert_false!(1 > 2)\n }\n\n test \"panic assert_false/with_true\" {\n   assert_false!(true) // This will fail with an error message\n }\n ```",
      "signature": "fn assert_false(x : Bool, loc~ : <a href=\"moonbitlang/core/builtin#SourceLoc\">SourceLoc</a> = _) -> Unit!<a href=\"moonbitlang/core/error#Error\">Error</a>",
      "loc": {
        "path": "moonbitlang/core/builtin",
        "file": "assert.mbt",
        "line": 148,
        "column": 8
      }
    },
    {
      "name": "assert_not_eq",
      "docstring": "\n Asserts that two values of the same type are not equal. If the values are\n equal, raises a failure with a detailed error message including the source\n location and string representation of both values.\n\n Parameters:\n\n * `first` : The first value to compare.\n * `second` : The second value to compare.\n * `location` : Source location information for error reporting. Defaults to\n the current location.\n\n Throws a `Failure` error if the values are equal. The error message includes\n the source location and string representations of both values.\n\n Example:\n\n ```moonbit\n test \"assert_not_eq\" {\n   assert_not_eq!(1, 2) // Passes\n }\n\n test \"panic assert_not_eq/equal_values\" {\n   ignore(assert_not_eq!(42, 42)) // Fails with detailed error message\n }\n ```",
      "signature": "fn assert_not_eq[T : <a href=\"moonbitlang/core/builtin#Eq\">Eq</a> + <a href=\"moonbitlang/core/builtin#Show\">Show</a>](a : T, b : T, loc~ : <a href=\"moonbitlang/core/builtin#SourceLoc\">SourceLoc</a> = _) -> Unit!<a href=\"moonbitlang/core/error#Error\">Error</a>",
      "loc": {
        "path": "moonbitlang/core/builtin",
        "file": "assert.mbt",
        "line": 81,
        "column": 8
      }
    },
    {
      "name": "assert_true",
      "docstring": "\n Asserts that the given boolean value is true. Throws an error with source\n location information if the assertion fails.\n\n Parameters:\n\n * `condition` : The boolean value to be checked.\n * `location` : The source location where the assertion is made. Defaults to\n the current location.\n\n Throws a `Failure` error with a descriptive message including the source\n location if the condition is false.\n\n Example:\n\n ```moonbit\n test \"assert_true\" {\n   assert_true!(true)\n }\n\n test \"panic assert_true/false_condition\" {\n   ignore(assert_true!(false)) // Throws Failure\n }\n ```",
      "signature": "fn assert_true(x : Bool, loc~ : <a href=\"moonbitlang/core/builtin#SourceLoc\">SourceLoc</a> = _) -> Unit!<a href=\"moonbitlang/core/error#Error\">Error</a>",
      "loc": {
        "path": "moonbitlang/core/builtin",
        "file": "assert.mbt",
        "line": 117,
        "column": 8
      }
    },
    {
      "name": "dump",
      "docstring": "\n Prints and returns the value of a given expression for quick and dirty debugging.",
      "signature": "fn dump[T](t : T, name? : String, loc~ : <a href=\"moonbitlang/core/builtin#SourceLoc\">SourceLoc</a> = _) -> T",
      "loc": {
        "path": "moonbitlang/core/builtin",
        "file": "console.mbt",
        "line": 45,
        "column": 8
      }
    },
    {
      "name": "fail",
      "docstring": "\n Raises a `Failure` error with a given message and source location.\n\n Parameters:\n\n * `message` : A string containing the error message to be included in the\n failure.\n * `location` : The source code location where the failure occurred.\n Automatically provided by the compiler when not specified.\n\n Returns a value of type `T` wrapped in a `Failure` error type.\n\n Throws an error of type `Failure` with a message that includes both the\n source location and the provided error message.\n\n Example:\n\n ```moonbit\n test \"panic fail\" {\n   fail!(\"Something went wrong\")\n }\n ```",
      "signature": "fn fail[T](msg : String, loc~ : <a href=\"moonbitlang/core/builtin#SourceLoc\">SourceLoc</a> = _) -> T!<a href=\"moonbitlang/core/builtin#Failure\">Failure</a>",
      "loc": {
        "path": "moonbitlang/core/builtin",
        "file": "failure.mbt",
        "line": 60,
        "column": 8
      }
    },
    {
      "name": "ignore",
      "docstring": "\n Evaluates an expression and discards its result. This is useful when you want\n to execute an expression for its side effects but don't care about its return\n value, or when you want to explicitly indicate that a value is intentionally\n unused.\n\n Parameters:\n\n * `value` : The value to be ignored. Can be of any type.\n\n Example:\n\n ```moonbit\n test \"ignore\" {\n   let x = 42\n   ignore(x) // Explicitly ignore the value\n   let mut sum = 0\n   ignore([1, 2, 3].iter().each(fn(x) { sum = sum + x })) // Ignore the Unit return value of each()\n }\n ```",
      "signature": "fn ignore[T](t : T) -> Unit",
      "loc": {
        "path": "moonbitlang/core/builtin",
        "file": "intrinsics.mbt",
        "line": 35,
        "column": 8
      }
    },
    {
      "name": "inspect",
      "docstring": "\n Tests if the string representation of an object matches the expected content.\n Used primarily in test cases to verify the correctness of `Show`\n implementations and program outputs.\n\n Parameters:\n\n * `object` : The object to be inspected. Must implement the `Show` trait.\n * `content` : The expected string representation of the object. Defaults to\n an empty string.\n * `location` : Source code location information for error reporting.\n Automatically provided by the compiler.\n * `arguments_location` : Location information for function arguments in\n source code. Automatically provided by the compiler.\n\n Throws an `InspectError` if the actual string representation of the object\n does not match the expected content. The error message includes detailed\n information about the mismatch, including source location and both expected\n and actual values.\n\n Example:\n\n ```moonbit skip\n test \"inspect/basic\" {\n   inspect!(42, content=\"42\")\n   inspect!(\"hello\", content=\"hello\")\n   inspect!([1, 2, 3], content=\"[1, 2, 3]\")\n }\n ```",
      "signature": "fn inspect(obj : <a href=\"moonbitlang/core/builtin#Show\">Show</a>, content~ : String = .., loc~ : <a href=\"moonbitlang/core/builtin#SourceLoc\">SourceLoc</a> = _, args_loc~ : <a href=\"moonbitlang/core/builtin#ArgsLoc\">ArgsLoc</a> = _) -> Unit!<a href=\"moonbitlang/core/builtin#InspectError\">InspectError</a>",
      "loc": {
        "path": "moonbitlang/core/builtin",
        "file": "console.mbt",
        "line": 195,
        "column": 8
      }
    },
    {
      "name": "not",
      "docstring": "\n Performs logical negation on a boolean value.\n\n Parameters:\n\n * `value` : The boolean value to negate.\n\n Returns the logical NOT of the input value: `true` if the input is `false`,\n and `false` if the input is `true`.\n\n Example:\n\n ```moonbit\n test \"not\" {\n   inspect!(not(true), content=\"false\")\n   inspect!(not(false), content=\"true\")\n }\n ```",
      "signature": "fn not(x : Bool) -> Bool",
      "loc": {
        "path": "moonbitlang/core/builtin",
        "file": "intrinsics.mbt",
        "line": 112,
        "column": 8
      }
    },
    {
      "name": "panic",
      "docstring": "",
      "signature": "fn panic[T]() -> T",
      "loc": {
        "path": "moonbitlang/core/builtin",
        "file": "intrinsics.mbt",
        "line": 90,
        "column": 8
      }
    },
    {
      "name": "physical_equal",
      "docstring": "\n Tests if two values are physically equal (i.e., point to the same memory\n location). Unlike structural equality testing (`==`), this function checks if\n two references point to exactly the same object in memory.\n\n Parameters:\n\n * `first` : The first value to compare.\n * `second` : The second value to compare.\n * `T` : The type parameter representing the type of values being compared.\n\n Returns `true` if both values refer to the same object in memory, `false`\n otherwise.\n\n Example:\n\n ```moonbit\n test \"physical_equal\" {\n   let arr1 = [1, 2, 3]\n   let arr2 = arr1\n   let arr3 = [1, 2, 3]\n   inspect!(physical_equal(arr1, arr2), content=\"true\") // Same object\n   inspect!(physical_equal(arr1, arr3), content=\"false\") // Different objects with same content\n }\n ```",
      "signature": "fn physical_equal[T](a : T, b : T) -> Bool",
      "loc": {
        "path": "moonbitlang/core/builtin",
        "file": "intrinsics.mbt",
        "line": 62,
        "column": 8
      }
    },
    {
      "name": "println",
      "docstring": "\n Prints any value that implements the `Show` trait to the standard output,\n followed by a newline.\n\n Parameters:\n\n * `value` : The value to be printed. Must implement the `Show` trait.\n\n Example:\n\n ```moonbit skip\n test \"println\" {\n   println(42)\n   println(\"Hello, World!\")\n   println([1, 2, 3])\n }\n ```",
      "signature": "fn println[T : <a href=\"moonbitlang/core/builtin#Show\">Show</a>](input : T) -> Unit",
      "loc": {
        "path": "moonbitlang/core/builtin",
        "file": "console.mbt",
        "line": 38,
        "column": 8
      }
    },
    {
      "name": "repr",
      "docstring": "",
      "signature": "fn repr[T : <a href=\"moonbitlang/core/builtin#Show\">Show</a>](t : T) -> String",
      "loc": {
        "path": "moonbitlang/core/builtin",
        "file": "traits.mbt",
        "line": 124,
        "column": 8
      }
    }
  ],
  "misc": []
}