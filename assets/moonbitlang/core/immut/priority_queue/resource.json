{
  "kind": "package",
  "relative_path": "immut/priority_queue",
  "module_path": "moonbitlang/core",
  "readme_content": "# Immutable Priority Queue\n\nA priority queue is a data structure capable of maintaining maximum/minimum values at the front of the queue, which may have other names in other programming languages (C++ std::priority_queue / Rust BinaryHeap). The priority queue here is implemented as a pairing heap and has excellent performance.\n\n# Usage\n\n## Create\n\nYou can use `new()` or `of()` to create an immutable priority queue.\n\n```moonbit\nlet queue1 : @immut/priority_queue.T[Int] = @immut/priority_queue.new()\nlet queue2 = @immut/priority_queue.of([1, 2, 3])\n```\n\nNote, however, that the default immutable priority queue created is greater-first; if you need to create a less-first queue, you can write a struct belongs to Compare trait to implement it.\n\n## Length & Empty\n\nYou can use the `length` to get the length of the immutable priority queue.\n\n```moonbit\nlet pq = @immut/priority_queue.new()\nprintln(pq.length()) // 0\nprintln(pq.push(1).length()) // 1\n```\n\nYou can use the `is_empty` to determine whether the immutable priority queue is empty.\n\n```moonbit\nlet pq = @immut/priority_queue.new()\nprintln(pq.is_empty()) // true\n```\n\n## Peek & Push & Pop\n\nYou can use `peek()` to look at the head element of a queue, which must be either the maximum or minimum value of an element in the queue, depending on the nature of the specification. The return value of `peek()` is an Option, which means that the result will be `None` when the queue is empty.\n\n```moonbit\nlet pq = @immut/priority_queue.of([1, 2, 3, 4, 5])\nprintln(pq.peek()) // Some(5)\n```\n\nYou can use `push()` to add elements to the immutable priority queue and get a new queue.\n\n```moonbit\nlet pq : @immut/priority_queue.new()\nprintln(pq.push(1).peek()) // Some(1)\n```\n\nYou can use `pop()` to remove the element at the front of the priority queue and get a new immutable priority queue wrapped with Option. If the immutable priority queue is empty, then it will return None.\n\n```moonbit\nlet pq = @immut/priority_queue.of([5, 4, 3, 2, 1])\nmatch pq.pop(){\n    Some(q) => q.peek()\n    None => None\n}// Some(5)\n```\n",
  "package_data": "moonbitlang/core/immut/priority_queue/package_data.json",
  "source_files": [ "deprecated.mbt", "priority_queue.mbt", "types.mbt" ]
}