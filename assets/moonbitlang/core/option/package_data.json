{
  "name": "moonbitlang/core/option",
  "traits": [],
  "types": [],
  "typealias": [],
  "values": [
    {
      "name": "empty",
      "docstring": "\n Creates an empty `Option` of type `T`.",
      "signature": "fn empty[T]() -> T?",
      "loc": {
        "path": "moonbitlang/core/option",
        "file": "option.mbt",
        "line": 77,
        "column": 8
      }
    },
    {
      "name": "some",
      "docstring": "\n Creates an `Option` that contains a value.",
      "signature": "fn some[T](value : T) -> T?",
      "loc": {
        "path": "moonbitlang/core/option",
        "file": "option.mbt",
        "line": 90,
        "column": 8
      }
    },
    {
      "name": "unless",
      "docstring": "\n The `unless` function returns an `Option` value based on a condition.\n\n `unless(condition, value)` is equivalent to `when(not(condition), value)`.\n\n # Arguments\n\n * `condition`: A boolean value indicating whether the condition is true or false.\n * `value`: A function that returns a value of type `T`.\n\n # Returns\n\n An `Option` value that is `Some(value())` if the condition is false, otherwise `None`.\n",
      "signature": "fn unless[T](condition : Bool, value : () -> T) -> T?",
      "loc": {
        "path": "moonbitlang/core/option",
        "file": "option.mbt",
        "line": 63,
        "column": 8
      }
    },
    {
      "name": "when",
      "docstring": "\n Creates an `Option` containing a value if the given condition is true, otherwise returns `None`.\n\n # Arguments\n\n * `condition`: A boolean value indicating whether the option should contain a value.\n * `value`: A function that returns the value to be contained in the option.\n\n # Returns\n\n An `Option` containing the value if the condition is true, otherwise `None`.\n\n # Example\n\n ```\n let result = @option.when(true, fn(){ \"Hello, World!\" })\n assert_eq!(result, Some(\"Hello, World!\"))\n ```",
      "signature": "fn when[T](condition : Bool, value : () -> T) -> T?",
      "loc": {
        "path": "moonbitlang/core/option",
        "file": "option.mbt",
        "line": 33,
        "column": 8
      }
    }
  ],
  "misc": [
    {
      "name": "Option",
      "impls": [
        {
          "self": {
            "kind": "constr",
            "constructor": {
              "name": "Option",
              "path": "moonbitlang/core/option"
            },
            "arguments": [ { "kind": "param", "name": "X" } ]
          },
          "trait": {
            "name": "Arbitrary",
            "path": "moonbitlang/core/quickcheck"
          },
          "methods": [
            {
              "name": "arbitrary",
              "docstring": "",
              "signature": "fn arbitrary[X : <a href=\"moonbitlang/core/quickcheck#Arbitrary\">@moonbitlang/core/quickcheck.Arbitrary</a>](i : Int, rs : <a href=\"moonbitlang/core/quickcheck/splitmix#RandomState\">@moonbitlang/core/quickcheck/splitmix.RandomState</a>) -> X?",
              "loc": {
                "path": "moonbitlang/core/option",
                "file": "option.mbt",
                "line": 427,
                "column": 71
              }
            }
          ]
        }
      ],
      "methods": [
        {
          "name": "bind",
          "docstring": "\n Binds an option to a function that returns another option.\n\n # Example\n\n ```\n let a = Option::Some(5)\n let r1 = a.bind(fn(x){ Some(x * 2) })\n assert_eq!(r1, Some(10))\n let b : Option[Int] = None\n let r2 = b.bind(fn(x){ Some(x * 2) })\n assert_eq!(r2, None)\n ```",
          "signature": "fn <a href=\"moonbitlang/core/option#Option\">Option</a>::bind[T, U](self : T?, f : (T) -> U?) -> U?",
          "loc": {
            "path": "moonbitlang/core/option",
            "file": "option.mbt",
            "line": 191,
            "column": 8
          }
        },
        {
          "name": "compare",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/option#Option\">Option</a>::compare[X : <a href=\"moonbitlang/core/builtin#Compare\">Compare</a> + <a href=\"moonbitlang/core/builtin#Eq\">Eq</a>](self : X?, other : X?) -> Int",
          "loc": {
            "path": "moonbitlang/core/option",
            "file": "option.mbt",
            "line": 328,
            "column": 8
          }
        },
        {
          "name": "default",
          "docstring": "\n `None`",
          "signature": "fn <a href=\"moonbitlang/core/option#Option\">Option</a>::default[X]() -> X?",
          "loc": {
            "path": "moonbitlang/core/option",
            "file": "option.mbt",
            "line": 358,
            "column": 16
          }
        },
        {
          "name": "filter",
          "docstring": "\n Filters the option by applying the given predicate function `f`.\n\n If the predicate function `f` returns `true` for the value contained in the option,\n the same option is returned. Otherwise, `None` is returned.\n\n # Example\n ```\n let x = Some(3)\n assert_eq!(x.filter(fn(x){ x > 5 }), None)\n assert_eq!(x.filter(fn(x){ x < 5 }), Some(3))\n ```",
          "signature": "fn <a href=\"moonbitlang/core/option#Option\">Option</a>::filter[T](self : T?, f : (T) -> Bool) -> T?",
          "loc": {
            "path": "moonbitlang/core/option",
            "file": "option.mbt",
            "line": 263,
            "column": 8
          }
        },
        {
          "name": "flatten",
          "docstring": "\n Flattens an `Option` of `Option` into a single `Option`.\n\n If the input `Option` is `Some(Some(value))`, the function returns `Some(value)`.\n\n # Example\n\n ```\n let a = Some(Some(42));\n assert_eq!(@option.flatten(a), Some(42))\n let b : Int?? = Some(None)\n assert_eq!(@option.flatten(b), None)\n ```",
          "signature": "fn <a href=\"moonbitlang/core/option#Option\">Option</a>::flatten[T](self : T??) -> T?",
          "loc": {
            "path": "moonbitlang/core/option",
            "file": "option.mbt",
            "line": 219,
            "column": 8
          }
        },
        {
          "name": "is_empty",
          "docstring": "\n Checks if the option is empty.",
          "signature": "fn <a href=\"moonbitlang/core/option#Option\">Option</a>::is_empty[T](self : T?) -> Bool",
          "loc": {
            "path": "moonbitlang/core/option",
            "file": "option.mbt",
            "line": 236,
            "column": 8
          }
        },
        {
          "name": "iter",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/option#Option\">Option</a>::iter[T](self : T?) -> <a href=\"moonbitlang/core/builtin#Iter\">Iter</a>[T]",
          "loc": {
            "path": "moonbitlang/core/option",
            "file": "option.mbt",
            "line": 363,
            "column": 8
          }
        },
        {
          "name": "map",
          "docstring": "\n Maps the value of an `Option` using a provided function.\n\n # Example\n\n ```\n let a = Some(5)\n assert_eq!(a.map(fn(x){ x * 2 }), Some(10))\n\n let b = None\n assert_eq!(b.map(fn(x){ x * 2 }), None)\n ```",
          "signature": "fn <a href=\"moonbitlang/core/option#Option\">Option</a>::map[T, U](self : T?, f : (T) -> U) -> U?",
          "loc": {
            "path": "moonbitlang/core/option",
            "file": "option.mbt",
            "line": 113,
            "column": 8
          }
        },
        {
          "name": "map_or",
          "docstring": "\n Returns the provided default result (if none), or applies a function to the contained value (if any).\n Arguments passed to map_or are eagerly evaluated; if you are passing the result of a function call, it is recommended to use `map_or_else`, which is lazily evaluated.\n\n # Example\n\n ```\n let a = Some(5)\n assert_eq!(a.map_or(3, fn(x){ x * 2 }), 10)\n ```",
          "signature": "fn <a href=\"moonbitlang/core/option#Option\">Option</a>::map_or[T, U](self : T?, default : U, f : (T) -> U) -> U",
          "loc": {
            "path": "moonbitlang/core/option",
            "file": "option.mbt",
            "line": 138,
            "column": 8
          }
        },
        {
          "name": "map_or_else",
          "docstring": "\n Computes a default function result (if none), or applies a different function to the contained value (if any).\n\n # Example\n\n ```\n let a = Some(5)\n assert_eq!(a.map_or_else(fn(){ 3 }, fn(x){ x * 2 }), 10)\n ```",
          "signature": "fn <a href=\"moonbitlang/core/option#Option\">Option</a>::map_or_else[T, U](self : T?, default : () -> U, f : (T) -> U) -> U",
          "loc": {
            "path": "moonbitlang/core/option",
            "file": "option.mbt",
            "line": 162,
            "column": 8
          }
        },
        {
          "name": "or",
          "docstring": "\n Return the contained `Some` value or the provided default.",
          "signature": "fn <a href=\"moonbitlang/core/option#Option\">Option</a>::or[T](self : T?, default : T) -> T",
          "loc": {
            "path": "moonbitlang/core/option",
            "file": "option.mbt",
            "line": 279,
            "column": 8
          }
        },
        {
          "name": "or_default",
          "docstring": "\n Return the contained `Some` value or the result of the `T::default()`.",
          "signature": "fn <a href=\"moonbitlang/core/option#Option\">Option</a>::or_default[T : <a href=\"moonbitlang/core/builtin#Default\">Default</a>](self : T?) -> T",
          "loc": {
            "path": "moonbitlang/core/option",
            "file": "option.mbt",
            "line": 313,
            "column": 8
          }
        },
        {
          "name": "or_else",
          "docstring": "\n Return the contained `Some` value or the provided default.\n\n Default is lazily evaluated",
          "signature": "fn <a href=\"moonbitlang/core/option#Option\">Option</a>::or_else[T](self : T?, default : () -> T) -> T",
          "loc": {
            "path": "moonbitlang/core/option",
            "file": "option.mbt",
            "line": 297,
            "column": 8
          }
        },
        {
          "name": "or_error",
          "docstring": "",
          "signature": "fn <a href=\"moonbitlang/core/option#Option\">Option</a>::or_error[T, Err : <a href=\"moonbitlang/core/error#Error\">Error</a>](self : T?, err : Err) -> T!Err",
          "loc": {
            "path": "moonbitlang/core/option",
            "file": "option.mbt",
            "line": 399,
            "column": 8
          }
        }
      ]
    }
  ]
}