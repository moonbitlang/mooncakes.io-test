{
  "name": "moonbitlang/x/fs",
  "traits": [],
  "types": [
    {
      "name": "IOError",
      "docstring": "",
      "signature": "pub type! IOError String\n",
      "loc": {
        "path": "moonbitlang/x/fs",
        "file": "fs.mbt",
        "line": 16,
        "column": 11
      },
      "methods": [],
      "impls": [
        {
          "self": {
            "kind": "constr",
            "constructor": { "name": "IOError", "path": "moonbitlang/x/fs" },
            "arguments": []
          },
          "trait": { "name": "Show", "path": "moonbitlang/core/builtin" },
          "methods": [
            {
              "name": "output",
              "docstring": "automatically derived",
              "signature": "fn output(<a href=\"moonbitlang/x/fs#IOError\">IOError</a>, <a href=\"moonbitlang/core/builtin#Logger\">Logger</a>) -> Unit",
              "loc": {
                "path": "moonbitlang/x/fs",
                "file": "fs.mbt",
                "line": 16,
                "column": 33
              }
            }
          ]
        }
      ]
    }
  ],
  "typealias": [],
  "values": [
    {
      "name": "create_dir",
      "docstring": " Creates a directory at the specified path.\n Note: nested directories are not supported for native backend\n\n # Parameters\n\n - `path` : The path where the directory should be created.\n - `mode~` : The mode of the directory. Default is `777`.",
      "signature": "fn create_dir(path : String) -> Unit!<a href=\"moonbitlang/core/error#Error\">Error</a>",
      "loc": {
        "path": "moonbitlang/x/fs",
        "file": "fs.mbt",
        "line": 106,
        "column": 8
      }
    },
    {
      "name": "is_dir",
      "docstring": " Checks if the given path is a directory.\n\n # Parameters\n\n - `path` : The string representing the path to be checked.\n\n # Returns\n\n - `Bool` : `true` if the path is a directory, `false` otherwise.",
      "signature": "fn is_dir(path : String) -> Bool!<a href=\"moonbitlang/core/error#Error\">Error</a>",
      "loc": {
        "path": "moonbitlang/x/fs",
        "file": "fs.mbt",
        "line": 119,
        "column": 8
      }
    },
    {
      "name": "is_file",
      "docstring": " Check if the given path points to a file.\n\n # Parameters\n\n - `path` : The string representing the path to be checked.\n\n # Returns\n\n - `Bool` : `true` if the path points to a file, `false` otherwise.",
      "signature": "fn is_file(path : String) -> Bool!<a href=\"moonbitlang/core/error#Error\">Error</a>",
      "loc": {
        "path": "moonbitlang/x/fs",
        "file": "fs.mbt",
        "line": 132,
        "column": 8
      }
    },
    {
      "name": "path_exists",
      "docstring": " Checks if a path exists.\n\n # Parameters\n - `path`: A `String` representing the file path.\n\n # Returns\n A boolean indicating whether the path exists.",
      "signature": "fn path_exists(path : String) -> Bool",
      "loc": {
        "path": "moonbitlang/x/fs",
        "file": "fs.mbt",
        "line": 82,
        "column": 8
      }
    },
    {
      "name": "read_dir",
      "docstring": " Reads the contents of a directory and returns an array of filenames.\n\n # Parameters\n\n - `path` : The path to the directory to be read.\n\n # Returns\n\n - An array of strings representing the file name and directory name in the directory.",
      "signature": "fn read_dir(path : String) -> <a href=\"moonbitlang/core/array#Array\">Array</a>[String]!<a href=\"moonbitlang/core/error#Error\">Error</a>",
      "loc": {
        "path": "moonbitlang/x/fs",
        "file": "fs.mbt",
        "line": 95,
        "column": 8
      }
    },
    {
      "name": "read_file_to_bytes",
      "docstring": " Reads the content of a file specified by the given path and returns its\n content as `Bytes`\n\n # Parameters\n\n - `path` : The path to the file to be read.\n\n # Returns\n\n - A `Bytes` representing the content of the file.",
      "signature": "fn read_file_to_bytes(path : String) -> Bytes!<a href=\"moonbitlang/core/error#Error\">Error</a>",
      "loc": {
        "path": "moonbitlang/x/fs",
        "file": "fs.mbt",
        "line": 28,
        "column": 8
      }
    },
    {
      "name": "read_file_to_string",
      "docstring": " Reads the content of a file specified by the given path and returns its\n content as `String`.\n\n # Parameters\n\n - `path` : The path to the file to be read.\n - `encoding~` : The encoding of the file. Only support `utf8` for now.\n\n # Returns\n\n - A `String` representing the content of the file.",
      "signature": "fn read_file_to_string(path : String, encoding~ : String = ..) -> String!<a href=\"moonbitlang/core/error#Error\">Error</a>",
      "loc": {
        "path": "moonbitlang/x/fs",
        "file": "fs.mbt",
        "line": 43,
        "column": 8
      }
    },
    {
      "name": "remove_dir",
      "docstring": " Removes a directory at the specified path.\n\n # Parameters\n\n - `path` : The string path to the directory that needs to be removed.",
      "signature": "fn remove_dir(path : String) -> Unit!<a href=\"moonbitlang/core/error#Error\">Error</a>",
      "loc": {
        "path": "moonbitlang/x/fs",
        "file": "fs.mbt",
        "line": 141,
        "column": 8
      }
    },
    {
      "name": "remove_file",
      "docstring": " Removes a file at the specified path.\n\n # Parameters\n\n - `path` : The path to the file that needs to be removed.",
      "signature": "fn remove_file(path : String) -> Unit!<a href=\"moonbitlang/core/error#Error\">Error</a>",
      "loc": {
        "path": "moonbitlang/x/fs",
        "file": "fs.mbt",
        "line": 150,
        "column": 8
      }
    },
    {
      "name": "write_bytes_to_file",
      "docstring": " Writes a `Bytes` to a file at the specified path.\n\n # Parameters\n\n - `path` : The path to the file where the bytes will be written.\n - `content` : A `Bytes` to be written to the file.",
      "signature": "fn write_bytes_to_file(path : String, content : Bytes) -> Unit!<a href=\"moonbitlang/core/error#Error\">Error</a>",
      "loc": {
        "path": "moonbitlang/x/fs",
        "file": "fs.mbt",
        "line": 56,
        "column": 8
      }
    },
    {
      "name": "write_string_to_file",
      "docstring": " Writes a `String` to a file at the specified path.\n\n # Parameters\n\n - `path` : The path to the file where the string will be written.\n - `content` : A `String` to be written to the file.\n - `encoding~` : The encoding of the file. Only support `utf8` for now.",
      "signature": "fn write_string_to_file(path : String, content : String, encoding~ : String = ..) -> Unit!<a href=\"moonbitlang/core/error#Error\">Error</a>",
      "loc": {
        "path": "moonbitlang/x/fs",
        "file": "fs.mbt",
        "line": 67,
        "column": 8
      }
    }
  ],
  "misc": []
}