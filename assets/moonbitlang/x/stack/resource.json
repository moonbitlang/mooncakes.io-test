{
  "kind": "package",
  "relative_path": "stack",
  "module_path": "moonbitlang/x",
  "readme_content": "# Stack\n\n## Overview\n\nStack is a last in first out (LIFO) data structure, allowing to process their elements in the reverse order they come.\n\n## Usage\n\n### Create and Clear\n\nThe stack can be created with the `new` function, or by using the function with prefix `from` to create a stack from an existing collection.\nFor instance, `from_array` creates a stack from an array.\n\n```moonbit\nlet st = Stack::new()\nlet st2 = Stack::from_array([1, 2, 3]) // Stack::[1, 2, 3]\nlet st3 = Stack::of([1, 2, 3]) // Stack::[1, 2, 3]\n```\n\nTo clear the elements of the stack, use the `clear` method.\n\n```moonbit\nst.clear()\n```\n\n### Length\n\nUse `length` to get the number of elements in the stack. The `is_empty` method can be used to check if the stack is empty.\n\n```moonbit\nlet st = Stack::of([1, 2, 3])\nst.length() // 3\nst.is_empty() // false\n```\n\n### Pop and Push\n\nTo add elements to the stack, use the `push` method, and to remove them, use the `pop` method.\n\n```moonbit\nlet st = Stack::new()\nst.push(1)\nst.push(2)\nst.pop() // Some(2)\n```\n\nThe unsafe version of `pop` is `pop_exn`, which will panic if the stack is empty.\n\n```moonbit\nlet st = Stack::new()\nst.push(1)\nst.pop_exn() // 1\nst.pop_exn() // panic\n```\n\nIf you don't want to remove the element, you can use the `peek` method and the unsafe version `peek_exn`.\n\n```moonbit\nlet st = Stack::of([1, 2, 3])\nst.peek() // Some(1)\nst.peek_exn() // 1\n```\n\nIf the result of `pop` is not needed, you can use the `drop` method.\n\n```moonbit\nlet st = Stack::of([1, 2, 3])\nst.drop()\n// st = [2, 3]\n```\n\n### Traverse\n\nTo traverse the stack, use the `iter` method.\n\n```moonbit\nlet st = Stack::of([1, 2, 3])\nlet mut sum = 0\nst.each(fn(x) { sum += x }) // sum = 6\n```\n\n### Conversion\n\nYou can convert the stack to an array using the `to_array` method.\n\n```moonbit\nlet st = Stack::of([1, 2, 3])\nst.to_array() // [1, 2, 3]\n```\n",
  "package_data": "moonbitlang/x/stack/package_data.json",
  "source_files": [ "stack.mbt", "types.mbt" ]
}