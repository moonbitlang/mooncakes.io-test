{
  "kind": "module_and_package",
  "meta_info": {
    "name": "moonbitlang/wasm4",
    "version": "0.2.6",
    "readme": "README.md",
    "repository": "https://github.com/moonbitlang/wasm4",
    "license": "Apache-2.0",
    "keywords": [ "game" ],
    "description": "An opinionated binding for WASM-4, a retro game framework using WebAssembly"
  },
  "readme_content": "# Wasm4 Binding for MoonBit\n\nThis is an opinionated binding for [Wasm4](https://wasm4.org) in MoonBit.\n\n## Prerequisites\n\n- MoonBit toolchain\n- [Node.js](https://nodejs.org/en)\n\n## Usage\n\n- Add this package: `moon add moonbitlang/wasm4`\n- Develop with this package as other packages\n- Optionally export a function called `start` that will be executed once on\n  initialization and export a function called `update` that will be executed at\n  60Hz for the expected backend\n- Import a memory with the module of `env` and name of `memory`\n- Build with `moon build --target <wasm-gc or wasm>` with the respective backend\n- Execute `npx wasm4 run <target>.wasm`. The target should be located in\n  `target/wasm/release/build/<package path>/<package name>.wasm` for wasm\n  backend, or `target/wasm-gc/release/build/<package path>/<package name>.wasm`\n  for wasm-gc backend. The browser should open automatically and display the\n  game. Enjoy\n\n## Examples\n\nThe snake example (adapted from the Wasm4 documentation) demonstrates the usage. You may execute\n\n```bash\nmoon build --source-dir example/snake --target wasm\nnpx wasm4 run example/snake/target/wasm/release/build/snake.wasm\n```\n\nand enjoy the game.\n\n## References\n\n- For more information about MoonBit, visit:\n  [MoonBit official website](https://www.moonbitlang.com/docs/syntax)\n- For more information about Wasm4 and how to play, visit:\n  [WASM-4 Documentation](https://wasm4.org/docs/)\n\n# Wasm4 Binding for MoonBit\n\nThis is an opinionated binding for [Wasm4](https://wasm4.org) in MoonBit.\n\n## Prerequisites\n\n- MoonBit toolchain\n- [Node.js](https://nodejs.org/en)\n\n## Usage\n\n- Add this package: `moon add moonbitlang/wasm4`\n- Develop with this package as other packages\n- Optionally export a function called `start` that will be executed once on\n  initialization and export a function called `update` that will be executed at\n  60Hz for the expected backend\n- Import a memory with the module of `env` and name of `memory`\n- Build with `moon build --target <wasm-gc or wasm>` with the respective backend\n- Execute `npx wasm4 run <target>.wasm`. The target should be located in\n  `target/wasm/release/build/<package path>/<package name>.wasm` for wasm\n  backend, or `target/wasm-gc/release/build/<package path>/<package name>.wasm`\n  for wasm-gc backend. The browser should open automatically and display the\n  game. Enjoy\n\n## Examples\n\nThe snake example (adapted from the Wasm4 documentation) demonstrates the usage. You may execute\n\n```bash\nmoon build --source-dir example/snake --target wasm\nnpx wasm4 run example/snake/target/wasm/release/build/snake.wasm\n```\n\nand enjoy the game.\n\n## References\n\n- For more information about MoonBit, visit:\n  [MoonBit official website](https://www.moonbitlang.com/docs/syntax)\n- For more information about Wasm4 and how to play, visit:\n  [WASM-4 Documentation](https://wasm4.org/docs/)\n",
  "module_index": "moonbitlang/wasm4/module_index.json",
  "package_data": "moonbitlang/wasm4/package_data.json",
  "source_files": [
    "ffi.mbt", "ffi.wasm-gc.mbt", "ffi.wasm.mbt", "function.mbt",
    "memory.mbt", "utils.mbt"
  ]
}