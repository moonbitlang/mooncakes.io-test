{
  "name": "xunyoyo/NyaSearch",
  "traits": [],
  "types": [
    {
      "name": "EmptyPatternError",
      "docstring": "",
      "signature": "type EmptyPatternError",
      "loc": {
        "path": "xunyoyo/NyaSearch",
        "file": "error.mbt",
        "line": 2,
        "column": 7
      },
      "methods": [],
      "impls": [
        {
          "self": {
            "kind": "constr",
            "constructor": {
              "name": "EmptyPatternError",
              "path": "xunyoyo/NyaSearch"
            },
            "arguments": []
          },
          "trait": { "name": "Show", "path": "moonbitlang/core/builtin" },
          "methods": [
            {
              "name": "output",
              "docstring": "automatically derived",
              "signature": "fn output(<a href=\"xunyoyo/NyaSearch#EmptyPatternError\">EmptyPatternError</a>, <a href=\"moonbitlang/core/builtin#Logger\">Logger</a>) -> Unit",
              "loc": {
                "path": "xunyoyo/NyaSearch",
                "file": "error.mbt",
                "line": 2,
                "column": 39
              }
            }
          ]
        }
      ]
    },
    {
      "name": "InvalidRangeError",
      "docstring": "",
      "signature": "type InvalidRangeError",
      "loc": {
        "path": "xunyoyo/NyaSearch",
        "file": "error.mbt",
        "line": 11,
        "column": 7
      },
      "methods": [],
      "impls": [
        {
          "self": {
            "kind": "constr",
            "constructor": {
              "name": "InvalidRangeError",
              "path": "xunyoyo/NyaSearch"
            },
            "arguments": []
          },
          "trait": { "name": "Show", "path": "moonbitlang/core/builtin" },
          "methods": [
            {
              "name": "output",
              "docstring": "automatically derived",
              "signature": "fn output(<a href=\"xunyoyo/NyaSearch#InvalidRangeError\">InvalidRangeError</a>, <a href=\"moonbitlang/core/builtin#Logger\">Logger</a>) -> Unit",
              "loc": {
                "path": "xunyoyo/NyaSearch",
                "file": "error.mbt",
                "line": 11,
                "column": 39
              }
            }
          ]
        }
      ]
    },
    {
      "name": "OptionChooseError",
      "docstring": "",
      "signature": "type OptionChooseError",
      "loc": {
        "path": "xunyoyo/NyaSearch",
        "file": "error.mbt",
        "line": 8,
        "column": 7
      },
      "methods": [],
      "impls": [
        {
          "self": {
            "kind": "constr",
            "constructor": {
              "name": "OptionChooseError",
              "path": "xunyoyo/NyaSearch"
            },
            "arguments": []
          },
          "trait": { "name": "Show", "path": "moonbitlang/core/builtin" },
          "methods": [
            {
              "name": "output",
              "docstring": "automatically derived",
              "signature": "fn output(<a href=\"xunyoyo/NyaSearch#OptionChooseError\">OptionChooseError</a>, <a href=\"moonbitlang/core/builtin#Logger\">Logger</a>) -> Unit",
              "loc": {
                "path": "xunyoyo/NyaSearch",
                "file": "error.mbt",
                "line": 8,
                "column": 39
              }
            }
          ]
        }
      ]
    },
    {
      "name": "PatternTooLongError",
      "docstring": "",
      "signature": "type PatternTooLongError",
      "loc": {
        "path": "xunyoyo/NyaSearch",
        "file": "error.mbt",
        "line": 5,
        "column": 7
      },
      "methods": [],
      "impls": [
        {
          "self": {
            "kind": "constr",
            "constructor": {
              "name": "PatternTooLongError",
              "path": "xunyoyo/NyaSearch"
            },
            "arguments": []
          },
          "trait": { "name": "Show", "path": "moonbitlang/core/builtin" },
          "methods": [
            {
              "name": "output",
              "docstring": "automatically derived",
              "signature": "fn output(<a href=\"xunyoyo/NyaSearch#PatternTooLongError\">PatternTooLongError</a>, <a href=\"moonbitlang/core/builtin#Logger\">Logger</a>) -> Unit",
              "loc": {
                "path": "xunyoyo/NyaSearch",
                "file": "error.mbt",
                "line": 5,
                "column": 41
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Prework",
      "docstring": "",
      "signature": "type Prework",
      "loc": {
        "path": "xunyoyo/NyaSearch",
        "file": "rabin_karp.mbt",
        "line": 2,
        "column": 6
      },
      "methods": [],
      "impls": []
    },
    {
      "name": "StringHash",
      "docstring": "",
      "signature": "pub struct StringHash {\n  n : Int\n  mod : Int64\n  base : Int64\n  hash : <a href=\"moonbitlang/core/array#Array\">Array</a>[Int64]\n  prework : <a href=\"xunyoyo/NyaSearch#Prework\">Prework</a>\n}",
      "loc": {
        "path": "xunyoyo/NyaSearch",
        "file": "rabin_karp.mbt",
        "line": 8,
        "column": 12
      },
      "methods": [],
      "impls": []
    }
  ],
  "typealias": [],
  "values": [
    {
      "name": "search",
      "docstring": "\n Searches for a pattern within a text using various string matching\n algorithms.\n\n Parameters:\n\n * `text` : The text to search in.\n * `pattern` : The pattern to search for.\n * `algorithm` (optional, labeled as `option`) : The search algorithm to use.\n Available options are:\n  * `\"auto\"` (default): Automatically selects the most suitable algorithm\n based on pattern characteristics\n  * `\"kmp\"`: Knuth-Morris-Pratt algorithm\n  * `\"rabin_karp\"`: Rabin-Karp algorithm\n  * `\"boyer_moore\"`: Boyer-Moore algorithm\n * `start` (optional): The starting index in the text to begin the search\n (inclusive). Defaults to 0.\n * `end` (optional): The ending index in the text to end the search\n (exclusive). Defaults to the length of the text.\n\n Returns the index of the first occurrence of the pattern in the text within\n the specified range, or -1 if the pattern is not found.\n\n Throws:\n\n * `EmptyPatternError` if the pattern is empty\n * `PatternTooLongError` if the pattern is longer than the text\n * `InvalidRangeError` if the search range is invalid (start > end, start < 0,\n or end > text length)\n * `OptionChooseError` if an invalid algorithm option is provided\n\n Examples:\n\n ```moonbit\n ///|\n /// basic\n search!(\"hello world\", \"world\") // content = 6, using auto method.\n search!(\"hello world\", \"world\", option=\"kmp\") // content = 6, using kmp method.\n\n ///|\n /// range\n search!(\"hello world\", \"o\", start=0, end=5) // content = 4\n ```",
      "signature": "fn search(text : String, pattern : String, option~ : String = .., start~ : Int = .., end~ : Int = ..) -> Int!<a href=\"moonbitlang/core/error#Error\">Error</a>",
      "loc": {
        "path": "xunyoyo/NyaSearch",
        "file": "nyasearch.mbt",
        "line": 44,
        "column": 8
      }
    }
  ],
  "misc": []
}