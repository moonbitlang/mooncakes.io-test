{
  "kind": "module_and_package",
  "meta_info": {
    "name": "xunyoyo/NyaSearch",
    "version": "0.1.0",
    "readme": "README.md",
    "repository": "https://github.com/moonbit-community/NyaSearch",
    "license": "Apache-2.0",
    "keywords": [ "string search", "KMP", "Knuth-Morris-Pratt" ],
    "description": "NyaSearch: A High-Performance Text Search Library",
    "source": "src"
  },
  "readme_content": "# 🐱 NyaSearch: A High-Performance Text Search Library\n\n[English](https://github.com/moonbit-community/NyaSearch/blob/main/README.md) | [简体中文](https://github.com/moonbit-community/NyaSearch/blob/main/README_zh_CN.md)\n\n[![Build Status](https://img.shields.io/github/actions/workflow/status/moonbit-community/NyaSearch/ci.yml)](https://github.com/moonbit-community/NyaSearch/actions)\n[![License](https://img.shields.io/github/license/moonbit-community/NyaSearch)](LICENSE)\n\n\n**NyaSearch** is a fast and efficient text search library designed to perform substring matching in large-scale text data. It supports multiple search algorithms, making it suitable for text editors, log analysis, and data processing.\n\n🚀 **Key Features**\n- 🔍 **Multiple Algorithms** – Supports KMP, Rabin-Karp, and Boyer-Moore.\n- ⚡ **High Performance** – Optimized for fast substring searching.\n- 🛠 **Easy to Use** – Simple API for quick integration.\n- ✅ **Well-Tested** – Comes with comprehensive unit tests.\n- 🔄 **Open-Source** – Actively maintained by the Moonbit Community.\n\n---\n\n## 📥 Installation\n\n```\nmoon add xunyoyo/NyaSearch\n```\n\n## **🚀 Usage Guide for `NyaSearch`**\nNyaSearch provides a **powerful and flexible string search function** that supports multiple algorithms. You can either **let it automatically choose the best algorithm** or **manually specify one**. You can also define a **search range** within the text for more precise matching.\n\n---\n\n### **🔍 Basic Usage**\nThe simplest way to use `NyaSearch` is to call `search`, which will **automatically select the most efficient algorithm** based on the pattern and text.\n\n```moonbit\n@NyaSearch.search?(\"hello world\", \"world\") // Returns: Ok(6), using the best algorithm\n```\n\nIf you want to **manually choose an algorithm**, simply provide the `option` parameter:\n\n```moonbit\n@NyaSearch.search?(\"hello world\", \"world\", option=\"kmp\") // Returns: Ok(6), using the KMP method\n@NyaSearch.search?(\"hello world\", \"world\", option=\"boyer_moore\") // Returns: Ok(6), using Boyer-Moore\n@NyaSearch.search?(\"hello world\", \"world\", option=\"rabin_karp\") // Returns: Ok(6), using Rabin-Karp\n```\n\n---\n\n### **🎯 Searching Within a Specific Range**\nYou can **search within a specific part of the text** by providing `start` and `end` indices.\n\n```moonbit\n@NyaSearch.search!(\"hello world\", \"o\", start=0, end=5) // Returns: Ok(4)\n@NyaSearch.search!(\"hello world\", \"o\", start=5, end=11) // Returns: Ok(7)\n```\n- The `start` index **includes** the character at that position.\n- The `end` index **excludes** the character at that position.\n\n---\n\n### **⚡ How \"Auto\" Mode Works**\nNyaSearch's **Auto Mode** intelligently selects the most suitable search algorithm based on the characteristics of the **text** and **pattern** to optimize performance.\n\nIt evaluates:\n- **Pattern length**\n- **Text length**\n- **Character uniqueness**\n- **Repetition ratio**\n\nBased on these factors, `search(..., option=\"auto\")` will choose the best algorithm dynamically.\n\n---\n\n#### **🔍 Auto Mode Selection Logic**\n| **Condition** | **Selected Algorithm** | **Reason** |\n|--------------|----------------------|------------|\n| **Pattern ≤ 2 characters** OR **Text ≤ 10 characters** | `brute_force` | Short patterns or small text are best handled by brute force. |\n| **Pattern has a high number of unique characters (≥ 20) & is longer than 15** | `boyer_moore` | Boyer-Moore benefits from large alphabets and long patterns by skipping more characters. |\n| **Pattern has a moderate number of unique characters (≥ 10) or is at least 8 characters long** | - If **repetition ratio** (same character repeating) is high (>30%), use `kmp`.  | - **KMP** handles patterns with repeating prefixes efficiently. |\n| | - If repetition is low, use `rabin_karp`. | - **Rabin-Karp** benefits from hashing unique sequences. |\n| **Otherwise** (small alphabet or short pattern) | `kmp` | KMP is a good general-purpose algorithm. |\n\n---\n\n#### **🎯 Examples**\n##### **1️⃣ Short pattern or small text → Uses brute force**\n```moonbit\nsearch(\"hello\", \"o\")  // Uses brute force\nsearch(\"ab\", \"b\")     // Uses brute force\nsearch(\"abcdefgh\", \"d\") // Uses brute force\n```\n\n##### **2️⃣ Long pattern with many unique characters → Uses Boyer-Moore**\n```moonbit\nsearch(\"this is a very long text\", \"UNIQUEPATTERNXYZ\") // Uses Boyer-Moore\nsearch(\"random words here\", \"QWERTYASDFGHZXCVBNM\") // Uses Boyer-Moore\n```\n\n##### **3️⃣ Medium pattern with high repetition → Uses KMP**\n```moonbit\nsearch(\"abababababababab\", \"ababab\") // Uses KMP\nsearch(\"aaaaaaaaaaabcaaaaaaa\", \"aaaaaa\") // Uses KMP (high repetition ratio)\n```\n\n##### **4️⃣ Medium pattern with low repetition → Uses Rabin-Karp**\n```moonbit\nsearch(\"abcdefgabcdefgabcdefg\", \"abcdef\") // Uses Rabin-Karp (low repetition)\nsearch(\"random_data_here\", \"xyz123\") // Uses Rabin-Karp\n```\n---\n\n#### **🎯 Why Auto Mode?**\n✅ **Eliminates the need to manually select algorithms.**  \n✅ **Ensures optimal performance based on pattern structure.**  \n✅ **Automatically adapts to different search scenarios.**  \n\nBy using `option=\"auto\"`, **NyaSearch dynamically chooses the most efficient search method**, saving you time and ensuring optimal performance in all cases! 🚀\n\n---\n\n### **⚠️ Error Handling**\nIf something goes wrong, `NyaSearch` will raise a **meaningful error message**.\n\n| Error | Reason |\n|-------|--------|\n| `EmptyPatternError` | When the search pattern is empty |\n| `PatternTooLongError` | If the pattern is longer than the text |\n| `InvalidRangeError` | If `start` or `end` indices are invalid |\n| `OptionChooseError` | If an unsupported algorithm is chosen |\n\n\n---\n\n### **🛠 Full Example**\n```moonbit\nlet text = \"The quick brown fox jumps over the lazy dog\"\nlet pattern = \"fox\"\n\n// Auto mode (default)\nlet index = @NyaSearch.search?(text, pattern)\nprint(\"Found at:\", index) // Found at: Ok(16)\n\n// Specify an algorithm\nlet index_kmp = @NyaSearch.search?(text, pattern, option=\"kmp\")\nprint(\"KMP found at:\", index_kmp)\n\n// Search within a range\nlet index_range = @NyaSearch.search?(text, pattern, start=10, end=20)\nprint(\"Range search found at:\", index_range)\n```\n\n🎉 **Now you’re ready to use NyaSearch for high-performance text searching!** 🚀\n\n## 📜 License\nThis project is licensed under the Apache-2.0 License. See [LICENSE](https://github.com/moonbit-community/NyaSearch/blob/main/LICENSE) for details.\n\n## 📢 Contact & Support\n+ Moonbit Community: [moonbit-community](https://github.com/moonbit-community)\n+ GitHub Issues: [Report an issue](https://github.com/moonbit-community/NyaSearch/issues)\n\n👋 If you like this project, give it a ⭐! Happy coding! 🚀\n",
  "module_index": "xunyoyo/NyaSearch/module_index.json",
  "package_data": "xunyoyo/NyaSearch/package_data.json",
  "source_files": [
    "boyer_moore.mbt", "brute_force.mbt", "error.mbt", "kmp.mbt",
    "nyasearch.mbt", "rabin_karp.mbt", "util.mbt"
  ]
}