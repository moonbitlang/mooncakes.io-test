{
  "name": "xunyoyo/linalg/lib/matrix",
  "traits": [],
  "types": [
    {
      "name": "Matrix",
      "docstring": "",
      "signature": "type Matrix",
      "loc": {
        "path": "xunyoyo/linalg/lib/matrix",
        "file": "matrix.mbt",
        "line": 2,
        "column": 8
      },
      "methods": [
        {
          "name": "apply",
          "docstring": " Applies a function to every element in the matrix, modifying the matrix\n in-place.\n\n Parameters:\n\n * `matrix`: The matrix to be modified.\n * `transform`: A function that takes a `Double` and returns a `Double`, which\n will be applied to each element in the matrix.\n\n Returns the modified matrix.\n\n Example:\n\n ```moonbit\n test \"matrix/apply\" {\n   let m = new_matrix([[1.0, 2.0], [3.0, 4.0]])\n   let square = fn(x: Double) -> Double { x * x }\n   \n   let result = m.apply(square)\n   inspect!(result.data, content=\"[[1.0, 4.0], [9.0, 16.0]]\")\n }\n \n test \"matrix/apply_with_negative\" {\n   let m = ew_matrix([[1.0, -2.0], [-3.0, 4.0]])\n   let abs = fn(x: Double) -> Double { \n     if x < 0.0 { -x } else { x }\n   }\n   \n   let result = m.apply(abs)\n   inspect!(result.data, content=\"[[1.0, 2.0], [3.0, 4.0]]\")\n }\n ```",
          "signature": "fn <a href=\"xunyoyo/linalg/lib/matrix#Matrix\">Matrix</a>::apply(self : <a href=\"xunyoyo/linalg/lib/matrix#Matrix\">Matrix</a>, f : (Double) -> Double) -> <a href=\"xunyoyo/linalg/lib/matrix#Matrix\">Matrix</a>",
          "loc": {
            "path": "xunyoyo/linalg/lib/matrix",
            "file": "matrix.mbt",
            "line": 544,
            "column": 8
          }
        },
        {
          "name": "cholesky",
          "docstring": "\n Performs Cholesky decomposition of a positive-definite matrix.\n Decomposes a matrix A into the product L·L^T where L is a lower triangular matrix.\n\n Parameters:\n * `matrix`: Input matrix to decompose. Must be positive-definite.\n\n Returns a lower triangular matrix L such that A = L·L^T.\n\n Throws:\n * `MatrixShapeError` if the input matrix is not square.\n * `MatrixError` if the input matrix is not positive-definite.\n\n Example:\n ```moonbit\n test \"cholesky/basic\" {\n   let a = new_matrix([[4.0, 12.0, -16.0], [12.0, 37.0, -43.0], [-16.0, -43.0, 98.0]])\n   let l = a.cholesky()\n   \n   // Verify L is lower triangular\n   for i = 0; i < l.rows; i = i + 1 {\n     for j = i + 1; j < l.cols; j = j + 1 {\n       inspect!(l.data[i][j], content=\"0.0\")\n     }\n   }\n   \n   // Verify A = L·L^T\n   let lt = l.transpose()\n   let a2 = l * lt\n   inspect!(a2.approx_eq(a), content=\"true\")\n }\n ```",
          "signature": "fn <a href=\"xunyoyo/linalg/lib/matrix#Matrix\">Matrix</a>::cholesky(self : <a href=\"xunyoyo/linalg/lib/matrix#Matrix\">Matrix</a>) -> <a href=\"xunyoyo/linalg/lib/matrix#Matrix\">Matrix</a>",
          "loc": {
            "path": "xunyoyo/linalg/lib/matrix",
            "file": "cholesky.mbt",
            "line": 33,
            "column": 8
          }
        },
        {
          "name": "copy",
          "docstring": "\n Creates a new matrix from a two-dimensional array of double-precision\n floating-point numbers. If the dimensions are not explicitly specified, they\n will be inferred from the input array.\n\n Parameters:\n\n * `data` : A two-dimensional array of type `Array[Array[Double]]` containing\n the matrix elements.\n * `rows` : Optional. The number of rows in the matrix. Defaults to the number\n of arrays in `data`.\n * `cols` : Optional. The number of columns in the matrix. Defaults to the\n length of the first array in `data`.\n\n Returns a new `Matrix` instance containing a deep copy of the input data.\n\n Examples:\n\n ```moonbit\n test \"new_matrix/default_dimensions\" {\n   // Create a 2x2 matrix with default dimensions\n   let data = [[1.0, 2.0], [3.0, 4.0]]\n   let matrix = new_matrix(data)\n   inspect!(matrix.shape(), content=\"(2, 2)\")\n   inspect!(matrix.data[0][0], content=\"1.0\")\n }\n \n test \"new_matrix/explicit_dimensions\" {\n   // Create a matrix with explicit dimensions\n   let data = [[1.0, 2.0, 3.0]]\n   let matrix = new_matrix(data, rows=1, cols=3)\n   inspect!(matrix.shape(), content=\"(1, 3)\")\n }\n ```",
          "signature": "fn <a href=\"xunyoyo/linalg/lib/matrix#Matrix\">Matrix</a>::copy(self : <a href=\"xunyoyo/linalg/lib/matrix#Matrix\">Matrix</a>) -> <a href=\"xunyoyo/linalg/lib/matrix#Matrix\">Matrix</a>",
          "loc": {
            "path": "xunyoyo/linalg/lib/matrix",
            "file": "matrix.mbt",
            "line": 822,
            "column": 8
          }
        },
        {
          "name": "det",
          "docstring": " Calculates the determinant of a square matrix using the Laplace expansion\n along the first row.\n\n Parameters:\n\n * `matrix`: A square matrix whose determinant needs to be calculated.\n\n Returns a Double value representing the determinant of the matrix.\n\n Example:\n\n ```moonbit\n test \"determinant\" {\n   let m1 = Matrix::new(1, 1)\n   m1.data[0][0] = 5.0\n   inspect!(m1.det(), content=\"5.0\")\n \n   let m2 = Matrix::new(2, 2)\n   m2.data[0][0] = 1.0\n   m2.data[0][1] = 2.0\n   m2.data[1][0] = 3.0\n   m2.data[1][1] = 4.0\n   inspect!(m2.det(), content=\"-2.0\") // 1*4 - 2*3 = -2\n }\n ```",
          "signature": "fn <a href=\"xunyoyo/linalg/lib/matrix#Matrix\">Matrix</a>::det(self : <a href=\"xunyoyo/linalg/lib/matrix#Matrix\">Matrix</a>) -> Double",
          "loc": {
            "path": "xunyoyo/linalg/lib/matrix",
            "file": "det.mbt",
            "line": 26,
            "column": 8
          }
        },
        {
          "name": "dot",
          "docstring": " Calculates the dot product of two matrices. If matrices have different shapes,\n they will be flattened into 1D vectors first.\n\n Parameters:\n\n * `first`: First matrix operand\n * `second`: Second matrix operand\n\n Returns the scalar dot product of the two matrices after flattening.\n\n Throws an error if the total number of elements in matrices are different,\n with the message \"MatrixShapeError: Matrices must have same total number of elements\n after flattening for dot product\".\n\n Examples:\n\n ```moonbit\n // same shape vectors\n let a = new_matrix([1, 2, 3])\n let b = new_matrix([2, 3, 4])\n // answer is 1*2 + 2*3 + 3*4 = 20\n println(dot(a, b)) // 20\n println(a.dot(b))  // 20\n\n // different shapes but same total elements\n let c = new_matrix([[1, 2], [3, 4]])  // 2x2 matrix\n let d = new_matrix([1, 2, 3, 4])      // 1x4 vector\n // flattened: [1,2,3,4] · [1,2,3,4] = 30\n println(dot(c, d)) // 30\n\n // higher dimensions\n let e = new_matrix([[[1, 2], [3, 4]], [[5, 6], [7, 8]]])  // 2x2x2 tensor\n let f = new_matrix([1, 2, 3, 4, 5, 6, 7, 8])              // 1x8 vector\n println(dot(e, f)) // 204\n\n // error case - different total elements\n let g = new_matrix([1, 2, 3])\n let h = new_matrix([1, 2, 3, 4])\n println(dot(g, h)) // throws MatrixShapeError\n ```",
          "signature": "fn <a href=\"xunyoyo/linalg/lib/matrix#Matrix\">Matrix</a>::dot(self : <a href=\"xunyoyo/linalg/lib/matrix#Matrix\">Matrix</a>, b : <a href=\"xunyoyo/linalg/lib/matrix#Matrix\">Matrix</a>) -> Double",
          "loc": {
            "path": "xunyoyo/linalg/lib/matrix",
            "file": "matrix.mbt",
            "line": 131,
            "column": 8
          }
        },
        {
          "name": "eigen",
          "docstring": "\n Computes eigenvalues and eigenvectors of a square matrix using QR algorithm\n with implicit shifts. The QR algorithm iteratively decomposes the matrix into\n a product of an orthogonal matrix Q and an upper triangular matrix R,\n converging to a diagonal matrix containing eigenvalues.\n\n Parameters:\n\n * `matrix` : A square matrix whose eigenvalues and eigenvectors are to be\n computed.\n * `max_iterations` : Maximum number of iterations for the QR algorithm.\n Defaults to 1000.\n * `tolerance` : Convergence tolerance for off-diagonal elements. The\n algorithm stops when the Frobenius norm of off-diagonal elements is less than\n this value. Defaults to 1e-10.\n\n Returns a tuple `(eigenvalues, eigenvectors)` where:\n\n * `eigenvalues` : An array of Double values representing the eigenvalues of\n the matrix\n * `eigenvectors` : A matrix whose columns are the corresponding eigenvectors\n\n Throws \"MatrixShapeError\" if the input matrix is not square.\n\n Examples:\n\n ```moonbit\n test \"eigen/symmetric\" {\n   // Create a 2x2 symmetric matrix\n   let a = new_matrix([[3.0, 0.0], [0.0, 4.0]])\n   let (eigenvalues, eigenvectors) = a.eigen()\n   // Eigenvalues should be 3.0 and 4.0\n   inspect!(eigenvalues, content=\"[3.0, 4.0]\")\n }\n \n test \"panic eigen/non_square\" {\n   let a = new_matrix([[1.0, 2.0], [3.0, 4.0], [5.0, 6.0]])\n   panic!(a.eigen())\n }\n ```",
          "signature": "fn <a href=\"xunyoyo/linalg/lib/matrix#Matrix\">Matrix</a>::eigen(self : <a href=\"xunyoyo/linalg/lib/matrix#Matrix\">Matrix</a>, max_iterations~ : Int = .., tol~ : Double = ..) -> (<a href=\"moonbitlang/core/array#Array\">Array</a>[Double], <a href=\"xunyoyo/linalg/lib/matrix#Matrix\">Matrix</a>)",
          "loc": {
            "path": "xunyoyo/linalg/lib/matrix",
            "file": "eigen.mbt",
            "line": 41,
            "column": 8
          }
        },
        {
          "name": "flat",
          "docstring": " Flattens a matrix into a 1 x (m\\*n) matrix by concatenating all rows\n horizontally.\n\n Parameters:\n\n * `matrix` : A Matrix object to be flattened.\n\n Returns a new Matrix with dimensions 1 x (m\\*n), where m and n are the number\n of rows and columns of the input matrix respectively.\n\n Example:\n\n ```moonbit\n test \"matrix/flat\" {\n   let m = Matrix::new(2, 3)\n   m.data[0][0] = 1\n   m.data[0][1] = 2\n   m.data[0][2] = 3\n   m.data[1][0] = 4\n   m.data[1][1] = 5\n   m.data[1][2] = 6\n   \n   let flattened = m.flat()\n   inspect!(flattened.rows, content=\"1\")\n   inspect!(flattened.cols, content=\"6\")\n   inspect!(flattened.data[0], content=\"[1, 2, 3, 4, 5, 6]\")\n }\n ```",
          "signature": "fn <a href=\"xunyoyo/linalg/lib/matrix#Matrix\">Matrix</a>::flat(self : <a href=\"xunyoyo/linalg/lib/matrix#Matrix\">Matrix</a>) -> <a href=\"xunyoyo/linalg/lib/matrix#Matrix\">Matrix</a>",
          "loc": {
            "path": "xunyoyo/linalg/lib/matrix",
            "file": "matrix.mbt",
            "line": 739,
            "column": 8
          }
        },
        {
          "name": "get",
          "docstring": " Retrieves the element at the specified row and column indices in a matrix.\n\n Parameters:\n\n * `matrix`: The matrix from which to retrieve the element.\n * `row`: The row index of the element (zero-based).\n * `column`: The column index of the element (zero-based).\n\n Returns a `Double` value representing the element at the specified position\n in the matrix.\n\n Example:\n\n ```moonbit\n test \"matrix/get\" {\n   // Create a 2x2 matrix with elements [[1.0, 2.0], [3.0, 4.0]]\n   let matrix = new_matrix([[1.0, 2.0], [3.0, 4.0]])\n   \n   // Get elements at different positions\n   inspect!(matrix.get(0, 0), content=\"1.0\")\n   inspect!(matrix.get(0, 1), content=\"2.0\")\n   inspect!(matrix.get(1, 0), content=\"3.0\")\n   inspect!(matrix.get(1, 1), content=\"4.0\")\n }\n ```",
          "signature": "fn <a href=\"xunyoyo/linalg/lib/matrix#Matrix\">Matrix</a>::get(self : <a href=\"xunyoyo/linalg/lib/matrix#Matrix\">Matrix</a>, i : Int, j : Int) -> Double",
          "loc": {
            "path": "xunyoyo/linalg/lib/matrix",
            "file": "matrix.mbt",
            "line": 508,
            "column": 8
          }
        },
        {
          "name": "inv",
          "docstring": " Computes the inverse of a square matrix using Gauss-Jordan elimination\n method.\n\n Parameters:\n\n * `matrix` : A square matrix to be inverted. Must be a non-singular matrix\n with equal number of rows and columns.\n\n Returns a new matrix that is the inverse of the input matrix.\n\n Throws a runtime error if:\n\n * The input matrix is not square (rows ≠ columns)\n * The input matrix is singular (determinant = 0)\n\n Examples:\n\n ```moonbit\n test \"matrix_inverse\" {\n   // Create a 2x2 matrix\n   let mat = new_matrix([[4.0, 7.0], [2.0, 6.0]])\n   let inverse = mat.inv()\n   \n   // Expected inverse matrix\n   let expected = new_matrix([[0.6, -0.7], [-0.2, 0.4]])\n   \n   // Check if the inverse is correct by multiplying with original matrix\n   let product = mat * inverse\n   let identity = eye(2)\n   \n   // The product should be approximately the identity matrix\n   inspect!(product.approx_eq(identity), content=\"true\")\n }\n \n test \"matrix_inverse_error\" {\n   // Create a non-square matrix\n   let mat = new_matrix([[1.0, 2.0], [3.0, 4.0], [5.0, 6.0]])\n   \n   // Attempting to invert a non-square matrix should panic\n   panic!(mat.inv())\n }\n \n test \"matrix_inverse_singular\" {\n   // Create a singular matrix\n   let mat = new_matrix([[1.0, 2.0], [2.0, 4.0]])\n   \n   // Attempting to invert a singular matrix should panic\n   panic!(mat.inv())\n }\n ```",
          "signature": "fn <a href=\"xunyoyo/linalg/lib/matrix#Matrix\">Matrix</a>::inv(self : <a href=\"xunyoyo/linalg/lib/matrix#Matrix\">Matrix</a>) -> <a href=\"xunyoyo/linalg/lib/matrix#Matrix\">Matrix</a>",
          "loc": {
            "path": "xunyoyo/linalg/lib/matrix",
            "file": "inv.mbt",
            "line": 51,
            "column": 8
          }
        },
        {
          "name": "k",
          "docstring": " Multiplies each element of a matrix by a scalar value, modifying the matrix\n in place.\n\n Parameters:\n\n * `matrix`: The matrix to be scaled. The operation will modify this matrix\n directly.\n * `scalar`: A floating-point number to multiply with each element of the\n matrix.\n\n Returns the modified matrix after scaling.\n\n Example:\n\n ```moonbit\n test \"matrix_scalar_multiplication\" {\n   let m = new_matrix([[1.0, 2.0], [3.0, 4.0]])\n   let result = m.k(2.0)\n   inspect!(result.data, content=\"[[2.0, 4.0], [6.0, 8.0]]\")\n   // The original matrix is modified\n   inspect!(m.data, content=\"[[2.0, 4.0], [6.0, 8.0]]\")\n }\n ```",
          "signature": "fn <a href=\"xunyoyo/linalg/lib/matrix#Matrix\">Matrix</a>::k(self : <a href=\"xunyoyo/linalg/lib/matrix#Matrix\">Matrix</a>, k : Double) -> <a href=\"xunyoyo/linalg/lib/matrix#Matrix\">Matrix</a>",
          "loc": {
            "path": "xunyoyo/linalg/lib/matrix",
            "file": "matrix.mbt",
            "line": 235,
            "column": 8
          }
        },
        {
          "name": "new",
          "docstring": "",
          "signature": "fn <a href=\"xunyoyo/linalg/lib/matrix#Matrix\">Matrix</a>::new(rows : Int, cols : Int) -> <a href=\"xunyoyo/linalg/lib/matrix#Matrix\">Matrix</a>",
          "loc": {
            "path": "xunyoyo/linalg/lib/matrix",
            "file": "matrix.mbt",
            "line": 871,
            "column": 16
          }
        },
        {
          "name": "norm",
          "docstring": "\n Calculates various types of norms for matrices and vectors. For vectors, the\n matrix is first flattened into a 1D array. For matrices, different matrix\n norms are computed based on the specified norm type.\n\n Parameters:\n\n * `matrix`: The input matrix for which to calculate the norm.\n * `norm_type`: The type of norm to calculate (default: `NormType::Two`).\n Available options:\n  * For vectors (when `axis` is `Vector`):\n  * `Zero`: Counts the number of non-zero elements\n  * `One`: Manhattan/Taxicab norm (sum of absolute values)\n  * `Two`: Euclidean norm (square root of sum of squares)\n  * `P(p)`: p-norm where p is a positive real number\n  * `Infinity`: Maximum absolute value\n  * For matrices (when `axis` is `Matrix`):\n  * `One`: Maximum absolute column sum\n  * `Two`: Spectral norm (square root of largest eigenvalue of A^T A)\n  * `Frobenius`: Square root of sum of squared elements\n  * `Infinity`: Maximum absolute row sum\n * `axis`: Specifies whether to treat the input as a vector or matrix\n (default: `Vector`)\n\n Returns a `Double` value representing the calculated norm.\n\n Throws an error with message \"NormType: Invalid norm type\" if an unsupported\n norm type is specified for the chosen axis.\n\n Examples:\n\n ```moonbit\n test \"norm/vector\" {\n   // Vector norms\n   let v = new_matrix([[1.0, -2.0, 3.0]])\n \n   // L1 norm (Manhattan)\n   inspect!(v.norm(ord=NormType::One), content=\"6.0\")\n \n   // L2 norm (Euclidean)\n   inspect!(v.norm(ord=NormType::Two), content=\"3.7416573867739413\")\n \n   // L∞ norm (Maximum)\n   inspect!(v.norm(ord=NormType::Infinity), content=\"3.0\")\n }\n \n test \"norm/matrix\" {\n   // Matrix norms\n   let m = new_matrix([[1.0, 2.0], [-3.0, 4.0]])\n \n   // Frobenius norm\n   inspect!(\n     m.norm(ord=NormType::Frobenius, axis=Matrix),\n     content=\"5.477225575051661\",\n   )\n \n   // Maximum absolute row sum (infinity norm)\n   inspect!(m.norm(ord=NormType::Infinity, axis=Matrix), content=\"7.0\")\n }\n \n test \"panic norm/invalid\" {\n   let m = new_matrix([[1.0, 2.0], [3.0, 4.0]])\n   // Zero norm is not defined for matrices\n   panic!(m.norm(ord=NormType::Zero, axis=Matrix))\n }\n ```",
          "signature": "fn <a href=\"xunyoyo/linalg/lib/matrix#Matrix\">Matrix</a>::norm(self : <a href=\"xunyoyo/linalg/lib/matrix#Matrix\">Matrix</a>, ord~ : <a href=\"xunyoyo/linalg/lib/matrix#NormType\">NormType</a> = .., axis~ : <a href=\"xunyoyo/linalg/lib/matrix#Type\">Type</a> = ..) -> Double",
          "loc": {
            "path": "xunyoyo/linalg/lib/matrix",
            "file": "norm.mbt",
            "line": 207,
            "column": 8
          }
        },
        {
          "name": "print",
          "docstring": " Prints each element of the matrix to the standard output, with each element\n on a new line.\n\n Parameters:\n\n * `matrix`: A `Matrix` instance to be printed.\n\n Example:\n\n ```moonbit\n test \"print_matrix\" {\n   let m = new_matrix(2, 2)\n   print(m)\n }\n ```",
          "signature": "fn <a href=\"xunyoyo/linalg/lib/matrix#Matrix\">Matrix</a>::print(self : <a href=\"xunyoyo/linalg/lib/matrix#Matrix\">Matrix</a>) -> Unit",
          "loc": {
            "path": "xunyoyo/linalg/lib/matrix",
            "file": "matrix.mbt",
            "line": 426,
            "column": 8
          }
        },
        {
          "name": "qr",
          "docstring": "\n Performs QR decomposition on a matrix using the Gram-Schmidt\n orthogonalization process. Decomposes a matrix A into a product of an\n orthogonal matrix Q and an upper triangular matrix R, such that A = QR.\n\n Parameters:\n\n * `matrix`: The input matrix to be decomposed. Must have at least as many\n rows as columns.\n\n Returns a tuple (Q, R) where:\n\n * Q is an m×n orthogonal matrix (Q^T Q = I)\n * R is an n×n upper triangular matrix\n\n Throws:\n\n * `MatrixShapeError` if the input matrix has fewer rows than columns\n * `MatrixError` if the input matrix is rank deficient (i.e., not full column\n rank)\n\n Examples:\n\n ```moonbit\n test \"qr/basic\" {\n   let a = Matrix::new_matrix(\n     [[12.0, -51.0, 4.0], [6.0, 167.0, -68.0], [-4.0, 24.0, -41.0]],\n   )\n   let (q, r) = a.qr()\n \n   // Verify Q is orthogonal (Q^T Q ≈ I)\n   let qt = q.transpose()\n   let qtq = qt * q\n   let i = eye(3)\n   inspect!(qtq.approx_eq(i), content=\"true\")\n \n   // Verify R is upper triangular\n   for i = 1; i < 3; i = i + 1 {\n     for j = 0; j < i; j = j + 1 {\n       inspect!(r.data[i][j], content=\"0.0\")\n     }\n   }\n \n   // Verify A = QR\n   let a2 = q * r\n   inspect!(a2.approx_eq(a), content=\"true\")\n }\n \n test \"panic qr/invalid_shape\" {\n   // Matrix with more columns than rows\n   let a = Matrix::new_matrix([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]])\n   panic!(a.qr())\n }\n \n test \"panic qr/rank_deficient\" {\n   // Rank deficient matrix\n   let a = Matrix::new_matrix([[1.0, 1.0], [2.0, 2.0]])\n   panic!(a.qr())\n }\n ```",
          "signature": "fn <a href=\"xunyoyo/linalg/lib/matrix#Matrix\">Matrix</a>::qr(self : <a href=\"xunyoyo/linalg/lib/matrix#Matrix\">Matrix</a>) -> (<a href=\"xunyoyo/linalg/lib/matrix#Matrix\">Matrix</a>, <a href=\"xunyoyo/linalg/lib/matrix#Matrix\">Matrix</a>)",
          "loc": {
            "path": "xunyoyo/linalg/lib/matrix",
            "file": "qr.mbt",
            "line": 61,
            "column": 8
          }
        },
        {
          "name": "rank",
          "docstring": "\n Calculates the rank of a matrix using Gaussian elimination method. The rank\n is defined as the number of linearly independent rows or columns in the\n matrix.\n\n Parameters:\n\n * `matrix`: A matrix whose rank needs to be calculated.\n\n Returns an integer representing the rank of the matrix.\n\n Examples:\n\n ```moonbit\n test \"rank/full_rank\" {\n   // Create a 2x2 matrix with full rank\n   let m = new_matrix([[1.0, 0.0], [0.0, 1.0]])\n   inspect!(m.rank(), content=\"2\")\n }\n \n test \"rank/not_full_rank\" {\n   // Create a 3x3 matrix with rank 2\n   let m = new_matrix(\n     [\n       [1.0, 2.0, 3.0],\n       [2.0, 4.0, 6.0], // This row is twice the first row\n       [0.0, 1.0, 0.0],\n     ],\n   )\n   inspect!(m.rank(), content=\"2\")\n }\n \n test \"rank/zero_matrix\" {\n   // Create a zero matrix\n   let m = zero(3, 3)\n   inspect!(m.rank(), content=\"0\")\n }\n \n test \"rank/rectangular\" {\n   // Create a 2x3 matrix\n   let m = new_matrix([[1.0, 0.0, 2.0], [0.0, 3.0, 4.0]])\n   inspect!(m.rank(), content=\"2\")\n }\n ```",
          "signature": "fn <a href=\"xunyoyo/linalg/lib/matrix#Matrix\">Matrix</a>::rank(self : <a href=\"xunyoyo/linalg/lib/matrix#Matrix\">Matrix</a>) -> Int",
          "loc": {
            "path": "xunyoyo/linalg/lib/matrix",
            "file": "matrix.mbt",
            "line": 597,
            "column": 8
          }
        },
        {
          "name": "reshape",
          "docstring": " Reshapes a matrix into a new matrix with specified dimensions, preserving the\n elements in row-major order.\n\n Parameters:\n\n * `matrix` : The original matrix to be reshaped.\n * `rows` : The number of rows in the new matrix.\n * `cols` : The number of columns in the new matrix.\n\n Returns a new matrix with the specified dimensions containing all elements\n from the input matrix.\n\n Example:\n\n ```moonbit\n test \"reshape\" {\n   // Create a 2x3 matrix\n   let m = new_matrix([[1, 2, 3], [4, 5, 6]])\n   \n   // Reshape to 3x2 matrix\n   let reshaped = m.reshape(3, 2)\n   \n   // The elements are preserved in row-major order\n   inspect!(reshaped.data, content=\"[[1, 2], [3, 4], [5, 6]]\")\n }\n \n test \"reshape/identity\" {\n   // Reshaping to same dimensions should return equivalent matrix\n   let m = new_matrix([[1, 2], [3, 4]])\n   let reshaped = m.reshape(2, 2)\n   inspect!(reshaped.data, content=\"[[1, 2], [3, 4]]\")\n }\n ```",
          "signature": "fn <a href=\"xunyoyo/linalg/lib/matrix#Matrix\">Matrix</a>::reshape(self : <a href=\"xunyoyo/linalg/lib/matrix#Matrix\">Matrix</a>, rows : Int, cols : Int) -> <a href=\"xunyoyo/linalg/lib/matrix#Matrix\">Matrix</a>",
          "loc": {
            "path": "xunyoyo/linalg/lib/matrix",
            "file": "matrix.mbt",
            "line": 776,
            "column": 8
          }
        },
        {
          "name": "shape",
          "docstring": " Returns the dimensions of a matrix as a tuple of (rows, columns).\n\n Parameters:\n\n * `matrix`: A Matrix instance whose dimensions are to be retrieved.\n\n Returns a tuple `(Int, Int)` where the first element is the number of rows\n and the second element is the number of columns in the matrix.\n\n Example:\n\n ```moonbit\n test \"matrix_shape\" {\n   let m = Matrix::new(2, 3, 0) // Create a 2x3 matrix filled with zeros\n   inspect!(m.shape(), content=\"(2, 3)\")\n }\n ```",
          "signature": "fn <a href=\"xunyoyo/linalg/lib/matrix#Matrix\">Matrix</a>::shape(self : <a href=\"xunyoyo/linalg/lib/matrix#Matrix\">Matrix</a>) -> (Int, Int)",
          "loc": {
            "path": "xunyoyo/linalg/lib/matrix",
            "file": "matrix.mbt",
            "line": 163,
            "column": 8
          }
        },
        {
          "name": "slice",
          "docstring": "\n Creates a submatrix by extracting a rectangular region from an existing\n matrix using specified row and column ranges.\n\n Parameters:\n\n * `matrix`: The source matrix from which to extract the slice.\n * `row_start`: The starting row index (inclusive) of the slice.\n * `row_end`: The ending row index (exclusive) of the slice.\n * `col_start`: The starting column index (inclusive) of the slice.\n * `col_end`: The ending column index (exclusive) of the slice.\n\n Returns a new matrix containing the specified slice of the original matrix.\n\n Throws an error with message \"SliceError: Invalid row indices\" if:\n\n * `row_start` is negative\n * `row_end` exceeds the number of rows in the matrix\n * `row_start` is greater than `row_end`\n\n Throws an error with message \"SliceError: Invalid column indices\" if:\n\n * `col_start` is negative\n * `col_end` exceeds the number of columns in the matrix\n * `col_start` is greater than `col_end`\n\n Examples:\n\n ```moonbit\n test \"slice/basic\" {\n   let m = new_matrix([[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]])\n \n   // Extract 2x2 submatrix from the middle\n   let slice = m.slice(0, 2, 1, 3)\n   inspect!(slice.rows, content=\"2\")\n   inspect!(slice.cols, content=\"2\")\n   inspect!(slice.data, content=\"[[2.0, 3.0], [5.0, 6.0]]\")\n }\n \n test \"panic slice/invalid_row_indices\" {\n   let m = new_matrix([[1.0, 2.0], [3.0, 4.0]])\n   // Should panic with \"SliceError: Invalid row indices\"\n   m.slice(-1, 2, 0, 2)\n }\n \n test \"panic slice/invalid_column_indices\" {\n   let m = new_matrix([[1.0, 2.0], [3.0, 4.0]])\n   // Should panic with \"SliceError: Invalid column indices\"\n   m.slice(0, 2, 0, 3)\n }\n ```",
          "signature": "fn <a href=\"xunyoyo/linalg/lib/matrix#Matrix\">Matrix</a>::slice(self : <a href=\"xunyoyo/linalg/lib/matrix#Matrix\">Matrix</a>, row_start : Int, row_end : Int, col_start : Int, col_end : Int) -> <a href=\"xunyoyo/linalg/lib/matrix#Matrix\">Matrix</a>",
          "loc": {
            "path": "xunyoyo/linalg/lib/matrix",
            "file": "matrix.mbt",
            "line": 684,
            "column": 8
          }
        },
        {
          "name": "svd",
          "docstring": " Performs Singular Value Decomposition (SVD) of a matrix.\n Decomposes a matrix A into the product U·Σ·V^T where:\n - U is an orthogonal matrix\n - Σ is a diagonal matrix with non-negative real numbers (singular values)\n - V^T is the transpose of an orthogonal matrix V\n\n Parameters:\n * `matrix`: Input matrix to decompose\n\n Returns a tuple (U, Σ, V) containing the three component matrices\n\n Example:\n ```moonbit\n test \"svd/basic\" {\n   let a = Matrix::new_matrix([[3.0, 1.0], [1.0, 3.0]])\n   let (u, s, v) = a.svd()\n   \n   // Verify A = U·Σ·V^T\n   let vt = v.transpose()\n   let usv = u * (s * vt)\n   inspect!(usv.approx_eq(a), content=\"true\")\n   \n   // Verify U and V are orthogonal\n   let ut = u.transpose()\n   let utu = ut * u\n   let i = eye(2)\n   inspect!(utu.approx_eq(i), content=\"true\")\n   \n   let vt = v.transpose()\n   let vtv = vt * v \n   inspect!(vtv.approx_eq(i), content=\"true\")\n }\n ```",
          "signature": "fn <a href=\"xunyoyo/linalg/lib/matrix#Matrix\">Matrix</a>::svd(self : <a href=\"xunyoyo/linalg/lib/matrix#Matrix\">Matrix</a>) -> (<a href=\"xunyoyo/linalg/lib/matrix#Matrix\">Matrix</a>, <a href=\"xunyoyo/linalg/lib/matrix#Matrix\">Matrix</a>, <a href=\"xunyoyo/linalg/lib/matrix#Matrix\">Matrix</a>)",
          "loc": {
            "path": "xunyoyo/linalg/lib/matrix",
            "file": "svd.mbt",
            "line": 34,
            "column": 8
          }
        },
        {
          "name": "tr",
          "docstring": " Computes the trace of a square matrix, which is the sum of elements on the\n main diagonal (from top-left to bottom-right).\n\n Parameters:\n\n * `matrix` : A square matrix represented as a `Matrix` instance. The number\n of rows must equal the number of columns.\n\n Returns the trace of the matrix as a `Double`.\n\n Throws:\n The function aborts with a \"MatrixShapeError\" message if the input matrix is\n not square (i.e., number of rows != number of columns).\n\n Examples:\n\n ```moonbit\n test \"matrix_trace\" {\n   let m = new_matrix(2, 2)\n   m.data[0][0] = 1.0\n   m.data[0][1] = 2.0\n   m.data[1][0] = 3.0\n   m.data[1][1] = 4.0\n   \n   // Trace should be 1.0 + 4.0 = 5.0\n   inspect!(m.tr(), content=\"5.0\")\n }\n \n test \"panic_non_square_matrix\" {\n   let m = new_matrix(2, 3)\n   // Should panic when matrix is not square\n   inspect!(m.tr(), content=\"MatrixShapeError: Matrix must be square to compute trace\")\n }\n ```",
          "signature": "fn <a href=\"xunyoyo/linalg/lib/matrix#Matrix\">Matrix</a>::tr(self : <a href=\"xunyoyo/linalg/lib/matrix#Matrix\">Matrix</a>) -> Double",
          "loc": {
            "path": "xunyoyo/linalg/lib/matrix",
            "file": "matrix.mbt",
            "line": 201,
            "column": 8
          }
        },
        {
          "name": "transpose",
          "docstring": " Transposes a matrix by swapping its rows and columns.\n\n Parameters:\n\n * `matrix`: A matrix to be transposed. The input matrix must be valid, i.e.,\n all rows must have the same length.\n\n Returns a new matrix where rows and columns are swapped from the input\n matrix.\n\n Examples:\n\n ```moonbit\n test \"transpose/square\" {\n   let m = new_matrix([[1, 2], [3, 4]])\n   let mt = transpose(m)\n   inspect!(mt.data, content=\"[[1, 3], [2, 4]]\")\n }\n \n test \"transpose/rectangular\" {\n   let m = new_matrix([[1, 2, 3], [4, 5, 6]])\n   let mt = transpose(m)\n   inspect!(mt.data, content=\"[[1, 4], [2, 5], [3, 6]]\")\n }\n \n test \"transpose/twice\" {\n   // Transposing a matrix twice returns the original matrix\n   let m = new_matrix([[1, 2], [3, 4]])\n   let mtt = transpose(transpose(m))\n   inspect!(mtt.data, content=\"[[1, 2], [3, 4]]\")\n }\n ```",
          "signature": "fn <a href=\"xunyoyo/linalg/lib/matrix#Matrix\">Matrix</a>::transpose(self : <a href=\"xunyoyo/linalg/lib/matrix#Matrix\">Matrix</a>) -> <a href=\"xunyoyo/linalg/lib/matrix#Matrix\">Matrix</a>",
          "loc": {
            "path": "xunyoyo/linalg/lib/matrix",
            "file": "matrix.mbt",
            "line": 271,
            "column": 8
          }
        }
      ],
      "impls": []
    },
    {
      "name": "NormType",
      "docstring": "",
      "signature": "type NormType",
      "loc": {
        "path": "xunyoyo/linalg/lib/matrix",
        "file": "norm.mbt",
        "line": 2,
        "column": 6
      },
      "methods": [],
      "impls": []
    },
    {
      "name": "Type",
      "docstring": "",
      "signature": "type Type",
      "loc": {
        "path": "xunyoyo/linalg/lib/matrix",
        "file": "norm.mbt",
        "line": 12,
        "column": 6
      },
      "methods": [],
      "impls": []
    }
  ],
  "typealias": [],
  "values": [
    {
      "name": "diag",
      "docstring": " Creates a square diagonal matrix from a given array, where the diagonal\n elements are taken from the array and all other elements are set to zero.\n\n Parameters:\n\n * `array` : An array of double-precision floating-point numbers that will\n form the diagonal elements of the matrix.\n\n Returns a `Matrix` structure where:\n\n * The diagonal elements are filled with values from the input array\n * All non-diagonal elements are set to 0.0\n * The dimensions (rows and columns) are equal to the length of the input\n array\n\n Example:\n\n ```moonbit\n test \"diagonal_matrix\" {\n   let arr = [1.0, 2.0, 3.0]\n   let matrix = diag(arr)\n   \n   // Check dimensions\n   inspect!(matrix.rows, content=\"3\")\n   inspect!(matrix.cols, content=\"3\")\n   \n   // Check diagonal elements\n   inspect!(matrix.data[0][0], content=\"1.0\")\n   inspect!(matrix.data[1][1], content=\"2.0\")\n   inspect!(matrix.data[2][2], content=\"3.0\")\n   \n   // Check non-diagonal elements\n   inspect!(matrix.data[0][1], content=\"0.0\")\n   inspect!(matrix.data[1][0], content=\"0.0\")\n   inspect!(matrix.data[1][2], content=\"0.0\")\n   inspect!(matrix.data[2][1], content=\"0.0\")\n }\n ```",
      "signature": "fn diag(arr : <a href=\"moonbitlang/core/array#Array\">Array</a>[Double]) -> <a href=\"xunyoyo/linalg/lib/matrix#Matrix\">Matrix</a>",
      "loc": {
        "path": "xunyoyo/linalg/lib/matrix",
        "file": "matrix.mbt",
        "line": 396,
        "column": 8
      }
    },
    {
      "name": "diagonal",
      "docstring": "",
      "signature": "fn diagonal(matrix : <a href=\"xunyoyo/linalg/lib/matrix#Matrix\">Matrix</a>, offset~ : Int = ..) -> <a href=\"moonbitlang/core/array#Array\">Array</a>[Double]",
      "loc": {
        "path": "xunyoyo/linalg/lib/matrix",
        "file": "diagonal.mbt",
        "line": 1,
        "column": 8
      }
    },
    {
      "name": "eye",
      "docstring": " Creates a square identity matrix of the specified size.\n\n Parameters:\n\n * `size`: The dimension of the square matrix. Must be a positive integer.\n\n Returns a `Matrix` representing an identity matrix where all elements are 0.0\n except for the diagonal elements which are 1.0.\n\n Examples:\n\n ```moonbit\n test \"eye/2x2\" {\n   let matrix = eye(2)\n   inspect!(matrix[0][0], content=\"1.0\")\n   inspect!(matrix[0][1], content=\"0.0\")\n   inspect!(matrix[1][0], content=\"0.0\")\n   inspect!(matrix[1][1], content=\"1.0\")\n }\n \n test \"eye/3x3\" {\n   let matrix = eye(3)\n   // Check diagonal elements\n   inspect!(matrix[0][0], content=\"1.0\")\n   inspect!(matrix[1][1], content=\"1.0\")\n   inspect!(matrix[2][2], content=\"1.0\")\n   // Check non-diagonal elements\n   inspect!(matrix[0][1], content=\"0.0\")\n   inspect!(matrix[1][2], content=\"0.0\")\n   inspect!(matrix[2][0], content=\"0.0\")\n }\n ```",
      "signature": "fn eye(size : Int) -> <a href=\"xunyoyo/linalg/lib/matrix#Matrix\">Matrix</a>",
      "loc": {
        "path": "xunyoyo/linalg/lib/matrix",
        "file": "matrix.mbt",
        "line": 344,
        "column": 8
      }
    },
    {
      "name": "lstsq",
      "docstring": " Computes the least-squares solution to a linear matrix equation.\n\n Parameters:\n * `a`: (M, N) array - \"Coefficient\" matrix\n * `b`: (M,) array - Ordinate (\"dependent variable\") values\n\n Returns:\n * The least-squares solution to the equation ax = b\n\n Example:\n ```moonbit\n test \"lstsq/basic\" {  \n   // Solve the overdetermined system:\n   // 1x + 1y = 2\n   // 2x + 1y = 3\n   // 1x + 2y = 4\n   let a = new_matrix([\n     [1.0, 1.0],\n     [2.0, 1.0],\n     [1.0, 2.0]\n   ])\n   let b = new_matrix([[2.0], [3.0], [4.0]])\n   \n   let x = lstsq(a, b)\n   // Expected solution: x ≈ 1, y ≈ 1.5\n   inspect!(x.data[0][0], content=\"1.0000000000000002\") \n   inspect!(x.data[1][0], content=\"1.4999999999999998\")\n }\n ```",
      "signature": "fn lstsq(a : <a href=\"xunyoyo/linalg/lib/matrix#Matrix\">Matrix</a>, b : <a href=\"xunyoyo/linalg/lib/matrix#Matrix\">Matrix</a>) -> <a href=\"xunyoyo/linalg/lib/matrix#Matrix\">Matrix</a>",
      "loc": {
        "path": "xunyoyo/linalg/lib/matrix",
        "file": "lstsq.mbt",
        "line": 30,
        "column": 8
      }
    },
    {
      "name": "new_matrix",
      "docstring": " Creates a new matrix from a 2D array of Double values. If rows and cols are\n not specified, they will be inferred from the input array dimensions.\n\n Parameters:\n\n * `data`: A 2D array of Double values representing the matrix elements. The\n array must be rectangular (all rows must have the same length).\n * `rows`: (Optional) The number of rows in the matrix. Defaults to the length\n of the input array.\n * `cols`: (Optional) The number of columns in the matrix. Defaults to the\n length of the first row in the input array.\n\n Returns a new Matrix instance containing a copy of the input data.\n\n Examples:\n\n ```moonbit\n test \"new_matrix/default_dimensions\" {\n   let data = [[1.0, 2.0], [3.0, 4.0]]\n   let matrix = new_matrix(data)\n   inspect!(matrix.rows, content=\"2\")\n   inspect!(matrix.cols, content=\"2\")\n   inspect!(matrix.data[0][0], content=\"1\")\n   inspect!(matrix.data[1][1], content=\"4\")\n }\n \n test \"new_matrix/explicit_dimensions\" {\n   let data = [[1.0, 2.0, 3.0]]\n   let matrix = new_matrix(data, rows=1, cols=3)\n   inspect!(matrix.rows, content=\"1\")\n   inspect!(matrix.cols, content=\"3\")\n   inspect!(matrix.data[0][2], content=\"3\")\n }\n ```",
      "signature": "fn new_matrix(data_ : <a href=\"moonbitlang/core/array#Array\">Array</a>[<a href=\"moonbitlang/core/array#Array\">Array</a>[Double]], rows~ : Int = .., cols~ : Int = ..) -> <a href=\"xunyoyo/linalg/lib/matrix#Matrix\">Matrix</a>",
      "loc": {
        "path": "xunyoyo/linalg/lib/matrix",
        "file": "matrix.mbt",
        "line": 861,
        "column": 8
      }
    },
    {
      "name": "solve",
      "docstring": " Solves a system of linear equations represented by matrices A and B in the\n form AX = B, where X is the solution matrix.\n Returns the solution matrix X by computing X = A^(-1)B.\n\n Parameters:\n\n * `coefficient_matrix`: A square matrix A containing the coefficients of the\n system of linear equations.\n * `constant_matrix`: A matrix B containing the constant terms of the system.\n\n Returns the solution matrix X that satisfies AX = B.\n\n Throws an error with message \"MatrixShapeError: Incompatible dimensions for\n solving the system of equations\" if:\n\n * The coefficient matrix is not square (rows ≠ columns)\n * The dimensions of the constant matrix are incompatible with the coefficient\n matrix\n\n Example:\n\n ```moonbit\n test \"solve/simple_system\" {\n   // Solve the system:\n   // 2x + y = 5\n   // x + 3y = 10\n   let a = new_matrix([\n     [2.0, 1.0],\n     [1.0, 3.0]\n   ])\n   let b = new_matrix([\n     [5.0],\n     [10.0]\n   ])\n   let x = solve(a, b)\n   // Expected solution: x = 1, y = 3\n   inspect!(x.rows, content=\"2\")\n   inspect!(x.cols, content=\"1\")\n   inspect!(x.data[0][0], content=\"1.0\")\n   inspect!(x.data[0][1], content=\"3.0\")\n }\n ```",
      "signature": "fn solve(a : <a href=\"xunyoyo/linalg/lib/matrix#Matrix\">Matrix</a>, b : <a href=\"xunyoyo/linalg/lib/matrix#Matrix\">Matrix</a>) -> <a href=\"xunyoyo/linalg/lib/matrix#Matrix\">Matrix</a>",
      "loc": {
        "path": "xunyoyo/linalg/lib/matrix",
        "file": "matrix.mbt",
        "line": 474,
        "column": 8
      }
    },
    {
      "name": "zero",
      "docstring": " Creates a new matrix of the specified size with all elements initialized to\n zero.\n\n Parameters:\n\n * `rows`: The number of rows in the matrix.\n * `cols`: The number of columns in the matrix.\n\n Returns a new `Matrix` with all elements set to zero.\n\n Example:\n\n ```moonbit\n test \"zero matrix\" {\n   let m = zero(2, 3)\n   inspect!(m.rows(), content=\"2\")\n   inspect!(m.cols(), content=\"3\")\n   inspect!(m[0][0], content=\"0\")\n   inspect!(m[1][2], content=\"0\")\n }\n ```",
      "signature": "fn zero(rows : Int, cols : Int) -> <a href=\"xunyoyo/linalg/lib/matrix#Matrix\">Matrix</a>",
      "loc": {
        "path": "xunyoyo/linalg/lib/matrix",
        "file": "matrix.mbt",
        "line": 302,
        "column": 8
      }
    }
  ],
  "misc": []
}