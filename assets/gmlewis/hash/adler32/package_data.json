{
  "name": "gmlewis/hash/adler32",
  "traits": [],
  "types": [
    {
      "name": "Digest",
      "docstring": "\n Digest represents the partial evaluation of a checksum.\n The low 16 bits are s1, the high 16 bits are s2.",
      "signature": "type Digest",
      "loc": {
        "path": "gmlewis/hash/adler32",
        "file": "adler32.mbt",
        "line": 40,
        "column": 8
      },
      "methods": [
        {
          "name": "marshal_binary",
          "docstring": "",
          "signature": "fn <a href=\"gmlewis/hash/adler32#Digest\">Digest</a>::marshal_binary(self : <a href=\"gmlewis/hash/adler32#Digest\">Digest</a>) -> (<a href=\"gmlewis/io#Slice\">@gmlewis/io.Slice</a>[Byte], <a href=\"gmlewis/io#IOError\">@gmlewis/io.IOError</a>?)",
          "loc": {
            "path": "gmlewis/hash/adler32",
            "file": "adler32.mbt",
            "line": 80,
            "column": 8
          }
        },
        {
          "name": "unmarshal_binary",
          "docstring": "",
          "signature": "fn <a href=\"gmlewis/hash/adler32#Digest\">Digest</a>::unmarshal_binary(self : <a href=\"gmlewis/hash/adler32#Digest\">Digest</a>, b : <a href=\"gmlewis/io#Slice\">@gmlewis/io.Slice</a>[Byte]) -> <a href=\"gmlewis/io#IOError\">@gmlewis/io.IOError</a>?",
          "loc": {
            "path": "gmlewis/hash/adler32",
            "file": "adler32.mbt",
            "line": 108,
            "column": 8
          }
        }
      ],
      "impls": [
        {
          "self": {
            "kind": "constr",
            "constructor": {
              "name": "Digest",
              "path": "gmlewis/hash/adler32"
            },
            "arguments": []
          },
          "trait": { "name": "Hash32", "path": "gmlewis/hash" },
          "methods": [
            {
              "name": "block_size",
              "docstring": "",
              "signature": "fn block_size(_self : <a href=\"gmlewis/hash/adler32#Digest\">Digest</a>) -> Int",
              "loc": {
                "path": "gmlewis/hash/adler32",
                "file": "adler32.mbt",
                "line": 69,
                "column": 39
              }
            },
            {
              "name": "reset",
              "docstring": "",
              "signature": "fn reset(self : <a href=\"gmlewis/hash/adler32#Digest\">Digest</a>) -> Unit",
              "loc": {
                "path": "gmlewis/hash/adler32",
                "file": "adler32.mbt",
                "line": 45,
                "column": 39
              }
            },
            {
              "name": "size",
              "docstring": "",
              "signature": "fn size(_self : <a href=\"gmlewis/hash/adler32#Digest\">Digest</a>) -> Int",
              "loc": {
                "path": "gmlewis/hash/adler32",
                "file": "adler32.mbt",
                "line": 64,
                "column": 39
              }
            },
            {
              "name": "sum",
              "docstring": "",
              "signature": "fn sum(self : <a href=\"gmlewis/hash/adler32#Digest\">Digest</a>, p : <a href=\"gmlewis/io#Slice\">@gmlewis/io.Slice</a>[Byte]) -> <a href=\"gmlewis/io#Slice\">@gmlewis/io.Slice</a>[Byte]",
              "loc": {
                "path": "gmlewis/hash/adler32",
                "file": "adler32.mbt",
                "line": 160,
                "column": 39
              }
            },
            {
              "name": "sum32",
              "docstring": "",
              "signature": "fn sum32(self : <a href=\"gmlewis/hash/adler32#Digest\">Digest</a>) -> UInt",
              "loc": {
                "path": "gmlewis/hash/adler32",
                "file": "adler32.mbt",
                "line": 155,
                "column": 39
              }
            },
            {
              "name": "write",
              "docstring": "\n Add p to the running checksum d.",
              "signature": "fn write(self : <a href=\"gmlewis/hash/adler32#Digest\">Digest</a>, p : <a href=\"gmlewis/io#Slice\">@gmlewis/io.Slice</a>[Byte]) -> (Int, <a href=\"gmlewis/io#IOError\">@gmlewis/io.IOError</a>?)",
              "loc": {
                "path": "gmlewis/hash/adler32",
                "file": "adler32.mbt",
                "line": 121,
                "column": 39
              }
            }
          ]
        }
      ]
    }
  ],
  "typealias": [],
  "values": [
    {
      "name": "checksum",
      "docstring": "\n checksum returns the Adler-32 checksum of data.",
      "signature": "fn checksum(data : <a href=\"gmlewis/io#Slice\">@gmlewis/io.Slice</a>[Byte]) -> UInt",
      "loc": {
        "path": "gmlewis/hash/adler32",
        "file": "adler32.mbt",
        "line": 172,
        "column": 8
      }
    },
    {
      "name": "marshal_binary",
      "docstring": "",
      "signature": "fn marshal_binary(self : <a href=\"gmlewis/hash/adler32#Digest\">Digest</a>) -> (<a href=\"gmlewis/io#Slice\">@gmlewis/io.Slice</a>[Byte], <a href=\"gmlewis/io#IOError\">@gmlewis/io.IOError</a>?)",
      "loc": {
        "path": "gmlewis/hash/adler32",
        "file": "adler32.mbt",
        "line": 80,
        "column": 8
      }
    },
    {
      "name": "new",
      "docstring": "\n New returns a new hash.Hash32 computing the Adler-32 checksum. Its\n Sum method will lay the value out in big-endian byte order. The\n returned Hash32 also implements [encoding.BinaryMarshaler] and\n [encoding.BinaryUnmarshaler] to marshal and unmarshal the internal\n state of the hash.",
      "signature": "fn new() -> <a href=\"gmlewis/hash/adler32#Digest\">Digest</a>",
      "loc": {
        "path": "gmlewis/hash/adler32",
        "file": "adler32.mbt",
        "line": 55,
        "column": 8
      }
    },
    {
      "name": "unmarshal_binary",
      "docstring": "",
      "signature": "fn unmarshal_binary(self : <a href=\"gmlewis/hash/adler32#Digest\">Digest</a>, b : <a href=\"gmlewis/io#Slice\">@gmlewis/io.Slice</a>[Byte]) -> <a href=\"gmlewis/io#IOError\">@gmlewis/io.IOError</a>?",
      "loc": {
        "path": "gmlewis/hash/adler32",
        "file": "adler32.mbt",
        "line": 108,
        "column": 8
      }
    }
  ],
  "misc": []
}